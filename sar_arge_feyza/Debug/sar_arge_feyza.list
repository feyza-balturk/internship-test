
sar_arge_feyza.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b350  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800b4d8  0800b4d8  0001b4d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4f4  0800b4f4  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b4f4  0800b4f4  0001b4f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4fc  0800b4fc  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4fc  0800b4fc  0001b4fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b500  0800b500  0001b500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800b504  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000a3c  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ab8  20000ab8  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   000217ac  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004c84  00000000  00000000  0004189b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001bc8  00000000  00000000  00046520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000159e  00000000  00000000  000480e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026eb7  00000000  00000000  00049686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002543c  00000000  00000000  0007053d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e51e7  00000000  00000000  00095979  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000079d8  00000000  00000000  0017ab60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  00182538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b4c0 	.word	0x0800b4c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800b4c0 	.word	0x0800b4c0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <ADIS_ReadReg16>:
#include "main.h"



uint16_t ADIS_ReadReg16(uint16_t reg_addr)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	80fb      	strh	r3, [r7, #6]
    uint8_t tx_buf[2];
    uint8_t rx_buf[2];
    uint16_t result;

    tx_buf[0] = (reg_addr >> 8) | 0x80; // MSB + okuma biti
 80004ce:	88fb      	ldrh	r3, [r7, #6]
 80004d0:	0a1b      	lsrs	r3, r3, #8
 80004d2:	b29b      	uxth	r3, r3
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	733b      	strb	r3, [r7, #12]
    tx_buf[1] = reg_addr & 0xFF;
 80004de:	88fb      	ldrh	r3, [r7, #6]
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	737b      	strb	r3, [r7, #13]

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // CS LOW
 80004e4:	2200      	movs	r2, #0
 80004e6:	2110      	movs	r1, #16
 80004e8:	4818      	ldr	r0, [pc, #96]	; (800054c <ADIS_ReadReg16+0x88>)
 80004ea:	f002 fa09 	bl	8002900 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, tx_buf, 2, HAL_MAX_DELAY);
 80004ee:	f107 010c 	add.w	r1, r7, #12
 80004f2:	f04f 33ff 	mov.w	r3, #4294967295
 80004f6:	2202      	movs	r2, #2
 80004f8:	4815      	ldr	r0, [pc, #84]	; (8000550 <ADIS_ReadReg16+0x8c>)
 80004fa:	f005 fa6a 	bl	80059d2 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // CS HIGH
 80004fe:	2201      	movs	r2, #1
 8000500:	2110      	movs	r1, #16
 8000502:	4812      	ldr	r0, [pc, #72]	; (800054c <ADIS_ReadReg16+0x88>)
 8000504:	f002 f9fc 	bl	8002900 <HAL_GPIO_WritePin>

    HAL_Delay(1); // sensör cevabı hazırlasın diye 16us gecikme
 8000508:	2001      	movs	r0, #1
 800050a:	f001 f87b 	bl	8001604 <HAL_Delay>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // CS LOW
 800050e:	2200      	movs	r2, #0
 8000510:	2110      	movs	r1, #16
 8000512:	480e      	ldr	r0, [pc, #56]	; (800054c <ADIS_ReadReg16+0x88>)
 8000514:	f002 f9f4 	bl	8002900 <HAL_GPIO_WritePin>
    HAL_SPI_Receive(&hspi1, rx_buf, 2, HAL_MAX_DELAY);
 8000518:	f107 0108 	add.w	r1, r7, #8
 800051c:	f04f 33ff 	mov.w	r3, #4294967295
 8000520:	2202      	movs	r2, #2
 8000522:	480b      	ldr	r0, [pc, #44]	; (8000550 <ADIS_ReadReg16+0x8c>)
 8000524:	f005 fb91 	bl	8005c4a <HAL_SPI_Receive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // CS HIGH
 8000528:	2201      	movs	r2, #1
 800052a:	2110      	movs	r1, #16
 800052c:	4807      	ldr	r0, [pc, #28]	; (800054c <ADIS_ReadReg16+0x88>)
 800052e:	f002 f9e7 	bl	8002900 <HAL_GPIO_WritePin>

    result = (rx_buf[0] << 8) | rx_buf[1];
 8000532:	7a3b      	ldrb	r3, [r7, #8]
 8000534:	021b      	lsls	r3, r3, #8
 8000536:	b21a      	sxth	r2, r3
 8000538:	7a7b      	ldrb	r3, [r7, #9]
 800053a:	b21b      	sxth	r3, r3
 800053c:	4313      	orrs	r3, r2
 800053e:	b21b      	sxth	r3, r3
 8000540:	81fb      	strh	r3, [r7, #14]
    return result;
 8000542:	89fb      	ldrh	r3, [r7, #14]
}
 8000544:	4618      	mov	r0, r3
 8000546:	3710      	adds	r7, #16
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	40020000 	.word	0x40020000
 8000550:	200001a4 	.word	0x200001a4

08000554 <Read_IMU>:

void Read_IMU(float *acc_x, float *acc_y, float *acc_z,
              float *gyro_x, float *gyro_y, float *gyro_z)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b088      	sub	sp, #32
 8000558:	af00      	add	r7, sp, #0
 800055a:	60f8      	str	r0, [r7, #12]
 800055c:	60b9      	str	r1, [r7, #8]
 800055e:	607a      	str	r2, [r7, #4]
 8000560:	603b      	str	r3, [r7, #0]
    int16_t gx = (int16_t)ADIS_ReadReg16(0x0400);
 8000562:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000566:	f7ff ffad 	bl	80004c4 <ADIS_ReadReg16>
 800056a:	4603      	mov	r3, r0
 800056c:	83fb      	strh	r3, [r7, #30]
    int16_t gy = (int16_t)ADIS_ReadReg16(0x0402);
 800056e:	f240 4002 	movw	r0, #1026	; 0x402
 8000572:	f7ff ffa7 	bl	80004c4 <ADIS_ReadReg16>
 8000576:	4603      	mov	r3, r0
 8000578:	83bb      	strh	r3, [r7, #28]
    int16_t gz = (int16_t)ADIS_ReadReg16(0x0404);
 800057a:	f240 4004 	movw	r0, #1028	; 0x404
 800057e:	f7ff ffa1 	bl	80004c4 <ADIS_ReadReg16>
 8000582:	4603      	mov	r3, r0
 8000584:	837b      	strh	r3, [r7, #26]
    int16_t ax = (int16_t)ADIS_ReadReg16(0x0410);
 8000586:	f44f 6082 	mov.w	r0, #1040	; 0x410
 800058a:	f7ff ff9b 	bl	80004c4 <ADIS_ReadReg16>
 800058e:	4603      	mov	r3, r0
 8000590:	833b      	strh	r3, [r7, #24]
    int16_t ay = (int16_t)ADIS_ReadReg16(0x0412);
 8000592:	f240 4012 	movw	r0, #1042	; 0x412
 8000596:	f7ff ff95 	bl	80004c4 <ADIS_ReadReg16>
 800059a:	4603      	mov	r3, r0
 800059c:	82fb      	strh	r3, [r7, #22]
    int16_t az = (int16_t)ADIS_ReadReg16(0x0414);
 800059e:	f240 4014 	movw	r0, #1044	; 0x414
 80005a2:	f7ff ff8f 	bl	80004c4 <ADIS_ReadReg16>
 80005a6:	4603      	mov	r3, r0
 80005a8:	82bb      	strh	r3, [r7, #20]

    *gyro_x = gx * 0.05f;     // deg/s
 80005aa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80005ae:	ee07 3a90 	vmov	s15, r3
 80005b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005b6:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8000668 <Read_IMU+0x114>
 80005ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	edc3 7a00 	vstr	s15, [r3]
    *gyro_y = gy * 0.05f;
 80005c4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80005c8:	ee07 3a90 	vmov	s15, r3
 80005cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005d0:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8000668 <Read_IMU+0x114>
 80005d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005da:	edc3 7a00 	vstr	s15, [r3]
    *gyro_z = gz * 0.05f;
 80005de:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80005e2:	ee07 3a90 	vmov	s15, r3
 80005e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005ea:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000668 <Read_IMU+0x114>
 80005ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005f4:	edc3 7a00 	vstr	s15, [r3]
    *acc_x = ax * 0.00025f * 9.81f; // m/s²
 80005f8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80005fc:	ee07 3a90 	vmov	s15, r3
 8000600:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000604:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800066c <Read_IMU+0x118>
 8000608:	ee67 7a87 	vmul.f32	s15, s15, s14
 800060c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000670 <Read_IMU+0x11c>
 8000610:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	edc3 7a00 	vstr	s15, [r3]
    *acc_y = ay * 0.00025f * 9.81f;
 800061a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800061e:	ee07 3a90 	vmov	s15, r3
 8000622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000626:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800066c <Read_IMU+0x118>
 800062a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800062e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000670 <Read_IMU+0x11c>
 8000632:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000636:	68bb      	ldr	r3, [r7, #8]
 8000638:	edc3 7a00 	vstr	s15, [r3]
    *acc_z = az * 0.00025f * 9.81f;
 800063c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000640:	ee07 3a90 	vmov	s15, r3
 8000644:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000648:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800066c <Read_IMU+0x118>
 800064c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000650:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000670 <Read_IMU+0x11c>
 8000654:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	edc3 7a00 	vstr	s15, [r3]
}
 800065e:	bf00      	nop
 8000660:	3720      	adds	r7, #32
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	3d4ccccd 	.word	0x3d4ccccd
 800066c:	3983126f 	.word	0x3983126f
 8000670:	411cf5c3 	.word	0x411cf5c3

08000674 <Read_Temperature>:

float Read_Temperature(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
    uint32_t adc_value = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
    float Vsense = 0.0;
 800067e:	f04f 0300 	mov.w	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
    float temperature = 0.0;
 8000684:	f04f 0300 	mov.w	r3, #0
 8000688:	607b      	str	r3, [r7, #4]

    HAL_ADC_Start(&hadc1);
 800068a:	481b      	ldr	r0, [pc, #108]	; (80006f8 <Read_Temperature+0x84>)
 800068c:	f001 f822 	bl	80016d4 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000690:	f04f 31ff 	mov.w	r1, #4294967295
 8000694:	4818      	ldr	r0, [pc, #96]	; (80006f8 <Read_Temperature+0x84>)
 8000696:	f001 f922 	bl	80018de <HAL_ADC_PollForConversion>
    adc_value = HAL_ADC_GetValue(&hadc1);
 800069a:	4817      	ldr	r0, [pc, #92]	; (80006f8 <Read_Temperature+0x84>)
 800069c:	f001 f9aa 	bl	80019f4 <HAL_ADC_GetValue>
 80006a0:	60f8      	str	r0, [r7, #12]
    HAL_ADC_Stop(&hadc1);
 80006a2:	4815      	ldr	r0, [pc, #84]	; (80006f8 <Read_Temperature+0x84>)
 80006a4:	f001 f8e8 	bl	8001878 <HAL_ADC_Stop>

    Vsense = (adc_value * 3.3f) / 4095.0f;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	ee07 3a90 	vmov	s15, r3
 80006ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006b2:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80006fc <Read_Temperature+0x88>
 80006b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80006ba:	eddf 6a11 	vldr	s13, [pc, #68]	; 8000700 <Read_Temperature+0x8c>
 80006be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006c2:	edc7 7a02 	vstr	s15, [r7, #8]
    temperature = ((Vsense - 0.76f) / 0.0025f) + 25.0f;
 80006c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80006ca:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000704 <Read_Temperature+0x90>
 80006ce:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80006d2:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8000708 <Read_Temperature+0x94>
 80006d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006da:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80006de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80006e2:	edc7 7a01 	vstr	s15, [r7, #4]

    return temperature;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	ee07 3a90 	vmov	s15, r3
}
 80006ec:	eeb0 0a67 	vmov.f32	s0, s15
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000098 	.word	0x20000098
 80006fc:	40533333 	.word	0x40533333
 8000700:	457ff000 	.word	0x457ff000
 8000704:	3f428f5c 	.word	0x3f428f5c
 8000708:	3b23d70a 	.word	0x3b23d70a

0800070c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800070c:	b590      	push	{r4, r7, lr}
 800070e:	b091      	sub	sp, #68	; 0x44
 8000710:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000712:	f000 ff05 	bl	8001520 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000716:	f000 f85b 	bl	80007d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071a:	f000 fa75 	bl	8000c08 <MX_GPIO_Init>
  MX_I2C1_Init();
 800071e:	f000 f963 	bl	80009e8 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000722:	f000 f98f 	bl	8000a44 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000726:	f000 f9bd 	bl	8000aa4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800072a:	f00a fa75 	bl	800ac18 <MX_USB_HOST_Init>
  MX_TIM1_Init();
 800072e:	f000 f9ef 	bl	8000b10 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000732:	f000 f8b7 	bl	80008a4 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000736:	f000 f923 	bl	8000980 <MX_CAN1_Init>
  MX_USART2_UART_Init();
 800073a:	f000 fa3b 	bl	8000bb4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  MX_CAN1_Init();
 800073e:	f000 f91f 	bl	8000980 <MX_CAN1_Init>
  HAL_CAN_Start(&hcan1);
 8000742:	4821      	ldr	r0, [pc, #132]	; (80007c8 <main+0xbc>)
 8000744:	f001 fc7d 	bl	8002042 <HAL_CAN_Start>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);  // CS HIGH (boşta)
 8000748:	2201      	movs	r2, #1
 800074a:	2101      	movs	r1, #1
 800074c:	481f      	ldr	r0, [pc, #124]	; (80007cc <main+0xc0>)
 800074e:	f002 f8d7 	bl	8002900 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);  // RST HIGH (aktif)
 8000752:	2201      	movs	r2, #1
 8000754:	2102      	movs	r1, #2
 8000756:	481d      	ldr	r0, [pc, #116]	; (80007cc <main+0xc0>)
 8000758:	f002 f8d2 	bl	8002900 <HAL_GPIO_WritePin>
  TelemetryPacket packet;
  uint32_t last_sent_time = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t seconds = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	633b      	str	r3, [r7, #48]	; 0x30
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000764:	f00a fa7e 	bl	800ac64 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if (seconds != last_sent_time)
 8000768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800076a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800076c:	429a      	cmp	r2, r3
 800076e:	d0f9      	beq.n	8000764 <main+0x58>
    {
        last_sent_time = seconds;
 8000770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000772:	637b      	str	r3, [r7, #52]	; 0x34
        packet.header = 0xDD;
 8000774:	23dd      	movs	r3, #221	; 0xdd
 8000776:	713b      	strb	r3, [r7, #4]
        packet.timestamp = seconds;
 8000778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800077a:	60bb      	str	r3, [r7, #8]
        packet.temp_degC = Read_Temperature();
 800077c:	f7ff ff7a 	bl	8000674 <Read_Temperature>
 8000780:	eef0 7a40 	vmov.f32	s15, s0
 8000784:	edc7 7a03 	vstr	s15, [r7, #12]

        Read_IMU(&packet.acc_x, &packet.acc_y, &packet.acc_z,
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	f103 040c 	add.w	r4, r3, #12
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	f103 0220 	add.w	r2, r3, #32
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	f103 011c 	add.w	r1, r3, #28
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	f103 0018 	add.w	r0, r3, #24
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	3314      	adds	r3, #20
 80007a4:	9301      	str	r3, [sp, #4]
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	3310      	adds	r3, #16
 80007aa:	9300      	str	r3, [sp, #0]
 80007ac:	4623      	mov	r3, r4
 80007ae:	f7ff fed1 	bl	8000554 <Read_IMU>
                &packet.gyro_x, &packet.gyro_y, &packet.gyro_z);

        packet.error_flags = 0x0000; // hata kontrolü eklenecek
 80007b2:	2300      	movs	r3, #0
 80007b4:	853b      	strh	r3, [r7, #40]	; 0x28

        SendTelemetryUART(&packet);
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	4618      	mov	r0, r3
 80007ba:	f000 fe21 	bl	8001400 <SendTelemetryUART>
        SendTelemetryCAN(&packet);
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 fe3f 	bl	8001444 <SendTelemetryCAN>
    MX_USB_HOST_Process();
 80007c6:	e7cd      	b.n	8000764 <main+0x58>
 80007c8:	200000e0 	.word	0x200000e0
 80007cc:	40020400 	.word	0x40020400

080007d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b094      	sub	sp, #80	; 0x50
 80007d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d6:	f107 0320 	add.w	r3, r7, #32
 80007da:	2230      	movs	r2, #48	; 0x30
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f00a fdde 	bl	800b3a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e4:	f107 030c 	add.w	r3, r7, #12
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f4:	2300      	movs	r3, #0
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	4b28      	ldr	r3, [pc, #160]	; (800089c <SystemClock_Config+0xcc>)
 80007fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fc:	4a27      	ldr	r2, [pc, #156]	; (800089c <SystemClock_Config+0xcc>)
 80007fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000802:	6413      	str	r3, [r2, #64]	; 0x40
 8000804:	4b25      	ldr	r3, [pc, #148]	; (800089c <SystemClock_Config+0xcc>)
 8000806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000810:	2300      	movs	r3, #0
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	4b22      	ldr	r3, [pc, #136]	; (80008a0 <SystemClock_Config+0xd0>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a21      	ldr	r2, [pc, #132]	; (80008a0 <SystemClock_Config+0xd0>)
 800081a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800081e:	6013      	str	r3, [r2, #0]
 8000820:	4b1f      	ldr	r3, [pc, #124]	; (80008a0 <SystemClock_Config+0xd0>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800082c:	2301      	movs	r3, #1
 800082e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000830:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000836:	2302      	movs	r3, #2
 8000838:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800083a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800083e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000840:	2308      	movs	r3, #8
 8000842:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000844:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000848:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800084a:	2302      	movs	r3, #2
 800084c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800084e:	2307      	movs	r3, #7
 8000850:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000852:	f107 0320 	add.w	r3, r7, #32
 8000856:	4618      	mov	r0, r3
 8000858:	f004 fa5a 	bl	8004d10 <HAL_RCC_OscConfig>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000862:	f000 fae1 	bl	8000e28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000866:	230f      	movs	r3, #15
 8000868:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800086a:	2302      	movs	r3, #2
 800086c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000872:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000876:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000878:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800087c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800087e:	f107 030c 	add.w	r3, r7, #12
 8000882:	2105      	movs	r1, #5
 8000884:	4618      	mov	r0, r3
 8000886:	f004 fcbb 	bl	8005200 <HAL_RCC_ClockConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000890:	f000 faca 	bl	8000e28 <Error_Handler>
  }
}
 8000894:	bf00      	nop
 8000896:	3750      	adds	r7, #80	; 0x50
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40023800 	.word	0x40023800
 80008a0:	40007000 	.word	0x40007000

080008a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008aa:	463b      	mov	r3, r7
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008b6:	4b2f      	ldr	r3, [pc, #188]	; (8000974 <MX_ADC1_Init+0xd0>)
 80008b8:	4a2f      	ldr	r2, [pc, #188]	; (8000978 <MX_ADC1_Init+0xd4>)
 80008ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008bc:	4b2d      	ldr	r3, [pc, #180]	; (8000974 <MX_ADC1_Init+0xd0>)
 80008be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008c4:	4b2b      	ldr	r3, [pc, #172]	; (8000974 <MX_ADC1_Init+0xd0>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80008ca:	4b2a      	ldr	r3, [pc, #168]	; (8000974 <MX_ADC1_Init+0xd0>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008d0:	4b28      	ldr	r3, [pc, #160]	; (8000974 <MX_ADC1_Init+0xd0>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008d6:	4b27      	ldr	r3, [pc, #156]	; (8000974 <MX_ADC1_Init+0xd0>)
 80008d8:	2200      	movs	r2, #0
 80008da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008de:	4b25      	ldr	r3, [pc, #148]	; (8000974 <MX_ADC1_Init+0xd0>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008e4:	4b23      	ldr	r3, [pc, #140]	; (8000974 <MX_ADC1_Init+0xd0>)
 80008e6:	4a25      	ldr	r2, [pc, #148]	; (800097c <MX_ADC1_Init+0xd8>)
 80008e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ea:	4b22      	ldr	r3, [pc, #136]	; (8000974 <MX_ADC1_Init+0xd0>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80008f0:	4b20      	ldr	r3, [pc, #128]	; (8000974 <MX_ADC1_Init+0xd0>)
 80008f2:	2203      	movs	r2, #3
 80008f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008f6:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <MX_ADC1_Init+0xd0>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008fe:	4b1d      	ldr	r3, [pc, #116]	; (8000974 <MX_ADC1_Init+0xd0>)
 8000900:	2201      	movs	r2, #1
 8000902:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000904:	481b      	ldr	r0, [pc, #108]	; (8000974 <MX_ADC1_Init+0xd0>)
 8000906:	f000 fea1 	bl	800164c <HAL_ADC_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000910:	f000 fa8a 	bl	8000e28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000914:	2310      	movs	r3, #16
 8000916:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000918:	2301      	movs	r3, #1
 800091a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800091c:	2300      	movs	r3, #0
 800091e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000920:	463b      	mov	r3, r7
 8000922:	4619      	mov	r1, r3
 8000924:	4813      	ldr	r0, [pc, #76]	; (8000974 <MX_ADC1_Init+0xd0>)
 8000926:	f001 f873 	bl	8001a10 <HAL_ADC_ConfigChannel>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000930:	f000 fa7a 	bl	8000e28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 8000934:	2302      	movs	r3, #2
 8000936:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000938:	2303      	movs	r3, #3
 800093a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800093c:	463b      	mov	r3, r7
 800093e:	4619      	mov	r1, r3
 8000940:	480c      	ldr	r0, [pc, #48]	; (8000974 <MX_ADC1_Init+0xd0>)
 8000942:	f001 f865 	bl	8001a10 <HAL_ADC_ConfigChannel>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800094c:	f000 fa6c 	bl	8000e28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 8000950:	2303      	movs	r3, #3
 8000952:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000954:	2300      	movs	r3, #0
 8000956:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000958:	463b      	mov	r3, r7
 800095a:	4619      	mov	r1, r3
 800095c:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_ADC1_Init+0xd0>)
 800095e:	f001 f857 	bl	8001a10 <HAL_ADC_ConfigChannel>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000968:	f000 fa5e 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	3710      	adds	r7, #16
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000098 	.word	0x20000098
 8000978:	40012000 	.word	0x40012000
 800097c:	0f000001 	.word	0x0f000001

08000980 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000984:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <MX_CAN1_Init+0x60>)
 8000986:	4a17      	ldr	r2, [pc, #92]	; (80009e4 <MX_CAN1_Init+0x64>)
 8000988:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800098a:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <MX_CAN1_Init+0x60>)
 800098c:	2210      	movs	r2, #16
 800098e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000990:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <MX_CAN1_Init+0x60>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000996:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <MX_CAN1_Init+0x60>)
 8000998:	2200      	movs	r2, #0
 800099a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800099c:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <MX_CAN1_Init+0x60>)
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80009a2:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_CAN1_Init+0x60>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80009a8:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <MX_CAN1_Init+0x60>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_CAN1_Init+0x60>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80009b4:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <MX_CAN1_Init+0x60>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_CAN1_Init+0x60>)
 80009bc:	2200      	movs	r2, #0
 80009be:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80009c0:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <MX_CAN1_Init+0x60>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_CAN1_Init+0x60>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80009cc:	4804      	ldr	r0, [pc, #16]	; (80009e0 <MX_CAN1_Init+0x60>)
 80009ce:	f001 fa3d 	bl	8001e4c <HAL_CAN_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80009d8:	f000 fa26 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	200000e0 	.word	0x200000e0
 80009e4:	40006400 	.word	0x40006400

080009e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009ec:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <MX_I2C1_Init+0x50>)
 80009ee:	4a13      	ldr	r2, [pc, #76]	; (8000a3c <MX_I2C1_Init+0x54>)
 80009f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <MX_I2C1_Init+0x50>)
 80009f4:	4a12      	ldr	r2, [pc, #72]	; (8000a40 <MX_I2C1_Init+0x58>)
 80009f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <MX_I2C1_Init+0x50>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a0a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a0c:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a18:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a24:	4804      	ldr	r0, [pc, #16]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a26:	f003 fb8f 	bl	8004148 <HAL_I2C_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a30:	f000 f9fa 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000108 	.word	0x20000108
 8000a3c:	40005400 	.word	0x40005400
 8000a40:	000186a0 	.word	0x000186a0

08000a44 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000a48:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <MX_I2S3_Init+0x54>)
 8000a4a:	4a14      	ldr	r2, [pc, #80]	; (8000a9c <MX_I2S3_Init+0x58>)
 8000a4c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000a4e:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <MX_I2S3_Init+0x54>)
 8000a50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a54:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000a56:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <MX_I2S3_Init+0x54>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000a5c:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_I2S3_Init+0x54>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000a62:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <MX_I2S3_Init+0x54>)
 8000a64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a68:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <MX_I2S3_Init+0x54>)
 8000a6c:	4a0c      	ldr	r2, [pc, #48]	; (8000aa0 <MX_I2S3_Init+0x5c>)
 8000a6e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_I2S3_Init+0x54>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <MX_I2S3_Init+0x54>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_I2S3_Init+0x54>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_I2S3_Init+0x54>)
 8000a84:	f003 fca4 	bl	80043d0 <HAL_I2S_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000a8e:	f000 f9cb 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	2000015c 	.word	0x2000015c
 8000a9c:	40003c00 	.word	0x40003c00
 8000aa0:	00017700 	.word	0x00017700

08000aa4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000aa8:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <MX_SPI1_Init+0x64>)
 8000aaa:	4a18      	ldr	r2, [pc, #96]	; (8000b0c <MX_SPI1_Init+0x68>)
 8000aac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aae:	4b16      	ldr	r3, [pc, #88]	; (8000b08 <MX_SPI1_Init+0x64>)
 8000ab0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ab4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ab6:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <MX_SPI1_Init+0x64>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <MX_SPI1_Init+0x64>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_SPI1_Init+0x64>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <MX_SPI1_Init+0x64>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <MX_SPI1_Init+0x64>)
 8000ad0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ad4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <MX_SPI1_Init+0x64>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000adc:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <MX_SPI1_Init+0x64>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <MX_SPI1_Init+0x64>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ae8:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <MX_SPI1_Init+0x64>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <MX_SPI1_Init+0x64>)
 8000af0:	220a      	movs	r2, #10
 8000af2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000af4:	4804      	ldr	r0, [pc, #16]	; (8000b08 <MX_SPI1_Init+0x64>)
 8000af6:	f004 fee3 	bl	80058c0 <HAL_SPI_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b00:	f000 f992 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	200001a4 	.word	0x200001a4
 8000b0c:	40013000 	.word	0x40013000

08000b10 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b16:	f107 0308 	add.w	r3, r7, #8
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]
 8000b22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b24:	463b      	mov	r3, r7
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b2c:	4b1f      	ldr	r3, [pc, #124]	; (8000bac <MX_TIM1_Init+0x9c>)
 8000b2e:	4a20      	ldr	r2, [pc, #128]	; (8000bb0 <MX_TIM1_Init+0xa0>)
 8000b30:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16800-1;
 8000b32:	4b1e      	ldr	r3, [pc, #120]	; (8000bac <MX_TIM1_Init+0x9c>)
 8000b34:	f244 129f 	movw	r2, #16799	; 0x419f
 8000b38:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b3a:	4b1c      	ldr	r3, [pc, #112]	; (8000bac <MX_TIM1_Init+0x9c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8000b40:	4b1a      	ldr	r3, [pc, #104]	; (8000bac <MX_TIM1_Init+0x9c>)
 8000b42:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b46:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b48:	4b18      	ldr	r3, [pc, #96]	; (8000bac <MX_TIM1_Init+0x9c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b4e:	4b17      	ldr	r3, [pc, #92]	; (8000bac <MX_TIM1_Init+0x9c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b54:	4b15      	ldr	r3, [pc, #84]	; (8000bac <MX_TIM1_Init+0x9c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b5a:	4814      	ldr	r0, [pc, #80]	; (8000bac <MX_TIM1_Init+0x9c>)
 8000b5c:	f005 fc58 	bl	8006410 <HAL_TIM_Base_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000b66:	f000 f95f 	bl	8000e28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b70:	f107 0308 	add.w	r3, r7, #8
 8000b74:	4619      	mov	r1, r3
 8000b76:	480d      	ldr	r0, [pc, #52]	; (8000bac <MX_TIM1_Init+0x9c>)
 8000b78:	f005 fda1 	bl	80066be <HAL_TIM_ConfigClockSource>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000b82:	f000 f951 	bl	8000e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b86:	2300      	movs	r3, #0
 8000b88:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b8e:	463b      	mov	r3, r7
 8000b90:	4619      	mov	r1, r3
 8000b92:	4806      	ldr	r0, [pc, #24]	; (8000bac <MX_TIM1_Init+0x9c>)
 8000b94:	f005 ffc6 	bl	8006b24 <HAL_TIMEx_MasterConfigSynchronization>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000b9e:	f000 f943 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ba2:	bf00      	nop
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	200001fc 	.word	0x200001fc
 8000bb0:	40010000 	.word	0x40010000

08000bb4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bb8:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <MX_USART2_UART_Init+0x4c>)
 8000bba:	4a12      	ldr	r2, [pc, #72]	; (8000c04 <MX_USART2_UART_Init+0x50>)
 8000bbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bbe:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <MX_USART2_UART_Init+0x4c>)
 8000bc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <MX_USART2_UART_Init+0x4c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <MX_USART2_UART_Init+0x4c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bd2:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <MX_USART2_UART_Init+0x4c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bd8:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <MX_USART2_UART_Init+0x4c>)
 8000bda:	220c      	movs	r2, #12
 8000bdc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bde:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <MX_USART2_UART_Init+0x4c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <MX_USART2_UART_Init+0x4c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bea:	4805      	ldr	r0, [pc, #20]	; (8000c00 <MX_USART2_UART_Init+0x4c>)
 8000bec:	f006 f82a 	bl	8006c44 <HAL_UART_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bf6:	f000 f917 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000244 	.word	0x20000244
 8000c04:	40004400 	.word	0x40004400

08000c08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08c      	sub	sp, #48	; 0x30
 8000c0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0e:	f107 031c 	add.w	r3, r7, #28
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
 8000c1c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61bb      	str	r3, [r7, #24]
 8000c22:	4b7b      	ldr	r3, [pc, #492]	; (8000e10 <MX_GPIO_Init+0x208>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a7a      	ldr	r2, [pc, #488]	; (8000e10 <MX_GPIO_Init+0x208>)
 8000c28:	f043 0310 	orr.w	r3, r3, #16
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b78      	ldr	r3, [pc, #480]	; (8000e10 <MX_GPIO_Init+0x208>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0310 	and.w	r3, r3, #16
 8000c36:	61bb      	str	r3, [r7, #24]
 8000c38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
 8000c3e:	4b74      	ldr	r3, [pc, #464]	; (8000e10 <MX_GPIO_Init+0x208>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a73      	ldr	r2, [pc, #460]	; (8000e10 <MX_GPIO_Init+0x208>)
 8000c44:	f043 0304 	orr.w	r3, r3, #4
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b71      	ldr	r3, [pc, #452]	; (8000e10 <MX_GPIO_Init+0x208>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0304 	and.w	r3, r3, #4
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	4b6d      	ldr	r3, [pc, #436]	; (8000e10 <MX_GPIO_Init+0x208>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a6c      	ldr	r2, [pc, #432]	; (8000e10 <MX_GPIO_Init+0x208>)
 8000c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b6a      	ldr	r3, [pc, #424]	; (8000e10 <MX_GPIO_Init+0x208>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	4b66      	ldr	r3, [pc, #408]	; (8000e10 <MX_GPIO_Init+0x208>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a65      	ldr	r2, [pc, #404]	; (8000e10 <MX_GPIO_Init+0x208>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b63      	ldr	r3, [pc, #396]	; (8000e10 <MX_GPIO_Init+0x208>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60bb      	str	r3, [r7, #8]
 8000c92:	4b5f      	ldr	r3, [pc, #380]	; (8000e10 <MX_GPIO_Init+0x208>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a5e      	ldr	r2, [pc, #376]	; (8000e10 <MX_GPIO_Init+0x208>)
 8000c98:	f043 0302 	orr.w	r3, r3, #2
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b5c      	ldr	r3, [pc, #368]	; (8000e10 <MX_GPIO_Init+0x208>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0302 	and.w	r3, r3, #2
 8000ca6:	60bb      	str	r3, [r7, #8]
 8000ca8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	4b58      	ldr	r3, [pc, #352]	; (8000e10 <MX_GPIO_Init+0x208>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a57      	ldr	r2, [pc, #348]	; (8000e10 <MX_GPIO_Init+0x208>)
 8000cb4:	f043 0308 	orr.w	r3, r3, #8
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b55      	ldr	r3, [pc, #340]	; (8000e10 <MX_GPIO_Init+0x208>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f003 0308 	and.w	r3, r3, #8
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2108      	movs	r1, #8
 8000cca:	4852      	ldr	r0, [pc, #328]	; (8000e14 <MX_GPIO_Init+0x20c>)
 8000ccc:	f001 fe18 	bl	8002900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	4850      	ldr	r0, [pc, #320]	; (8000e18 <MX_GPIO_Init+0x210>)
 8000cd6:	f001 fe13 	bl	8002900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2103      	movs	r1, #3
 8000cde:	484f      	ldr	r0, [pc, #316]	; (8000e1c <MX_GPIO_Init+0x214>)
 8000ce0:	f001 fe0e 	bl	8002900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000cea:	484d      	ldr	r0, [pc, #308]	; (8000e20 <MX_GPIO_Init+0x218>)
 8000cec:	f001 fe08 	bl	8002900 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000cf0:	2308      	movs	r3, #8
 8000cf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000d00:	f107 031c 	add.w	r3, r7, #28
 8000d04:	4619      	mov	r1, r3
 8000d06:	4843      	ldr	r0, [pc, #268]	; (8000e14 <MX_GPIO_Init+0x20c>)
 8000d08:	f001 fc5e 	bl	80025c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d10:	2301      	movs	r3, #1
 8000d12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d1c:	f107 031c 	add.w	r3, r7, #28
 8000d20:	4619      	mov	r1, r3
 8000d22:	483d      	ldr	r0, [pc, #244]	; (8000e18 <MX_GPIO_Init+0x210>)
 8000d24:	f001 fc50 	bl	80025c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000d28:	2308      	movs	r3, #8
 8000d2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2300      	movs	r3, #0
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d38:	2305      	movs	r3, #5
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d3c:	f107 031c 	add.w	r3, r7, #28
 8000d40:	4619      	mov	r1, r3
 8000d42:	4835      	ldr	r0, [pc, #212]	; (8000e18 <MX_GPIO_Init+0x210>)
 8000d44:	f001 fc40 	bl	80025c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d4c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d56:	f107 031c 	add.w	r3, r7, #28
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4831      	ldr	r0, [pc, #196]	; (8000e24 <MX_GPIO_Init+0x21c>)
 8000d5e:	f001 fc33 	bl	80025c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d62:	2303      	movs	r3, #3
 8000d64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d66:	2301      	movs	r3, #1
 8000d68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d72:	f107 031c 	add.w	r3, r7, #28
 8000d76:	4619      	mov	r1, r3
 8000d78:	4828      	ldr	r0, [pc, #160]	; (8000e1c <MX_GPIO_Init+0x214>)
 8000d7a:	f001 fc25 	bl	80025c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d7e:	2304      	movs	r3, #4
 8000d80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d82:	2300      	movs	r3, #0
 8000d84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d8a:	f107 031c 	add.w	r3, r7, #28
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4822      	ldr	r0, [pc, #136]	; (8000e1c <MX_GPIO_Init+0x214>)
 8000d92:	f001 fc19 	bl	80025c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000d96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da4:	2300      	movs	r3, #0
 8000da6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000da8:	2305      	movs	r3, #5
 8000daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000dac:	f107 031c 	add.w	r3, r7, #28
 8000db0:	4619      	mov	r1, r3
 8000db2:	481a      	ldr	r0, [pc, #104]	; (8000e1c <MX_GPIO_Init+0x214>)
 8000db4:	f001 fc08 	bl	80025c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000db8:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000dbc:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dca:	f107 031c 	add.w	r3, r7, #28
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4813      	ldr	r0, [pc, #76]	; (8000e20 <MX_GPIO_Init+0x218>)
 8000dd2:	f001 fbf9 	bl	80025c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000dd6:	2320      	movs	r3, #32
 8000dd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000de2:	f107 031c 	add.w	r3, r7, #28
 8000de6:	4619      	mov	r1, r3
 8000de8:	480d      	ldr	r0, [pc, #52]	; (8000e20 <MX_GPIO_Init+0x218>)
 8000dea:	f001 fbed 	bl	80025c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000dee:	2302      	movs	r3, #2
 8000df0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000df2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000df6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000dfc:	f107 031c 	add.w	r3, r7, #28
 8000e00:	4619      	mov	r1, r3
 8000e02:	4804      	ldr	r0, [pc, #16]	; (8000e14 <MX_GPIO_Init+0x20c>)
 8000e04:	f001 fbe0 	bl	80025c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e08:	bf00      	nop
 8000e0a:	3730      	adds	r7, #48	; 0x30
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40021000 	.word	0x40021000
 8000e18:	40020800 	.word	0x40020800
 8000e1c:	40020400 	.word	0x40020400
 8000e20:	40020c00 	.word	0x40020c00
 8000e24:	40020000 	.word	0x40020000

08000e28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e2c:	b672      	cpsid	i
}
 8000e2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <Error_Handler+0x8>
	...

08000e34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	607b      	str	r3, [r7, #4]
 8000e3e:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <HAL_MspInit+0x4c>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e42:	4a0f      	ldr	r2, [pc, #60]	; (8000e80 <HAL_MspInit+0x4c>)
 8000e44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e48:	6453      	str	r3, [r2, #68]	; 0x44
 8000e4a:	4b0d      	ldr	r3, [pc, #52]	; (8000e80 <HAL_MspInit+0x4c>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	603b      	str	r3, [r7, #0]
 8000e5a:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <HAL_MspInit+0x4c>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	4a08      	ldr	r2, [pc, #32]	; (8000e80 <HAL_MspInit+0x4c>)
 8000e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e64:	6413      	str	r3, [r2, #64]	; 0x40
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_MspInit+0x4c>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6e:	603b      	str	r3, [r7, #0]
 8000e70:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e72:	2007      	movs	r0, #7
 8000e74:	f001 fad4 	bl	8002420 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40023800 	.word	0x40023800

08000e84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a0b      	ldr	r2, [pc, #44]	; (8000ec0 <HAL_ADC_MspInit+0x3c>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d10d      	bne.n	8000eb2 <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <HAL_ADC_MspInit+0x40>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	4a09      	ldr	r2, [pc, #36]	; (8000ec4 <HAL_ADC_MspInit+0x40>)
 8000ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea6:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <HAL_ADC_MspInit+0x40>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000eb2:	bf00      	nop
 8000eb4:	3714      	adds	r7, #20
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	40012000 	.word	0x40012000
 8000ec4:	40023800 	.word	0x40023800

08000ec8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08a      	sub	sp, #40	; 0x28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a19      	ldr	r2, [pc, #100]	; (8000f4c <HAL_CAN_MspInit+0x84>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d12b      	bne.n	8000f42 <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]
 8000eee:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <HAL_CAN_MspInit+0x88>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	4a17      	ldr	r2, [pc, #92]	; (8000f50 <HAL_CAN_MspInit+0x88>)
 8000ef4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8000efa:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <HAL_CAN_MspInit+0x88>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <HAL_CAN_MspInit+0x88>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a10      	ldr	r2, [pc, #64]	; (8000f50 <HAL_CAN_MspInit+0x88>)
 8000f10:	f043 0308 	orr.w	r3, r3, #8
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <HAL_CAN_MspInit+0x88>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0308 	and.w	r3, r3, #8
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f22:	2303      	movs	r3, #3
 8000f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	2302      	movs	r3, #2
 8000f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f32:	2309      	movs	r3, #9
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f36:	f107 0314 	add.w	r3, r7, #20
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4805      	ldr	r0, [pc, #20]	; (8000f54 <HAL_CAN_MspInit+0x8c>)
 8000f3e:	f001 fb43 	bl	80025c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000f42:	bf00      	nop
 8000f44:	3728      	adds	r7, #40	; 0x28
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40006400 	.word	0x40006400
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40020c00 	.word	0x40020c00

08000f58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08a      	sub	sp, #40	; 0x28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a19      	ldr	r2, [pc, #100]	; (8000fdc <HAL_I2C_MspInit+0x84>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d12c      	bne.n	8000fd4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	4b18      	ldr	r3, [pc, #96]	; (8000fe0 <HAL_I2C_MspInit+0x88>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a17      	ldr	r2, [pc, #92]	; (8000fe0 <HAL_I2C_MspInit+0x88>)
 8000f84:	f043 0302 	orr.w	r3, r3, #2
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <HAL_I2C_MspInit+0x88>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000f96:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f9c:	2312      	movs	r3, #18
 8000f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fa8:	2304      	movs	r3, #4
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	480c      	ldr	r0, [pc, #48]	; (8000fe4 <HAL_I2C_MspInit+0x8c>)
 8000fb4:	f001 fb08 	bl	80025c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <HAL_I2C_MspInit+0x88>)
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc0:	4a07      	ldr	r2, [pc, #28]	; (8000fe0 <HAL_I2C_MspInit+0x88>)
 8000fc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <HAL_I2C_MspInit+0x88>)
 8000fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fd4:	bf00      	nop
 8000fd6:	3728      	adds	r7, #40	; 0x28
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40005400 	.word	0x40005400
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40020400 	.word	0x40020400

08000fe8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08e      	sub	sp, #56	; 0x38
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a31      	ldr	r2, [pc, #196]	; (80010d8 <HAL_I2S_MspInit+0xf0>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d15a      	bne.n	80010ce <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001018:	2301      	movs	r3, #1
 800101a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800101c:	23c0      	movs	r3, #192	; 0xc0
 800101e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001020:	2302      	movs	r3, #2
 8001022:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	4618      	mov	r0, r3
 800102a:	f004 fb09 	bl	8005640 <HAL_RCCEx_PeriphCLKConfig>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001034:	f7ff fef8 	bl	8000e28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001038:	2300      	movs	r3, #0
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	4b27      	ldr	r3, [pc, #156]	; (80010dc <HAL_I2S_MspInit+0xf4>)
 800103e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001040:	4a26      	ldr	r2, [pc, #152]	; (80010dc <HAL_I2S_MspInit+0xf4>)
 8001042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001046:	6413      	str	r3, [r2, #64]	; 0x40
 8001048:	4b24      	ldr	r3, [pc, #144]	; (80010dc <HAL_I2S_MspInit+0xf4>)
 800104a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001054:	2300      	movs	r3, #0
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	4b20      	ldr	r3, [pc, #128]	; (80010dc <HAL_I2S_MspInit+0xf4>)
 800105a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105c:	4a1f      	ldr	r2, [pc, #124]	; (80010dc <HAL_I2S_MspInit+0xf4>)
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	6313      	str	r3, [r2, #48]	; 0x30
 8001064:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <HAL_I2S_MspInit+0xf4>)
 8001066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001068:	f003 0301 	and.w	r3, r3, #1
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001070:	2300      	movs	r3, #0
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	4b19      	ldr	r3, [pc, #100]	; (80010dc <HAL_I2S_MspInit+0xf4>)
 8001076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001078:	4a18      	ldr	r2, [pc, #96]	; (80010dc <HAL_I2S_MspInit+0xf4>)
 800107a:	f043 0304 	orr.w	r3, r3, #4
 800107e:	6313      	str	r3, [r2, #48]	; 0x30
 8001080:	4b16      	ldr	r3, [pc, #88]	; (80010dc <HAL_I2S_MspInit+0xf4>)
 8001082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001084:	f003 0304 	and.w	r3, r3, #4
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800108c:	2310      	movs	r3, #16
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001090:	2302      	movs	r3, #2
 8001092:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001098:	2300      	movs	r3, #0
 800109a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800109c:	2306      	movs	r3, #6
 800109e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80010a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a4:	4619      	mov	r1, r3
 80010a6:	480e      	ldr	r0, [pc, #56]	; (80010e0 <HAL_I2S_MspInit+0xf8>)
 80010a8:	f001 fa8e 	bl	80025c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80010ac:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2300      	movs	r3, #0
 80010bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010be:	2306      	movs	r3, #6
 80010c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c6:	4619      	mov	r1, r3
 80010c8:	4806      	ldr	r0, [pc, #24]	; (80010e4 <HAL_I2S_MspInit+0xfc>)
 80010ca:	f001 fa7d 	bl	80025c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80010ce:	bf00      	nop
 80010d0:	3738      	adds	r7, #56	; 0x38
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40003c00 	.word	0x40003c00
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40020000 	.word	0x40020000
 80010e4:	40020800 	.word	0x40020800

080010e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	; 0x28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a19      	ldr	r2, [pc, #100]	; (800116c <HAL_SPI_MspInit+0x84>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d12b      	bne.n	8001162 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	4b18      	ldr	r3, [pc, #96]	; (8001170 <HAL_SPI_MspInit+0x88>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	4a17      	ldr	r2, [pc, #92]	; (8001170 <HAL_SPI_MspInit+0x88>)
 8001114:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001118:	6453      	str	r3, [r2, #68]	; 0x44
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <HAL_SPI_MspInit+0x88>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	4b11      	ldr	r3, [pc, #68]	; (8001170 <HAL_SPI_MspInit+0x88>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a10      	ldr	r2, [pc, #64]	; (8001170 <HAL_SPI_MspInit+0x88>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <HAL_SPI_MspInit+0x88>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001142:	23e0      	movs	r3, #224	; 0xe0
 8001144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001146:	2302      	movs	r3, #2
 8001148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001152:	2305      	movs	r3, #5
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	4619      	mov	r1, r3
 800115c:	4805      	ldr	r0, [pc, #20]	; (8001174 <HAL_SPI_MspInit+0x8c>)
 800115e:	f001 fa33 	bl	80025c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001162:	bf00      	nop
 8001164:	3728      	adds	r7, #40	; 0x28
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40013000 	.word	0x40013000
 8001170:	40023800 	.word	0x40023800
 8001174:	40020000 	.word	0x40020000

08001178 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a0e      	ldr	r2, [pc, #56]	; (80011c0 <HAL_TIM_Base_MspInit+0x48>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d115      	bne.n	80011b6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <HAL_TIM_Base_MspInit+0x4c>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	4a0c      	ldr	r2, [pc, #48]	; (80011c4 <HAL_TIM_Base_MspInit+0x4c>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6453      	str	r3, [r2, #68]	; 0x44
 800119a:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <HAL_TIM_Base_MspInit+0x4c>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2100      	movs	r1, #0
 80011aa:	201b      	movs	r0, #27
 80011ac:	f001 f943 	bl	8002436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80011b0:	201b      	movs	r0, #27
 80011b2:	f001 f95c 	bl	800246e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40010000 	.word	0x40010000
 80011c4:	40023800 	.word	0x40023800

080011c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	; 0x28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a1d      	ldr	r2, [pc, #116]	; (800125c <HAL_UART_MspInit+0x94>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d133      	bne.n	8001252 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	4b1c      	ldr	r3, [pc, #112]	; (8001260 <HAL_UART_MspInit+0x98>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	4a1b      	ldr	r2, [pc, #108]	; (8001260 <HAL_UART_MspInit+0x98>)
 80011f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f8:	6413      	str	r3, [r2, #64]	; 0x40
 80011fa:	4b19      	ldr	r3, [pc, #100]	; (8001260 <HAL_UART_MspInit+0x98>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	4b15      	ldr	r3, [pc, #84]	; (8001260 <HAL_UART_MspInit+0x98>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a14      	ldr	r2, [pc, #80]	; (8001260 <HAL_UART_MspInit+0x98>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b12      	ldr	r3, [pc, #72]	; (8001260 <HAL_UART_MspInit+0x98>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001222:	230c      	movs	r3, #12
 8001224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122e:	2303      	movs	r3, #3
 8001230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001232:	2307      	movs	r3, #7
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	4619      	mov	r1, r3
 800123c:	4809      	ldr	r0, [pc, #36]	; (8001264 <HAL_UART_MspInit+0x9c>)
 800123e:	f001 f9c3 	bl	80025c8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	2100      	movs	r1, #0
 8001246:	2026      	movs	r0, #38	; 0x26
 8001248:	f001 f8f5 	bl	8002436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800124c:	2026      	movs	r0, #38	; 0x26
 800124e:	f001 f90e 	bl	800246e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001252:	bf00      	nop
 8001254:	3728      	adds	r7, #40	; 0x28
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40004400 	.word	0x40004400
 8001260:	40023800 	.word	0x40023800
 8001264:	40020000 	.word	0x40020000

08001268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800126c:	e7fe      	b.n	800126c <NMI_Handler+0x4>

0800126e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001272:	e7fe      	b.n	8001272 <HardFault_Handler+0x4>

08001274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001278:	e7fe      	b.n	8001278 <MemManage_Handler+0x4>

0800127a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800127e:	e7fe      	b.n	800127e <BusFault_Handler+0x4>

08001280 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001284:	e7fe      	b.n	8001284 <UsageFault_Handler+0x4>

08001286 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b4:	f000 f986 	bl	80015c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}

080012bc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012c0:	4802      	ldr	r0, [pc, #8]	; (80012cc <TIM1_CC_IRQHandler+0x10>)
 80012c2:	f005 f8f4 	bl	80064ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200001fc 	.word	0x200001fc

080012d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012d4:	4802      	ldr	r0, [pc, #8]	; (80012e0 <USART2_IRQHandler+0x10>)
 80012d6:	f005 fd95 	bl	8006e04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000244 	.word	0x20000244

080012e4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80012e8:	4802      	ldr	r0, [pc, #8]	; (80012f4 <OTG_FS_IRQHandler+0x10>)
 80012ea:	f001 fd8d 	bl	8002e08 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	2000066c 	.word	0x2000066c

080012f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001300:	4a14      	ldr	r2, [pc, #80]	; (8001354 <_sbrk+0x5c>)
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <_sbrk+0x60>)
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800130c:	4b13      	ldr	r3, [pc, #76]	; (800135c <_sbrk+0x64>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d102      	bne.n	800131a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001314:	4b11      	ldr	r3, [pc, #68]	; (800135c <_sbrk+0x64>)
 8001316:	4a12      	ldr	r2, [pc, #72]	; (8001360 <_sbrk+0x68>)
 8001318:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <_sbrk+0x64>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4413      	add	r3, r2
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	429a      	cmp	r2, r3
 8001326:	d207      	bcs.n	8001338 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001328:	f00a f852 	bl	800b3d0 <__errno>
 800132c:	4603      	mov	r3, r0
 800132e:	220c      	movs	r2, #12
 8001330:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001332:	f04f 33ff 	mov.w	r3, #4294967295
 8001336:	e009      	b.n	800134c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001338:	4b08      	ldr	r3, [pc, #32]	; (800135c <_sbrk+0x64>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800133e:	4b07      	ldr	r3, [pc, #28]	; (800135c <_sbrk+0x64>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4413      	add	r3, r2
 8001346:	4a05      	ldr	r2, [pc, #20]	; (800135c <_sbrk+0x64>)
 8001348:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800134a:	68fb      	ldr	r3, [r7, #12]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3718      	adds	r7, #24
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20020000 	.word	0x20020000
 8001358:	00000400 	.word	0x00000400
 800135c:	20000288 	.word	0x20000288
 8001360:	20000ab8 	.word	0x20000ab8

08001364 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <SystemInit+0x20>)
 800136a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800136e:	4a05      	ldr	r2, [pc, #20]	; (8001384 <SystemInit+0x20>)
 8001370:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001374:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <Calculate_CRC>:
 */
#include "telemetry.h"
#include "main.h"   // huart2 ve hcan1 tanımları için

uint16_t Calculate_CRC(uint8_t *data, uint16_t len)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF;
 8001394:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001398:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < len; i++)
 800139a:	2300      	movs	r3, #0
 800139c:	81bb      	strh	r3, [r7, #12]
 800139e:	e022      	b.n	80013e6 <Calculate_CRC+0x5e>
    {
        crc ^= data[i];
 80013a0:	89bb      	ldrh	r3, [r7, #12]
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	4413      	add	r3, r2
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	89fb      	ldrh	r3, [r7, #14]
 80013ac:	4053      	eors	r3, r2
 80013ae:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++)
 80013b0:	2300      	movs	r3, #0
 80013b2:	72fb      	strb	r3, [r7, #11]
 80013b4:	e011      	b.n	80013da <Calculate_CRC+0x52>
        {
            if (crc & 1)
 80013b6:	89fb      	ldrh	r3, [r7, #14]
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d006      	beq.n	80013ce <Calculate_CRC+0x46>
                crc = (crc >> 1) ^ 0xA001;
 80013c0:	89fb      	ldrh	r3, [r7, #14]
 80013c2:	085b      	lsrs	r3, r3, #1
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	4b0d      	ldr	r3, [pc, #52]	; (80013fc <Calculate_CRC+0x74>)
 80013c8:	4053      	eors	r3, r2
 80013ca:	81fb      	strh	r3, [r7, #14]
 80013cc:	e002      	b.n	80013d4 <Calculate_CRC+0x4c>
            else
                crc >>= 1;
 80013ce:	89fb      	ldrh	r3, [r7, #14]
 80013d0:	085b      	lsrs	r3, r3, #1
 80013d2:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++)
 80013d4:	7afb      	ldrb	r3, [r7, #11]
 80013d6:	3301      	adds	r3, #1
 80013d8:	72fb      	strb	r3, [r7, #11]
 80013da:	7afb      	ldrb	r3, [r7, #11]
 80013dc:	2b07      	cmp	r3, #7
 80013de:	d9ea      	bls.n	80013b6 <Calculate_CRC+0x2e>
    for (uint16_t i = 0; i < len; i++)
 80013e0:	89bb      	ldrh	r3, [r7, #12]
 80013e2:	3301      	adds	r3, #1
 80013e4:	81bb      	strh	r3, [r7, #12]
 80013e6:	89ba      	ldrh	r2, [r7, #12]
 80013e8:	887b      	ldrh	r3, [r7, #2]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d3d8      	bcc.n	80013a0 <Calculate_CRC+0x18>
        }
    }
    return crc;
 80013ee:	89fb      	ldrh	r3, [r7, #14]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	ffffa001 	.word	0xffffa001

08001400 <SendTelemetryUART>:

void SendTelemetryUART(TelemetryPacket *packet)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
    packet->port_id = 0x01;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    packet->crc16 = 0; // Önce sıfırla CRC alanını
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	851a      	strh	r2, [r3, #40]	; 0x28

    uint8_t *ptr = (uint8_t *)packet;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	60fb      	str	r3, [r7, #12]
    packet->crc16 = Calculate_CRC(ptr, sizeof(TelemetryPacket) - 2);
 800141a:	212a      	movs	r1, #42	; 0x2a
 800141c:	68f8      	ldr	r0, [r7, #12]
 800141e:	f7ff ffb3 	bl	8001388 <Calculate_CRC>
 8001422:	4603      	mov	r3, r0
 8001424:	461a      	mov	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	851a      	strh	r2, [r3, #40]	; 0x28

    HAL_UART_Transmit(&huart2, ptr, sizeof(TelemetryPacket), HAL_MAX_DELAY);
 800142a:	f04f 33ff 	mov.w	r3, #4294967295
 800142e:	222c      	movs	r2, #44	; 0x2c
 8001430:	68f9      	ldr	r1, [r7, #12]
 8001432:	4803      	ldr	r0, [pc, #12]	; (8001440 <SendTelemetryUART+0x40>)
 8001434:	f005 fc53 	bl	8006cde <HAL_UART_Transmit>
}
 8001438:	bf00      	nop
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000244 	.word	0x20000244

08001444 <SendTelemetryCAN>:

void SendTelemetryCAN(TelemetryPacket *packet)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08c      	sub	sp, #48	; 0x30
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
    packet->port_id = 0x02;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2202      	movs	r2, #2
 8001450:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    packet->crc16 = 0; // Önce sıfırla CRC alanını
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	851a      	strh	r2, [r3, #40]	; 0x28

    uint8_t *ptr = (uint8_t *)packet;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	62bb      	str	r3, [r7, #40]	; 0x28
    packet->crc16 = Calculate_CRC(ptr, sizeof(TelemetryPacket) - 2);
 800145e:	212a      	movs	r1, #42	; 0x2a
 8001460:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001462:	f7ff ff91 	bl	8001388 <Calculate_CRC>
 8001466:	4603      	mov	r3, r0
 8001468:	461a      	mov	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	851a      	strh	r2, [r3, #40]	; 0x28

    CAN_TxHeaderTypeDef txHeader;
    uint32_t txMailbox;
    txHeader.StdId = 0x123;
 800146e:	f240 1323 	movw	r3, #291	; 0x123
 8001472:	613b      	str	r3, [r7, #16]
    txHeader.RTR = CAN_RTR_DATA;
 8001474:	2300      	movs	r3, #0
 8001476:	61fb      	str	r3, [r7, #28]
    txHeader.IDE = CAN_ID_STD;
 8001478:	2300      	movs	r3, #0
 800147a:	61bb      	str	r3, [r7, #24]
    txHeader.DLC = 8;
 800147c:	2308      	movs	r3, #8
 800147e:	623b      	str	r3, [r7, #32]
    txHeader.TransmitGlobalTime = DISABLE;
 8001480:	2300      	movs	r3, #0
 8001482:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

    for (uint8_t i = 0; i < sizeof(TelemetryPacket); i += 8)
 8001486:	2300      	movs	r3, #0
 8001488:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800148c:	e012      	b.n	80014b4 <SendTelemetryCAN+0x70>
    {
        HAL_CAN_AddTxMessage(&hcan1, &txHeader, &ptr[i], &txMailbox);
 800148e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001492:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001494:	441a      	add	r2, r3
 8001496:	f107 030c 	add.w	r3, r7, #12
 800149a:	f107 0110 	add.w	r1, r7, #16
 800149e:	480a      	ldr	r0, [pc, #40]	; (80014c8 <SendTelemetryCAN+0x84>)
 80014a0:	f000 fe13 	bl	80020ca <HAL_CAN_AddTxMessage>
        HAL_Delay(1);
 80014a4:	2001      	movs	r0, #1
 80014a6:	f000 f8ad 	bl	8001604 <HAL_Delay>
    for (uint8_t i = 0; i < sizeof(TelemetryPacket); i += 8)
 80014aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80014ae:	3308      	adds	r3, #8
 80014b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80014b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80014b8:	2b2b      	cmp	r3, #43	; 0x2b
 80014ba:	d9e8      	bls.n	800148e <SendTelemetryCAN+0x4a>
    }
}
 80014bc:	bf00      	nop
 80014be:	bf00      	nop
 80014c0:	3730      	adds	r7, #48	; 0x30
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200000e0 	.word	0x200000e0

080014cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001504 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014d0:	480d      	ldr	r0, [pc, #52]	; (8001508 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014d2:	490e      	ldr	r1, [pc, #56]	; (800150c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014d4:	4a0e      	ldr	r2, [pc, #56]	; (8001510 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014d8:	e002      	b.n	80014e0 <LoopCopyDataInit>

080014da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014de:	3304      	adds	r3, #4

080014e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e4:	d3f9      	bcc.n	80014da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014e6:	4a0b      	ldr	r2, [pc, #44]	; (8001514 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014e8:	4c0b      	ldr	r4, [pc, #44]	; (8001518 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014ec:	e001      	b.n	80014f2 <LoopFillZerobss>

080014ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f0:	3204      	adds	r2, #4

080014f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f4:	d3fb      	bcc.n	80014ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014f6:	f7ff ff35 	bl	8001364 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014fa:	f009 ff6f 	bl	800b3dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014fe:	f7ff f905 	bl	800070c <main>
  bx  lr    
 8001502:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001504:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001508:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800150c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001510:	0800b504 	.word	0x0800b504
  ldr r2, =_sbss
 8001514:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001518:	20000ab8 	.word	0x20000ab8

0800151c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800151c:	e7fe      	b.n	800151c <ADC_IRQHandler>
	...

08001520 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001524:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <HAL_Init+0x40>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a0d      	ldr	r2, [pc, #52]	; (8001560 <HAL_Init+0x40>)
 800152a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800152e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001530:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <HAL_Init+0x40>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a0a      	ldr	r2, [pc, #40]	; (8001560 <HAL_Init+0x40>)
 8001536:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800153a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800153c:	4b08      	ldr	r3, [pc, #32]	; (8001560 <HAL_Init+0x40>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a07      	ldr	r2, [pc, #28]	; (8001560 <HAL_Init+0x40>)
 8001542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001546:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001548:	2003      	movs	r0, #3
 800154a:	f000 ff69 	bl	8002420 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800154e:	2000      	movs	r0, #0
 8001550:	f000 f808 	bl	8001564 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001554:	f7ff fc6e 	bl	8000e34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40023c00 	.word	0x40023c00

08001564 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <HAL_InitTick+0x54>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4b12      	ldr	r3, [pc, #72]	; (80015bc <HAL_InitTick+0x58>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	4619      	mov	r1, r3
 8001576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800157a:	fbb3 f3f1 	udiv	r3, r3, r1
 800157e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001582:	4618      	mov	r0, r3
 8001584:	f000 ff81 	bl	800248a <HAL_SYSTICK_Config>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e00e      	b.n	80015b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2b0f      	cmp	r3, #15
 8001596:	d80a      	bhi.n	80015ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001598:	2200      	movs	r2, #0
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	f04f 30ff 	mov.w	r0, #4294967295
 80015a0:	f000 ff49 	bl	8002436 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015a4:	4a06      	ldr	r2, [pc, #24]	; (80015c0 <HAL_InitTick+0x5c>)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015aa:	2300      	movs	r3, #0
 80015ac:	e000      	b.n	80015b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000000 	.word	0x20000000
 80015bc:	20000008 	.word	0x20000008
 80015c0:	20000004 	.word	0x20000004

080015c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <HAL_IncTick+0x20>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	461a      	mov	r2, r3
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <HAL_IncTick+0x24>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4413      	add	r3, r2
 80015d4:	4a04      	ldr	r2, [pc, #16]	; (80015e8 <HAL_IncTick+0x24>)
 80015d6:	6013      	str	r3, [r2, #0]
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	20000008 	.word	0x20000008
 80015e8:	2000028c 	.word	0x2000028c

080015ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  return uwTick;
 80015f0:	4b03      	ldr	r3, [pc, #12]	; (8001600 <HAL_GetTick+0x14>)
 80015f2:	681b      	ldr	r3, [r3, #0]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	2000028c 	.word	0x2000028c

08001604 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800160c:	f7ff ffee 	bl	80015ec <HAL_GetTick>
 8001610:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800161c:	d005      	beq.n	800162a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800161e:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <HAL_Delay+0x44>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	461a      	mov	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	4413      	add	r3, r2
 8001628:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800162a:	bf00      	nop
 800162c:	f7ff ffde 	bl	80015ec <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	68fa      	ldr	r2, [r7, #12]
 8001638:	429a      	cmp	r2, r3
 800163a:	d8f7      	bhi.n	800162c <HAL_Delay+0x28>
  {
  }
}
 800163c:	bf00      	nop
 800163e:	bf00      	nop
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000008 	.word	0x20000008

0800164c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001654:	2300      	movs	r3, #0
 8001656:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d101      	bne.n	8001662 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e033      	b.n	80016ca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	2b00      	cmp	r3, #0
 8001668:	d109      	bne.n	800167e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff fc0a 	bl	8000e84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f003 0310 	and.w	r3, r3, #16
 8001686:	2b00      	cmp	r3, #0
 8001688:	d118      	bne.n	80016bc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001692:	f023 0302 	bic.w	r3, r3, #2
 8001696:	f043 0202 	orr.w	r2, r3, #2
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 fad8 	bl	8001c54 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	f023 0303 	bic.w	r3, r3, #3
 80016b2:	f043 0201 	orr.w	r2, r3, #1
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	641a      	str	r2, [r3, #64]	; 0x40
 80016ba:	e001      	b.n	80016c0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
	...

080016d4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80016dc:	2300      	movs	r3, #0
 80016de:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d101      	bne.n	80016ee <HAL_ADC_Start+0x1a>
 80016ea:	2302      	movs	r3, #2
 80016ec:	e0b2      	b.n	8001854 <HAL_ADC_Start+0x180>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2201      	movs	r2, #1
 80016f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	2b01      	cmp	r3, #1
 8001702:	d018      	beq.n	8001736 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	689a      	ldr	r2, [r3, #8]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f042 0201 	orr.w	r2, r2, #1
 8001712:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001714:	4b52      	ldr	r3, [pc, #328]	; (8001860 <HAL_ADC_Start+0x18c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a52      	ldr	r2, [pc, #328]	; (8001864 <HAL_ADC_Start+0x190>)
 800171a:	fba2 2303 	umull	r2, r3, r2, r3
 800171e:	0c9a      	lsrs	r2, r3, #18
 8001720:	4613      	mov	r3, r2
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	4413      	add	r3, r2
 8001726:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001728:	e002      	b.n	8001730 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	3b01      	subs	r3, #1
 800172e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1f9      	bne.n	800172a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	2b01      	cmp	r3, #1
 8001742:	d17a      	bne.n	800183a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001748:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800174c:	f023 0301 	bic.w	r3, r3, #1
 8001750:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001762:	2b00      	cmp	r3, #0
 8001764:	d007      	beq.n	8001776 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800176e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800177e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001782:	d106      	bne.n	8001792 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001788:	f023 0206 	bic.w	r2, r3, #6
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	645a      	str	r2, [r3, #68]	; 0x44
 8001790:	e002      	b.n	8001798 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017a0:	4b31      	ldr	r3, [pc, #196]	; (8001868 <HAL_ADC_Start+0x194>)
 80017a2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80017ac:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f003 031f 	and.w	r3, r3, #31
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d12a      	bne.n	8001810 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a2b      	ldr	r2, [pc, #172]	; (800186c <HAL_ADC_Start+0x198>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d015      	beq.n	80017f0 <HAL_ADC_Start+0x11c>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a29      	ldr	r2, [pc, #164]	; (8001870 <HAL_ADC_Start+0x19c>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d105      	bne.n	80017da <HAL_ADC_Start+0x106>
 80017ce:	4b26      	ldr	r3, [pc, #152]	; (8001868 <HAL_ADC_Start+0x194>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f003 031f 	and.w	r3, r3, #31
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d00a      	beq.n	80017f0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a25      	ldr	r2, [pc, #148]	; (8001874 <HAL_ADC_Start+0x1a0>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d136      	bne.n	8001852 <HAL_ADC_Start+0x17e>
 80017e4:	4b20      	ldr	r3, [pc, #128]	; (8001868 <HAL_ADC_Start+0x194>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 0310 	and.w	r3, r3, #16
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d130      	bne.n	8001852 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d129      	bne.n	8001852 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800180c:	609a      	str	r2, [r3, #8]
 800180e:	e020      	b.n	8001852 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a15      	ldr	r2, [pc, #84]	; (800186c <HAL_ADC_Start+0x198>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d11b      	bne.n	8001852 <HAL_ADC_Start+0x17e>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d114      	bne.n	8001852 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	689a      	ldr	r2, [r3, #8]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	e00b      	b.n	8001852 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	f043 0210 	orr.w	r2, r3, #16
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184a:	f043 0201 	orr.w	r2, r3, #1
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	20000000 	.word	0x20000000
 8001864:	431bde83 	.word	0x431bde83
 8001868:	40012300 	.word	0x40012300
 800186c:	40012000 	.word	0x40012000
 8001870:	40012100 	.word	0x40012100
 8001874:	40012200 	.word	0x40012200

08001878 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001886:	2b01      	cmp	r3, #1
 8001888:	d101      	bne.n	800188e <HAL_ADC_Stop+0x16>
 800188a:	2302      	movs	r3, #2
 800188c:	e021      	b.n	80018d2 <HAL_ADC_Stop+0x5a>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2201      	movs	r2, #1
 8001892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 0201 	bic.w	r2, r2, #1
 80018a4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d109      	bne.n	80018c8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018bc:	f023 0301 	bic.w	r3, r3, #1
 80018c0:	f043 0201 	orr.w	r2, r3, #1
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b084      	sub	sp, #16
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
 80018e6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80018e8:	2300      	movs	r3, #0
 80018ea:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018fa:	d113      	bne.n	8001924 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800190a:	d10b      	bne.n	8001924 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001910:	f043 0220 	orr.w	r2, r3, #32
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e063      	b.n	80019ec <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001924:	f7ff fe62 	bl	80015ec <HAL_GetTick>
 8001928:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800192a:	e021      	b.n	8001970 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001932:	d01d      	beq.n	8001970 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d007      	beq.n	800194a <HAL_ADC_PollForConversion+0x6c>
 800193a:	f7ff fe57 	bl	80015ec <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	429a      	cmp	r2, r3
 8001948:	d212      	bcs.n	8001970 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b02      	cmp	r3, #2
 8001956:	d00b      	beq.n	8001970 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195c:	f043 0204 	orr.w	r2, r3, #4
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e03d      	b.n	80019ec <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b02      	cmp	r3, #2
 800197c:	d1d6      	bne.n	800192c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f06f 0212 	mvn.w	r2, #18
 8001986:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d123      	bne.n	80019ea <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d11f      	bne.n	80019ea <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d006      	beq.n	80019c6 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d111      	bne.n	80019ea <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d105      	bne.n	80019ea <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	f043 0201 	orr.w	r2, r3, #1
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3710      	adds	r7, #16
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
	...

08001a10 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d101      	bne.n	8001a2c <HAL_ADC_ConfigChannel+0x1c>
 8001a28:	2302      	movs	r3, #2
 8001a2a:	e105      	b.n	8001c38 <HAL_ADC_ConfigChannel+0x228>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b09      	cmp	r3, #9
 8001a3a:	d925      	bls.n	8001a88 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68d9      	ldr	r1, [r3, #12]
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	4413      	add	r3, r2
 8001a50:	3b1e      	subs	r3, #30
 8001a52:	2207      	movs	r2, #7
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43da      	mvns	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	400a      	ands	r2, r1
 8001a60:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68d9      	ldr	r1, [r3, #12]
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	4618      	mov	r0, r3
 8001a74:	4603      	mov	r3, r0
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	4403      	add	r3, r0
 8001a7a:	3b1e      	subs	r3, #30
 8001a7c:	409a      	lsls	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	430a      	orrs	r2, r1
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	e022      	b.n	8001ace <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6919      	ldr	r1, [r3, #16]
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	461a      	mov	r2, r3
 8001a96:	4613      	mov	r3, r2
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	4413      	add	r3, r2
 8001a9c:	2207      	movs	r2, #7
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43da      	mvns	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	400a      	ands	r2, r1
 8001aaa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6919      	ldr	r1, [r3, #16]
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	689a      	ldr	r2, [r3, #8]
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	4618      	mov	r0, r3
 8001abe:	4603      	mov	r3, r0
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	4403      	add	r3, r0
 8001ac4:	409a      	lsls	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	430a      	orrs	r2, r1
 8001acc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b06      	cmp	r3, #6
 8001ad4:	d824      	bhi.n	8001b20 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	3b05      	subs	r3, #5
 8001ae8:	221f      	movs	r2, #31
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43da      	mvns	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	400a      	ands	r2, r1
 8001af6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	4618      	mov	r0, r3
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4413      	add	r3, r2
 8001b10:	3b05      	subs	r3, #5
 8001b12:	fa00 f203 	lsl.w	r2, r0, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	635a      	str	r2, [r3, #52]	; 0x34
 8001b1e:	e04c      	b.n	8001bba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2b0c      	cmp	r3, #12
 8001b26:	d824      	bhi.n	8001b72 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	4613      	mov	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	3b23      	subs	r3, #35	; 0x23
 8001b3a:	221f      	movs	r2, #31
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43da      	mvns	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	400a      	ands	r2, r1
 8001b48:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	4618      	mov	r0, r3
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4413      	add	r3, r2
 8001b62:	3b23      	subs	r3, #35	; 0x23
 8001b64:	fa00 f203 	lsl.w	r2, r0, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	631a      	str	r2, [r3, #48]	; 0x30
 8001b70:	e023      	b.n	8001bba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	3b41      	subs	r3, #65	; 0x41
 8001b84:	221f      	movs	r2, #31
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43da      	mvns	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	400a      	ands	r2, r1
 8001b92:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685a      	ldr	r2, [r3, #4]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	3b41      	subs	r3, #65	; 0x41
 8001bae:	fa00 f203 	lsl.w	r2, r0, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bba:	4b22      	ldr	r3, [pc, #136]	; (8001c44 <HAL_ADC_ConfigChannel+0x234>)
 8001bbc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a21      	ldr	r2, [pc, #132]	; (8001c48 <HAL_ADC_ConfigChannel+0x238>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d109      	bne.n	8001bdc <HAL_ADC_ConfigChannel+0x1cc>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b12      	cmp	r3, #18
 8001bce:	d105      	bne.n	8001bdc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a19      	ldr	r2, [pc, #100]	; (8001c48 <HAL_ADC_ConfigChannel+0x238>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d123      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x21e>
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2b10      	cmp	r3, #16
 8001bec:	d003      	beq.n	8001bf6 <HAL_ADC_ConfigChannel+0x1e6>
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2b11      	cmp	r3, #17
 8001bf4:	d11b      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2b10      	cmp	r3, #16
 8001c08:	d111      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c0a:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <HAL_ADC_ConfigChannel+0x23c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a10      	ldr	r2, [pc, #64]	; (8001c50 <HAL_ADC_ConfigChannel+0x240>)
 8001c10:	fba2 2303 	umull	r2, r3, r2, r3
 8001c14:	0c9a      	lsrs	r2, r3, #18
 8001c16:	4613      	mov	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c20:	e002      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	3b01      	subs	r3, #1
 8001c26:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1f9      	bne.n	8001c22 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	40012300 	.word	0x40012300
 8001c48:	40012000 	.word	0x40012000
 8001c4c:	20000000 	.word	0x20000000
 8001c50:	431bde83 	.word	0x431bde83

08001c54 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c5c:	4b79      	ldr	r3, [pc, #484]	; (8001e44 <ADC_Init+0x1f0>)
 8001c5e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	685a      	ldr	r2, [r3, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	431a      	orrs	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6859      	ldr	r1, [r3, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	021a      	lsls	r2, r3, #8
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001cac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6859      	ldr	r1, [r3, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689a      	ldr	r2, [r3, #8]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6899      	ldr	r1, [r3, #8]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68da      	ldr	r2, [r3, #12]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce6:	4a58      	ldr	r2, [pc, #352]	; (8001e48 <ADC_Init+0x1f4>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d022      	beq.n	8001d32 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	689a      	ldr	r2, [r3, #8]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cfa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6899      	ldr	r1, [r3, #8]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6899      	ldr	r1, [r3, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	e00f      	b.n	8001d52 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d50:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f022 0202 	bic.w	r2, r2, #2
 8001d60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	6899      	ldr	r1, [r3, #8]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	7e1b      	ldrb	r3, [r3, #24]
 8001d6c:	005a      	lsls	r2, r3, #1
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	430a      	orrs	r2, r1
 8001d74:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d01b      	beq.n	8001db8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d8e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d9e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6859      	ldr	r1, [r3, #4]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001daa:	3b01      	subs	r3, #1
 8001dac:	035a      	lsls	r2, r3, #13
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	430a      	orrs	r2, r1
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	e007      	b.n	8001dc8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dc6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001dd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	051a      	lsls	r2, r3, #20
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	430a      	orrs	r2, r1
 8001dec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001dfc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6899      	ldr	r1, [r3, #8]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e0a:	025a      	lsls	r2, r3, #9
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	430a      	orrs	r2, r1
 8001e12:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	689a      	ldr	r2, [r3, #8]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6899      	ldr	r1, [r3, #8]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	029a      	lsls	r2, r3, #10
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	430a      	orrs	r2, r1
 8001e36:	609a      	str	r2, [r3, #8]
}
 8001e38:	bf00      	nop
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	40012300 	.word	0x40012300
 8001e48:	0f000001 	.word	0x0f000001

08001e4c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e0ed      	b.n	800203a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d102      	bne.n	8001e70 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff f82c 	bl	8000ec8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 0201 	orr.w	r2, r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e80:	f7ff fbb4 	bl	80015ec <HAL_GetTick>
 8001e84:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e86:	e012      	b.n	8001eae <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e88:	f7ff fbb0 	bl	80015ec <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b0a      	cmp	r3, #10
 8001e94:	d90b      	bls.n	8001eae <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2205      	movs	r2, #5
 8001ea6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e0c5      	b.n	800203a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d0e5      	beq.n	8001e88 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 0202 	bic.w	r2, r2, #2
 8001eca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ecc:	f7ff fb8e 	bl	80015ec <HAL_GetTick>
 8001ed0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ed2:	e012      	b.n	8001efa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ed4:	f7ff fb8a 	bl	80015ec <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b0a      	cmp	r3, #10
 8001ee0:	d90b      	bls.n	8001efa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2205      	movs	r2, #5
 8001ef2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e09f      	b.n	800203a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1e5      	bne.n	8001ed4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	7e1b      	ldrb	r3, [r3, #24]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d108      	bne.n	8001f22 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	e007      	b.n	8001f32 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	7e5b      	ldrb	r3, [r3, #25]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d108      	bne.n	8001f4c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	e007      	b.n	8001f5c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	7e9b      	ldrb	r3, [r3, #26]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d108      	bne.n	8001f76 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 0220 	orr.w	r2, r2, #32
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	e007      	b.n	8001f86 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0220 	bic.w	r2, r2, #32
 8001f84:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	7edb      	ldrb	r3, [r3, #27]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d108      	bne.n	8001fa0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 0210 	bic.w	r2, r2, #16
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	e007      	b.n	8001fb0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f042 0210 	orr.w	r2, r2, #16
 8001fae:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	7f1b      	ldrb	r3, [r3, #28]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d108      	bne.n	8001fca <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f042 0208 	orr.w	r2, r2, #8
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	e007      	b.n	8001fda <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 0208 	bic.w	r2, r2, #8
 8001fd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	7f5b      	ldrb	r3, [r3, #29]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d108      	bne.n	8001ff4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f042 0204 	orr.w	r2, r2, #4
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	e007      	b.n	8002004 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 0204 	bic.w	r2, r2, #4
 8002002:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	431a      	orrs	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	431a      	orrs	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	695b      	ldr	r3, [r3, #20]
 8002018:	ea42 0103 	orr.w	r1, r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	1e5a      	subs	r2, r3, #1
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	430a      	orrs	r2, r1
 8002028:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b084      	sub	sp, #16
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b01      	cmp	r3, #1
 8002054:	d12e      	bne.n	80020b4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2202      	movs	r2, #2
 800205a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 0201 	bic.w	r2, r2, #1
 800206c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800206e:	f7ff fabd 	bl	80015ec <HAL_GetTick>
 8002072:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002074:	e012      	b.n	800209c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002076:	f7ff fab9 	bl	80015ec <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b0a      	cmp	r3, #10
 8002082:	d90b      	bls.n	800209c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002088:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2205      	movs	r2, #5
 8002094:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e012      	b.n	80020c2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1e5      	bne.n	8002076 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80020b0:	2300      	movs	r3, #0
 80020b2:	e006      	b.n	80020c2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
  }
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b089      	sub	sp, #36	; 0x24
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	60f8      	str	r0, [r7, #12]
 80020d2:	60b9      	str	r1, [r7, #8]
 80020d4:	607a      	str	r2, [r7, #4]
 80020d6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020de:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80020e8:	7ffb      	ldrb	r3, [r7, #31]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d003      	beq.n	80020f6 <HAL_CAN_AddTxMessage+0x2c>
 80020ee:	7ffb      	ldrb	r3, [r7, #31]
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	f040 80b8 	bne.w	8002266 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10a      	bne.n	8002116 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002106:	2b00      	cmp	r3, #0
 8002108:	d105      	bne.n	8002116 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 80a0 	beq.w	8002256 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	0e1b      	lsrs	r3, r3, #24
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	2b02      	cmp	r3, #2
 8002124:	d907      	bls.n	8002136 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e09e      	b.n	8002274 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002136:	2201      	movs	r2, #1
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	409a      	lsls	r2, r3
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10d      	bne.n	8002164 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002152:	68f9      	ldr	r1, [r7, #12]
 8002154:	6809      	ldr	r1, [r1, #0]
 8002156:	431a      	orrs	r2, r3
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	3318      	adds	r3, #24
 800215c:	011b      	lsls	r3, r3, #4
 800215e:	440b      	add	r3, r1
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	e00f      	b.n	8002184 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800216e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002174:	68f9      	ldr	r1, [r7, #12]
 8002176:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002178:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	3318      	adds	r3, #24
 800217e:	011b      	lsls	r3, r3, #4
 8002180:	440b      	add	r3, r1
 8002182:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6819      	ldr	r1, [r3, #0]
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	691a      	ldr	r2, [r3, #16]
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	3318      	adds	r3, #24
 8002190:	011b      	lsls	r3, r3, #4
 8002192:	440b      	add	r3, r1
 8002194:	3304      	adds	r3, #4
 8002196:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	7d1b      	ldrb	r3, [r3, #20]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d111      	bne.n	80021c4 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	3318      	adds	r3, #24
 80021a8:	011b      	lsls	r3, r3, #4
 80021aa:	4413      	add	r3, r2
 80021ac:	3304      	adds	r3, #4
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	6811      	ldr	r1, [r2, #0]
 80021b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	3318      	adds	r3, #24
 80021bc:	011b      	lsls	r3, r3, #4
 80021be:	440b      	add	r3, r1
 80021c0:	3304      	adds	r3, #4
 80021c2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3307      	adds	r3, #7
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	061a      	lsls	r2, r3, #24
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3306      	adds	r3, #6
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	041b      	lsls	r3, r3, #16
 80021d4:	431a      	orrs	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	3305      	adds	r3, #5
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	021b      	lsls	r3, r3, #8
 80021de:	4313      	orrs	r3, r2
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	3204      	adds	r2, #4
 80021e4:	7812      	ldrb	r2, [r2, #0]
 80021e6:	4610      	mov	r0, r2
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	6811      	ldr	r1, [r2, #0]
 80021ec:	ea43 0200 	orr.w	r2, r3, r0
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	011b      	lsls	r3, r3, #4
 80021f4:	440b      	add	r3, r1
 80021f6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80021fa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3303      	adds	r3, #3
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	061a      	lsls	r2, r3, #24
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3302      	adds	r3, #2
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	041b      	lsls	r3, r3, #16
 800220c:	431a      	orrs	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3301      	adds	r3, #1
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	021b      	lsls	r3, r3, #8
 8002216:	4313      	orrs	r3, r2
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	7812      	ldrb	r2, [r2, #0]
 800221c:	4610      	mov	r0, r2
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	6811      	ldr	r1, [r2, #0]
 8002222:	ea43 0200 	orr.w	r2, r3, r0
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	011b      	lsls	r3, r3, #4
 800222a:	440b      	add	r3, r1
 800222c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002230:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	3318      	adds	r3, #24
 800223a:	011b      	lsls	r3, r3, #4
 800223c:	4413      	add	r3, r2
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	6811      	ldr	r1, [r2, #0]
 8002244:	f043 0201 	orr.w	r2, r3, #1
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	3318      	adds	r3, #24
 800224c:	011b      	lsls	r3, r3, #4
 800224e:	440b      	add	r3, r1
 8002250:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002252:	2300      	movs	r3, #0
 8002254:	e00e      	b.n	8002274 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e006      	b.n	8002274 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
  }
}
 8002274:	4618      	mov	r0, r3
 8002276:	3724      	adds	r7, #36	; 0x24
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002290:	4b0c      	ldr	r3, [pc, #48]	; (80022c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800229c:	4013      	ands	r3, r2
 800229e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022b2:	4a04      	ldr	r2, [pc, #16]	; (80022c4 <__NVIC_SetPriorityGrouping+0x44>)
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	60d3      	str	r3, [r2, #12]
}
 80022b8:	bf00      	nop
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	e000ed00 	.word	0xe000ed00

080022c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022cc:	4b04      	ldr	r3, [pc, #16]	; (80022e0 <__NVIC_GetPriorityGrouping+0x18>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	0a1b      	lsrs	r3, r3, #8
 80022d2:	f003 0307 	and.w	r3, r3, #7
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	db0b      	blt.n	800230e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	f003 021f 	and.w	r2, r3, #31
 80022fc:	4907      	ldr	r1, [pc, #28]	; (800231c <__NVIC_EnableIRQ+0x38>)
 80022fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002302:	095b      	lsrs	r3, r3, #5
 8002304:	2001      	movs	r0, #1
 8002306:	fa00 f202 	lsl.w	r2, r0, r2
 800230a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	e000e100 	.word	0xe000e100

08002320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	6039      	str	r1, [r7, #0]
 800232a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800232c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002330:	2b00      	cmp	r3, #0
 8002332:	db0a      	blt.n	800234a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	b2da      	uxtb	r2, r3
 8002338:	490c      	ldr	r1, [pc, #48]	; (800236c <__NVIC_SetPriority+0x4c>)
 800233a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233e:	0112      	lsls	r2, r2, #4
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	440b      	add	r3, r1
 8002344:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002348:	e00a      	b.n	8002360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	b2da      	uxtb	r2, r3
 800234e:	4908      	ldr	r1, [pc, #32]	; (8002370 <__NVIC_SetPriority+0x50>)
 8002350:	79fb      	ldrb	r3, [r7, #7]
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	3b04      	subs	r3, #4
 8002358:	0112      	lsls	r2, r2, #4
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	440b      	add	r3, r1
 800235e:	761a      	strb	r2, [r3, #24]
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	e000e100 	.word	0xe000e100
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002374:	b480      	push	{r7}
 8002376:	b089      	sub	sp, #36	; 0x24
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	f1c3 0307 	rsb	r3, r3, #7
 800238e:	2b04      	cmp	r3, #4
 8002390:	bf28      	it	cs
 8002392:	2304      	movcs	r3, #4
 8002394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	3304      	adds	r3, #4
 800239a:	2b06      	cmp	r3, #6
 800239c:	d902      	bls.n	80023a4 <NVIC_EncodePriority+0x30>
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	3b03      	subs	r3, #3
 80023a2:	e000      	b.n	80023a6 <NVIC_EncodePriority+0x32>
 80023a4:	2300      	movs	r3, #0
 80023a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a8:	f04f 32ff 	mov.w	r2, #4294967295
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43da      	mvns	r2, r3
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	401a      	ands	r2, r3
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023bc:	f04f 31ff 	mov.w	r1, #4294967295
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	fa01 f303 	lsl.w	r3, r1, r3
 80023c6:	43d9      	mvns	r1, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023cc:	4313      	orrs	r3, r2
         );
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3724      	adds	r7, #36	; 0x24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
	...

080023dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3b01      	subs	r3, #1
 80023e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023ec:	d301      	bcc.n	80023f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ee:	2301      	movs	r3, #1
 80023f0:	e00f      	b.n	8002412 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023f2:	4a0a      	ldr	r2, [pc, #40]	; (800241c <SysTick_Config+0x40>)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023fa:	210f      	movs	r1, #15
 80023fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002400:	f7ff ff8e 	bl	8002320 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002404:	4b05      	ldr	r3, [pc, #20]	; (800241c <SysTick_Config+0x40>)
 8002406:	2200      	movs	r2, #0
 8002408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800240a:	4b04      	ldr	r3, [pc, #16]	; (800241c <SysTick_Config+0x40>)
 800240c:	2207      	movs	r2, #7
 800240e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	e000e010 	.word	0xe000e010

08002420 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f7ff ff29 	bl	8002280 <__NVIC_SetPriorityGrouping>
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002436:	b580      	push	{r7, lr}
 8002438:	b086      	sub	sp, #24
 800243a:	af00      	add	r7, sp, #0
 800243c:	4603      	mov	r3, r0
 800243e:	60b9      	str	r1, [r7, #8]
 8002440:	607a      	str	r2, [r7, #4]
 8002442:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002448:	f7ff ff3e 	bl	80022c8 <__NVIC_GetPriorityGrouping>
 800244c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	68b9      	ldr	r1, [r7, #8]
 8002452:	6978      	ldr	r0, [r7, #20]
 8002454:	f7ff ff8e 	bl	8002374 <NVIC_EncodePriority>
 8002458:	4602      	mov	r2, r0
 800245a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800245e:	4611      	mov	r1, r2
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff ff5d 	bl	8002320 <__NVIC_SetPriority>
}
 8002466:	bf00      	nop
 8002468:	3718      	adds	r7, #24
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b082      	sub	sp, #8
 8002472:	af00      	add	r7, sp, #0
 8002474:	4603      	mov	r3, r0
 8002476:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff ff31 	bl	80022e4 <__NVIC_EnableIRQ>
}
 8002482:	bf00      	nop
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b082      	sub	sp, #8
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7ff ffa2 	bl	80023dc <SysTick_Config>
 8002498:	4603      	mov	r3, r0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b084      	sub	sp, #16
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80024b0:	f7ff f89c 	bl	80015ec <HAL_GetTick>
 80024b4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d008      	beq.n	80024d4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2280      	movs	r2, #128	; 0x80
 80024c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e052      	b.n	800257a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 0216 	bic.w	r2, r2, #22
 80024e2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	695a      	ldr	r2, [r3, #20]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024f2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d103      	bne.n	8002504 <HAL_DMA_Abort+0x62>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002500:	2b00      	cmp	r3, #0
 8002502:	d007      	beq.n	8002514 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 0208 	bic.w	r2, r2, #8
 8002512:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 0201 	bic.w	r2, r2, #1
 8002522:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002524:	e013      	b.n	800254e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002526:	f7ff f861 	bl	80015ec <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b05      	cmp	r3, #5
 8002532:	d90c      	bls.n	800254e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2220      	movs	r2, #32
 8002538:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2203      	movs	r2, #3
 800253e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e015      	b.n	800257a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1e4      	bne.n	8002526 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002560:	223f      	movs	r2, #63	; 0x3f
 8002562:	409a      	lsls	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d004      	beq.n	80025a0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2280      	movs	r2, #128	; 0x80
 800259a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e00c      	b.n	80025ba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2205      	movs	r2, #5
 80025a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 0201 	bic.w	r2, r2, #1
 80025b6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
	...

080025c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b089      	sub	sp, #36	; 0x24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025da:	2300      	movs	r3, #0
 80025dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025de:	2300      	movs	r3, #0
 80025e0:	61fb      	str	r3, [r7, #28]
 80025e2:	e16b      	b.n	80028bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025e4:	2201      	movs	r2, #1
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	4013      	ands	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	f040 815a 	bne.w	80028b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f003 0303 	and.w	r3, r3, #3
 800260a:	2b01      	cmp	r3, #1
 800260c:	d005      	beq.n	800261a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002616:	2b02      	cmp	r3, #2
 8002618:	d130      	bne.n	800267c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	2203      	movs	r2, #3
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	43db      	mvns	r3, r3
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	4013      	ands	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	68da      	ldr	r2, [r3, #12]
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4313      	orrs	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002650:	2201      	movs	r2, #1
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	43db      	mvns	r3, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4013      	ands	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	091b      	lsrs	r3, r3, #4
 8002666:	f003 0201 	and.w	r2, r3, #1
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4313      	orrs	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f003 0303 	and.w	r3, r3, #3
 8002684:	2b03      	cmp	r3, #3
 8002686:	d017      	beq.n	80026b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	2203      	movs	r2, #3
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	43db      	mvns	r3, r3
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4013      	ands	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f003 0303 	and.w	r3, r3, #3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d123      	bne.n	800270c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	08da      	lsrs	r2, r3, #3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3208      	adds	r2, #8
 80026cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	220f      	movs	r2, #15
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4013      	ands	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	691a      	ldr	r2, [r3, #16]
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	08da      	lsrs	r2, r3, #3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	3208      	adds	r2, #8
 8002706:	69b9      	ldr	r1, [r7, #24]
 8002708:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	2203      	movs	r2, #3
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4013      	ands	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f003 0203 	and.w	r2, r3, #3
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4313      	orrs	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002748:	2b00      	cmp	r3, #0
 800274a:	f000 80b4 	beq.w	80028b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800274e:	2300      	movs	r3, #0
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	4b60      	ldr	r3, [pc, #384]	; (80028d4 <HAL_GPIO_Init+0x30c>)
 8002754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002756:	4a5f      	ldr	r2, [pc, #380]	; (80028d4 <HAL_GPIO_Init+0x30c>)
 8002758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800275c:	6453      	str	r3, [r2, #68]	; 0x44
 800275e:	4b5d      	ldr	r3, [pc, #372]	; (80028d4 <HAL_GPIO_Init+0x30c>)
 8002760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800276a:	4a5b      	ldr	r2, [pc, #364]	; (80028d8 <HAL_GPIO_Init+0x310>)
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	089b      	lsrs	r3, r3, #2
 8002770:	3302      	adds	r3, #2
 8002772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002776:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	220f      	movs	r2, #15
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43db      	mvns	r3, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4013      	ands	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a52      	ldr	r2, [pc, #328]	; (80028dc <HAL_GPIO_Init+0x314>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d02b      	beq.n	80027ee <HAL_GPIO_Init+0x226>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a51      	ldr	r2, [pc, #324]	; (80028e0 <HAL_GPIO_Init+0x318>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d025      	beq.n	80027ea <HAL_GPIO_Init+0x222>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a50      	ldr	r2, [pc, #320]	; (80028e4 <HAL_GPIO_Init+0x31c>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d01f      	beq.n	80027e6 <HAL_GPIO_Init+0x21e>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a4f      	ldr	r2, [pc, #316]	; (80028e8 <HAL_GPIO_Init+0x320>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d019      	beq.n	80027e2 <HAL_GPIO_Init+0x21a>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a4e      	ldr	r2, [pc, #312]	; (80028ec <HAL_GPIO_Init+0x324>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d013      	beq.n	80027de <HAL_GPIO_Init+0x216>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a4d      	ldr	r2, [pc, #308]	; (80028f0 <HAL_GPIO_Init+0x328>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d00d      	beq.n	80027da <HAL_GPIO_Init+0x212>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a4c      	ldr	r2, [pc, #304]	; (80028f4 <HAL_GPIO_Init+0x32c>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d007      	beq.n	80027d6 <HAL_GPIO_Init+0x20e>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a4b      	ldr	r2, [pc, #300]	; (80028f8 <HAL_GPIO_Init+0x330>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d101      	bne.n	80027d2 <HAL_GPIO_Init+0x20a>
 80027ce:	2307      	movs	r3, #7
 80027d0:	e00e      	b.n	80027f0 <HAL_GPIO_Init+0x228>
 80027d2:	2308      	movs	r3, #8
 80027d4:	e00c      	b.n	80027f0 <HAL_GPIO_Init+0x228>
 80027d6:	2306      	movs	r3, #6
 80027d8:	e00a      	b.n	80027f0 <HAL_GPIO_Init+0x228>
 80027da:	2305      	movs	r3, #5
 80027dc:	e008      	b.n	80027f0 <HAL_GPIO_Init+0x228>
 80027de:	2304      	movs	r3, #4
 80027e0:	e006      	b.n	80027f0 <HAL_GPIO_Init+0x228>
 80027e2:	2303      	movs	r3, #3
 80027e4:	e004      	b.n	80027f0 <HAL_GPIO_Init+0x228>
 80027e6:	2302      	movs	r3, #2
 80027e8:	e002      	b.n	80027f0 <HAL_GPIO_Init+0x228>
 80027ea:	2301      	movs	r3, #1
 80027ec:	e000      	b.n	80027f0 <HAL_GPIO_Init+0x228>
 80027ee:	2300      	movs	r3, #0
 80027f0:	69fa      	ldr	r2, [r7, #28]
 80027f2:	f002 0203 	and.w	r2, r2, #3
 80027f6:	0092      	lsls	r2, r2, #2
 80027f8:	4093      	lsls	r3, r2
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002800:	4935      	ldr	r1, [pc, #212]	; (80028d8 <HAL_GPIO_Init+0x310>)
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	089b      	lsrs	r3, r3, #2
 8002806:	3302      	adds	r3, #2
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800280e:	4b3b      	ldr	r3, [pc, #236]	; (80028fc <HAL_GPIO_Init+0x334>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	43db      	mvns	r3, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4013      	ands	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	4313      	orrs	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002832:	4a32      	ldr	r2, [pc, #200]	; (80028fc <HAL_GPIO_Init+0x334>)
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002838:	4b30      	ldr	r3, [pc, #192]	; (80028fc <HAL_GPIO_Init+0x334>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	43db      	mvns	r3, r3
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	4013      	ands	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	4313      	orrs	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800285c:	4a27      	ldr	r2, [pc, #156]	; (80028fc <HAL_GPIO_Init+0x334>)
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002862:	4b26      	ldr	r3, [pc, #152]	; (80028fc <HAL_GPIO_Init+0x334>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	43db      	mvns	r3, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4013      	ands	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	4313      	orrs	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002886:	4a1d      	ldr	r2, [pc, #116]	; (80028fc <HAL_GPIO_Init+0x334>)
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800288c:	4b1b      	ldr	r3, [pc, #108]	; (80028fc <HAL_GPIO_Init+0x334>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	43db      	mvns	r3, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4013      	ands	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d003      	beq.n	80028b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028b0:	4a12      	ldr	r2, [pc, #72]	; (80028fc <HAL_GPIO_Init+0x334>)
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	3301      	adds	r3, #1
 80028ba:	61fb      	str	r3, [r7, #28]
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	2b0f      	cmp	r3, #15
 80028c0:	f67f ae90 	bls.w	80025e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028c4:	bf00      	nop
 80028c6:	bf00      	nop
 80028c8:	3724      	adds	r7, #36	; 0x24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	40023800 	.word	0x40023800
 80028d8:	40013800 	.word	0x40013800
 80028dc:	40020000 	.word	0x40020000
 80028e0:	40020400 	.word	0x40020400
 80028e4:	40020800 	.word	0x40020800
 80028e8:	40020c00 	.word	0x40020c00
 80028ec:	40021000 	.word	0x40021000
 80028f0:	40021400 	.word	0x40021400
 80028f4:	40021800 	.word	0x40021800
 80028f8:	40021c00 	.word	0x40021c00
 80028fc:	40013c00 	.word	0x40013c00

08002900 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	460b      	mov	r3, r1
 800290a:	807b      	strh	r3, [r7, #2]
 800290c:	4613      	mov	r3, r2
 800290e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002910:	787b      	ldrb	r3, [r7, #1]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002916:	887a      	ldrh	r2, [r7, #2]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800291c:	e003      	b.n	8002926 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800291e:	887b      	ldrh	r3, [r7, #2]
 8002920:	041a      	lsls	r2, r3, #16
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	619a      	str	r2, [r3, #24]
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002932:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002934:	b08f      	sub	sp, #60	; 0x3c
 8002936:	af0a      	add	r7, sp, #40	; 0x28
 8002938:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e054      	b.n	80029ee <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d106      	bne.n	8002964 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f008 f9b8 	bl	800acd4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2203      	movs	r2, #3
 8002968:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002974:	2b00      	cmp	r3, #0
 8002976:	d102      	bne.n	800297e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f005 f9e4 	bl	8007d50 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	603b      	str	r3, [r7, #0]
 800298e:	687e      	ldr	r6, [r7, #4]
 8002990:	466d      	mov	r5, sp
 8002992:	f106 0410 	add.w	r4, r6, #16
 8002996:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002998:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800299a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800299c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800299e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80029a6:	1d33      	adds	r3, r6, #4
 80029a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029aa:	6838      	ldr	r0, [r7, #0]
 80029ac:	f005 f95e 	bl	8007c6c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2101      	movs	r1, #1
 80029b6:	4618      	mov	r0, r3
 80029b8:	f005 f9db 	bl	8007d72 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	603b      	str	r3, [r7, #0]
 80029c2:	687e      	ldr	r6, [r7, #4]
 80029c4:	466d      	mov	r5, sp
 80029c6:	f106 0410 	add.w	r4, r6, #16
 80029ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80029da:	1d33      	adds	r3, r6, #4
 80029dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029de:	6838      	ldr	r0, [r7, #0]
 80029e0:	f005 fb64 	bl	80080ac <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3714      	adds	r7, #20
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029f6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80029f6:	b590      	push	{r4, r7, lr}
 80029f8:	b089      	sub	sp, #36	; 0x24
 80029fa:	af04      	add	r7, sp, #16
 80029fc:	6078      	str	r0, [r7, #4]
 80029fe:	4608      	mov	r0, r1
 8002a00:	4611      	mov	r1, r2
 8002a02:	461a      	mov	r2, r3
 8002a04:	4603      	mov	r3, r0
 8002a06:	70fb      	strb	r3, [r7, #3]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	70bb      	strb	r3, [r7, #2]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d101      	bne.n	8002a1e <HAL_HCD_HC_Init+0x28>
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	e076      	b.n	8002b0c <HAL_HCD_HC_Init+0x116>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002a26:	78fb      	ldrb	r3, [r7, #3]
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	212c      	movs	r1, #44	; 0x2c
 8002a2c:	fb01 f303 	mul.w	r3, r1, r3
 8002a30:	4413      	add	r3, r2
 8002a32:	333d      	adds	r3, #61	; 0x3d
 8002a34:	2200      	movs	r2, #0
 8002a36:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002a38:	78fb      	ldrb	r3, [r7, #3]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	212c      	movs	r1, #44	; 0x2c
 8002a3e:	fb01 f303 	mul.w	r3, r1, r3
 8002a42:	4413      	add	r3, r2
 8002a44:	3338      	adds	r3, #56	; 0x38
 8002a46:	787a      	ldrb	r2, [r7, #1]
 8002a48:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002a4a:	78fb      	ldrb	r3, [r7, #3]
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	212c      	movs	r1, #44	; 0x2c
 8002a50:	fb01 f303 	mul.w	r3, r1, r3
 8002a54:	4413      	add	r3, r2
 8002a56:	3340      	adds	r3, #64	; 0x40
 8002a58:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002a5a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002a5c:	78fb      	ldrb	r3, [r7, #3]
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	212c      	movs	r1, #44	; 0x2c
 8002a62:	fb01 f303 	mul.w	r3, r1, r3
 8002a66:	4413      	add	r3, r2
 8002a68:	3339      	adds	r3, #57	; 0x39
 8002a6a:	78fa      	ldrb	r2, [r7, #3]
 8002a6c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002a6e:	78fb      	ldrb	r3, [r7, #3]
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	212c      	movs	r1, #44	; 0x2c
 8002a74:	fb01 f303 	mul.w	r3, r1, r3
 8002a78:	4413      	add	r3, r2
 8002a7a:	333f      	adds	r3, #63	; 0x3f
 8002a7c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002a80:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002a82:	78fb      	ldrb	r3, [r7, #3]
 8002a84:	78ba      	ldrb	r2, [r7, #2]
 8002a86:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a8a:	b2d0      	uxtb	r0, r2
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	212c      	movs	r1, #44	; 0x2c
 8002a90:	fb01 f303 	mul.w	r3, r1, r3
 8002a94:	4413      	add	r3, r2
 8002a96:	333a      	adds	r3, #58	; 0x3a
 8002a98:	4602      	mov	r2, r0
 8002a9a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002a9c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	da09      	bge.n	8002ab8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002aa4:	78fb      	ldrb	r3, [r7, #3]
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	212c      	movs	r1, #44	; 0x2c
 8002aaa:	fb01 f303 	mul.w	r3, r1, r3
 8002aae:	4413      	add	r3, r2
 8002ab0:	333b      	adds	r3, #59	; 0x3b
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	701a      	strb	r2, [r3, #0]
 8002ab6:	e008      	b.n	8002aca <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002ab8:	78fb      	ldrb	r3, [r7, #3]
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	212c      	movs	r1, #44	; 0x2c
 8002abe:	fb01 f303 	mul.w	r3, r1, r3
 8002ac2:	4413      	add	r3, r2
 8002ac4:	333b      	adds	r3, #59	; 0x3b
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002aca:	78fb      	ldrb	r3, [r7, #3]
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	212c      	movs	r1, #44	; 0x2c
 8002ad0:	fb01 f303 	mul.w	r3, r1, r3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	333c      	adds	r3, #60	; 0x3c
 8002ad8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002adc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6818      	ldr	r0, [r3, #0]
 8002ae2:	787c      	ldrb	r4, [r7, #1]
 8002ae4:	78ba      	ldrb	r2, [r7, #2]
 8002ae6:	78f9      	ldrb	r1, [r7, #3]
 8002ae8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002aea:	9302      	str	r3, [sp, #8]
 8002aec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002af0:	9301      	str	r3, [sp, #4]
 8002af2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	4623      	mov	r3, r4
 8002afa:	f005 fc5d 	bl	80083b8 <USB_HC_Init>
 8002afe:	4603      	mov	r3, r0
 8002b00:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3714      	adds	r7, #20
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd90      	pop	{r4, r7, pc}

08002b14 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002b20:	2300      	movs	r3, #0
 8002b22:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d101      	bne.n	8002b32 <HAL_HCD_HC_Halt+0x1e>
 8002b2e:	2302      	movs	r3, #2
 8002b30:	e00f      	b.n	8002b52 <HAL_HCD_HC_Halt+0x3e>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	78fa      	ldrb	r2, [r7, #3]
 8002b40:	4611      	mov	r1, r2
 8002b42:	4618      	mov	r0, r3
 8002b44:	f005 fead 	bl	80088a2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
	...

08002b5c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	4608      	mov	r0, r1
 8002b66:	4611      	mov	r1, r2
 8002b68:	461a      	mov	r2, r3
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	70fb      	strb	r3, [r7, #3]
 8002b6e:	460b      	mov	r3, r1
 8002b70:	70bb      	strb	r3, [r7, #2]
 8002b72:	4613      	mov	r3, r2
 8002b74:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002b76:	78fb      	ldrb	r3, [r7, #3]
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	212c      	movs	r1, #44	; 0x2c
 8002b7c:	fb01 f303 	mul.w	r3, r1, r3
 8002b80:	4413      	add	r3, r2
 8002b82:	333b      	adds	r3, #59	; 0x3b
 8002b84:	78ba      	ldrb	r2, [r7, #2]
 8002b86:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002b88:	78fb      	ldrb	r3, [r7, #3]
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	212c      	movs	r1, #44	; 0x2c
 8002b8e:	fb01 f303 	mul.w	r3, r1, r3
 8002b92:	4413      	add	r3, r2
 8002b94:	333f      	adds	r3, #63	; 0x3f
 8002b96:	787a      	ldrb	r2, [r7, #1]
 8002b98:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002b9a:	7c3b      	ldrb	r3, [r7, #16]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d112      	bne.n	8002bc6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002ba0:	78fb      	ldrb	r3, [r7, #3]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	212c      	movs	r1, #44	; 0x2c
 8002ba6:	fb01 f303 	mul.w	r3, r1, r3
 8002baa:	4413      	add	r3, r2
 8002bac:	3342      	adds	r3, #66	; 0x42
 8002bae:	2203      	movs	r2, #3
 8002bb0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002bb2:	78fb      	ldrb	r3, [r7, #3]
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	212c      	movs	r1, #44	; 0x2c
 8002bb8:	fb01 f303 	mul.w	r3, r1, r3
 8002bbc:	4413      	add	r3, r2
 8002bbe:	333d      	adds	r3, #61	; 0x3d
 8002bc0:	7f3a      	ldrb	r2, [r7, #28]
 8002bc2:	701a      	strb	r2, [r3, #0]
 8002bc4:	e008      	b.n	8002bd8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002bc6:	78fb      	ldrb	r3, [r7, #3]
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	212c      	movs	r1, #44	; 0x2c
 8002bcc:	fb01 f303 	mul.w	r3, r1, r3
 8002bd0:	4413      	add	r3, r2
 8002bd2:	3342      	adds	r3, #66	; 0x42
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002bd8:	787b      	ldrb	r3, [r7, #1]
 8002bda:	2b03      	cmp	r3, #3
 8002bdc:	f200 80c6 	bhi.w	8002d6c <HAL_HCD_HC_SubmitRequest+0x210>
 8002be0:	a201      	add	r2, pc, #4	; (adr r2, 8002be8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be6:	bf00      	nop
 8002be8:	08002bf9 	.word	0x08002bf9
 8002bec:	08002d59 	.word	0x08002d59
 8002bf0:	08002c5d 	.word	0x08002c5d
 8002bf4:	08002cdb 	.word	0x08002cdb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002bf8:	7c3b      	ldrb	r3, [r7, #16]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	f040 80b8 	bne.w	8002d70 <HAL_HCD_HC_SubmitRequest+0x214>
 8002c00:	78bb      	ldrb	r3, [r7, #2]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f040 80b4 	bne.w	8002d70 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002c08:	8b3b      	ldrh	r3, [r7, #24]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d108      	bne.n	8002c20 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002c0e:	78fb      	ldrb	r3, [r7, #3]
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	212c      	movs	r1, #44	; 0x2c
 8002c14:	fb01 f303 	mul.w	r3, r1, r3
 8002c18:	4413      	add	r3, r2
 8002c1a:	3355      	adds	r3, #85	; 0x55
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002c20:	78fb      	ldrb	r3, [r7, #3]
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	212c      	movs	r1, #44	; 0x2c
 8002c26:	fb01 f303 	mul.w	r3, r1, r3
 8002c2a:	4413      	add	r3, r2
 8002c2c:	3355      	adds	r3, #85	; 0x55
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d109      	bne.n	8002c48 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c34:	78fb      	ldrb	r3, [r7, #3]
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	212c      	movs	r1, #44	; 0x2c
 8002c3a:	fb01 f303 	mul.w	r3, r1, r3
 8002c3e:	4413      	add	r3, r2
 8002c40:	3342      	adds	r3, #66	; 0x42
 8002c42:	2200      	movs	r2, #0
 8002c44:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002c46:	e093      	b.n	8002d70 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c48:	78fb      	ldrb	r3, [r7, #3]
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	212c      	movs	r1, #44	; 0x2c
 8002c4e:	fb01 f303 	mul.w	r3, r1, r3
 8002c52:	4413      	add	r3, r2
 8002c54:	3342      	adds	r3, #66	; 0x42
 8002c56:	2202      	movs	r2, #2
 8002c58:	701a      	strb	r2, [r3, #0]
      break;
 8002c5a:	e089      	b.n	8002d70 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002c5c:	78bb      	ldrb	r3, [r7, #2]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d11d      	bne.n	8002c9e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002c62:	78fb      	ldrb	r3, [r7, #3]
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	212c      	movs	r1, #44	; 0x2c
 8002c68:	fb01 f303 	mul.w	r3, r1, r3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	3355      	adds	r3, #85	; 0x55
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d109      	bne.n	8002c8a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c76:	78fb      	ldrb	r3, [r7, #3]
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	212c      	movs	r1, #44	; 0x2c
 8002c7c:	fb01 f303 	mul.w	r3, r1, r3
 8002c80:	4413      	add	r3, r2
 8002c82:	3342      	adds	r3, #66	; 0x42
 8002c84:	2200      	movs	r2, #0
 8002c86:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002c88:	e073      	b.n	8002d72 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c8a:	78fb      	ldrb	r3, [r7, #3]
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	212c      	movs	r1, #44	; 0x2c
 8002c90:	fb01 f303 	mul.w	r3, r1, r3
 8002c94:	4413      	add	r3, r2
 8002c96:	3342      	adds	r3, #66	; 0x42
 8002c98:	2202      	movs	r2, #2
 8002c9a:	701a      	strb	r2, [r3, #0]
      break;
 8002c9c:	e069      	b.n	8002d72 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002c9e:	78fb      	ldrb	r3, [r7, #3]
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	212c      	movs	r1, #44	; 0x2c
 8002ca4:	fb01 f303 	mul.w	r3, r1, r3
 8002ca8:	4413      	add	r3, r2
 8002caa:	3354      	adds	r3, #84	; 0x54
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d109      	bne.n	8002cc6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002cb2:	78fb      	ldrb	r3, [r7, #3]
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	212c      	movs	r1, #44	; 0x2c
 8002cb8:	fb01 f303 	mul.w	r3, r1, r3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	3342      	adds	r3, #66	; 0x42
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	701a      	strb	r2, [r3, #0]
      break;
 8002cc4:	e055      	b.n	8002d72 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002cc6:	78fb      	ldrb	r3, [r7, #3]
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	212c      	movs	r1, #44	; 0x2c
 8002ccc:	fb01 f303 	mul.w	r3, r1, r3
 8002cd0:	4413      	add	r3, r2
 8002cd2:	3342      	adds	r3, #66	; 0x42
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	701a      	strb	r2, [r3, #0]
      break;
 8002cd8:	e04b      	b.n	8002d72 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002cda:	78bb      	ldrb	r3, [r7, #2]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d11d      	bne.n	8002d1c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002ce0:	78fb      	ldrb	r3, [r7, #3]
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	212c      	movs	r1, #44	; 0x2c
 8002ce6:	fb01 f303 	mul.w	r3, r1, r3
 8002cea:	4413      	add	r3, r2
 8002cec:	3355      	adds	r3, #85	; 0x55
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d109      	bne.n	8002d08 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002cf4:	78fb      	ldrb	r3, [r7, #3]
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	212c      	movs	r1, #44	; 0x2c
 8002cfa:	fb01 f303 	mul.w	r3, r1, r3
 8002cfe:	4413      	add	r3, r2
 8002d00:	3342      	adds	r3, #66	; 0x42
 8002d02:	2200      	movs	r2, #0
 8002d04:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002d06:	e034      	b.n	8002d72 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d08:	78fb      	ldrb	r3, [r7, #3]
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	212c      	movs	r1, #44	; 0x2c
 8002d0e:	fb01 f303 	mul.w	r3, r1, r3
 8002d12:	4413      	add	r3, r2
 8002d14:	3342      	adds	r3, #66	; 0x42
 8002d16:	2202      	movs	r2, #2
 8002d18:	701a      	strb	r2, [r3, #0]
      break;
 8002d1a:	e02a      	b.n	8002d72 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002d1c:	78fb      	ldrb	r3, [r7, #3]
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	212c      	movs	r1, #44	; 0x2c
 8002d22:	fb01 f303 	mul.w	r3, r1, r3
 8002d26:	4413      	add	r3, r2
 8002d28:	3354      	adds	r3, #84	; 0x54
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d109      	bne.n	8002d44 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d30:	78fb      	ldrb	r3, [r7, #3]
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	212c      	movs	r1, #44	; 0x2c
 8002d36:	fb01 f303 	mul.w	r3, r1, r3
 8002d3a:	4413      	add	r3, r2
 8002d3c:	3342      	adds	r3, #66	; 0x42
 8002d3e:	2200      	movs	r2, #0
 8002d40:	701a      	strb	r2, [r3, #0]
      break;
 8002d42:	e016      	b.n	8002d72 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d44:	78fb      	ldrb	r3, [r7, #3]
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	212c      	movs	r1, #44	; 0x2c
 8002d4a:	fb01 f303 	mul.w	r3, r1, r3
 8002d4e:	4413      	add	r3, r2
 8002d50:	3342      	adds	r3, #66	; 0x42
 8002d52:	2202      	movs	r2, #2
 8002d54:	701a      	strb	r2, [r3, #0]
      break;
 8002d56:	e00c      	b.n	8002d72 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d58:	78fb      	ldrb	r3, [r7, #3]
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	212c      	movs	r1, #44	; 0x2c
 8002d5e:	fb01 f303 	mul.w	r3, r1, r3
 8002d62:	4413      	add	r3, r2
 8002d64:	3342      	adds	r3, #66	; 0x42
 8002d66:	2200      	movs	r2, #0
 8002d68:	701a      	strb	r2, [r3, #0]
      break;
 8002d6a:	e002      	b.n	8002d72 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002d6c:	bf00      	nop
 8002d6e:	e000      	b.n	8002d72 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002d70:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002d72:	78fb      	ldrb	r3, [r7, #3]
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	212c      	movs	r1, #44	; 0x2c
 8002d78:	fb01 f303 	mul.w	r3, r1, r3
 8002d7c:	4413      	add	r3, r2
 8002d7e:	3344      	adds	r3, #68	; 0x44
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002d84:	78fb      	ldrb	r3, [r7, #3]
 8002d86:	8b3a      	ldrh	r2, [r7, #24]
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	202c      	movs	r0, #44	; 0x2c
 8002d8c:	fb00 f303 	mul.w	r3, r0, r3
 8002d90:	440b      	add	r3, r1
 8002d92:	334c      	adds	r3, #76	; 0x4c
 8002d94:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002d96:	78fb      	ldrb	r3, [r7, #3]
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	212c      	movs	r1, #44	; 0x2c
 8002d9c:	fb01 f303 	mul.w	r3, r1, r3
 8002da0:	4413      	add	r3, r2
 8002da2:	3360      	adds	r3, #96	; 0x60
 8002da4:	2200      	movs	r2, #0
 8002da6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002da8:	78fb      	ldrb	r3, [r7, #3]
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	212c      	movs	r1, #44	; 0x2c
 8002dae:	fb01 f303 	mul.w	r3, r1, r3
 8002db2:	4413      	add	r3, r2
 8002db4:	3350      	adds	r3, #80	; 0x50
 8002db6:	2200      	movs	r2, #0
 8002db8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002dba:	78fb      	ldrb	r3, [r7, #3]
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	212c      	movs	r1, #44	; 0x2c
 8002dc0:	fb01 f303 	mul.w	r3, r1, r3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	3339      	adds	r3, #57	; 0x39
 8002dc8:	78fa      	ldrb	r2, [r7, #3]
 8002dca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002dcc:	78fb      	ldrb	r3, [r7, #3]
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	212c      	movs	r1, #44	; 0x2c
 8002dd2:	fb01 f303 	mul.w	r3, r1, r3
 8002dd6:	4413      	add	r3, r2
 8002dd8:	3361      	adds	r3, #97	; 0x61
 8002dda:	2200      	movs	r2, #0
 8002ddc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6818      	ldr	r0, [r3, #0]
 8002de2:	78fb      	ldrb	r3, [r7, #3]
 8002de4:	222c      	movs	r2, #44	; 0x2c
 8002de6:	fb02 f303 	mul.w	r3, r2, r3
 8002dea:	3338      	adds	r3, #56	; 0x38
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	18d1      	adds	r1, r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	461a      	mov	r2, r3
 8002df8:	f005 fc00 	bl	80085fc <USB_HC_StartXfer>
 8002dfc:	4603      	mov	r3, r0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop

08002e08 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f005 f901 	bl	8008026 <USB_GetMode>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	f040 80f6 	bne.w	8003018 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f005 f8e5 	bl	8008000 <USB_ReadInterrupts>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 80ec 	beq.w	8003016 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f005 f8dc 	bl	8008000 <USB_ReadInterrupts>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e52:	d104      	bne.n	8002e5e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002e5c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f005 f8cc 	bl	8008000 <USB_ReadInterrupts>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e72:	d104      	bne.n	8002e7e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002e7c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f005 f8bc 	bl	8008000 <USB_ReadInterrupts>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e92:	d104      	bne.n	8002e9e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002e9c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f005 f8ac 	bl	8008000 <USB_ReadInterrupts>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d103      	bne.n	8002eba <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f005 f89e 	bl	8008000 <USB_ReadInterrupts>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002eca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ece:	d11c      	bne.n	8002f0a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002ed8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10f      	bne.n	8002f0a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002eea:	2110      	movs	r1, #16
 8002eec:	6938      	ldr	r0, [r7, #16]
 8002eee:	f004 ff8d 	bl	8007e0c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002ef2:	6938      	ldr	r0, [r7, #16]
 8002ef4:	f004 ffbe 	bl	8007e74 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2101      	movs	r1, #1
 8002efe:	4618      	mov	r0, r3
 8002f00:	f005 f994 	bl	800822c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f007 ff63 	bl	800add0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f005 f876 	bl	8008000 <USB_ReadInterrupts>
 8002f14:	4603      	mov	r3, r0
 8002f16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f1a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f1e:	d102      	bne.n	8002f26 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f001 f89e 	bl	8004062 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f005 f868 	bl	8008000 <USB_ReadInterrupts>
 8002f30:	4603      	mov	r3, r0
 8002f32:	f003 0308 	and.w	r3, r3, #8
 8002f36:	2b08      	cmp	r3, #8
 8002f38:	d106      	bne.n	8002f48 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f007 ff2c 	bl	800ad98 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2208      	movs	r2, #8
 8002f46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f005 f857 	bl	8008000 <USB_ReadInterrupts>
 8002f52:	4603      	mov	r3, r0
 8002f54:	f003 0310 	and.w	r3, r3, #16
 8002f58:	2b10      	cmp	r3, #16
 8002f5a:	d101      	bne.n	8002f60 <HAL_HCD_IRQHandler+0x158>
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e000      	b.n	8002f62 <HAL_HCD_IRQHandler+0x15a>
 8002f60:	2300      	movs	r3, #0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d012      	beq.n	8002f8c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	699a      	ldr	r2, [r3, #24]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 0210 	bic.w	r2, r2, #16
 8002f74:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 ffa1 	bl	8003ebe <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	699a      	ldr	r2, [r3, #24]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0210 	orr.w	r2, r2, #16
 8002f8a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f005 f835 	bl	8008000 <USB_ReadInterrupts>
 8002f96:	4603      	mov	r3, r0
 8002f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fa0:	d13a      	bne.n	8003018 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f005 fc6a 	bl	8008880 <USB_HC_ReadInterrupt>
 8002fac:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002fae:	2300      	movs	r3, #0
 8002fb0:	617b      	str	r3, [r7, #20]
 8002fb2:	e025      	b.n	8003000 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	68ba      	ldr	r2, [r7, #8]
 8002fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d018      	beq.n	8002ffa <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	015a      	lsls	r2, r3, #5
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4413      	add	r3, r2
 8002fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fde:	d106      	bne.n	8002fee <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 f8ab 	bl	8003142 <HCD_HC_IN_IRQHandler>
 8002fec:	e005      	b.n	8002ffa <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 fbf9 	bl	80037ec <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	617b      	str	r3, [r7, #20]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	429a      	cmp	r2, r3
 8003008:	d3d4      	bcc.n	8002fb4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003012:	615a      	str	r2, [r3, #20]
 8003014:	e000      	b.n	8003018 <HAL_HCD_IRQHandler+0x210>
      return;
 8003016:	bf00      	nop
    }
  }
}
 8003018:	3718      	adds	r7, #24
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b082      	sub	sp, #8
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800302c:	2b01      	cmp	r3, #1
 800302e:	d101      	bne.n	8003034 <HAL_HCD_Start+0x16>
 8003030:	2302      	movs	r3, #2
 8003032:	e013      	b.n	800305c <HAL_HCD_Start+0x3e>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2101      	movs	r1, #1
 8003042:	4618      	mov	r0, r3
 8003044:	f005 f956 	bl	80082f4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f004 fe6e 	bl	8007d2e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003072:	2b01      	cmp	r3, #1
 8003074:	d101      	bne.n	800307a <HAL_HCD_Stop+0x16>
 8003076:	2302      	movs	r3, #2
 8003078:	e00d      	b.n	8003096 <HAL_HCD_Stop+0x32>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f005 fd44 	bl	8008b14 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b082      	sub	sp, #8
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f005 f8f8 	bl	80082a0 <USB_ResetPort>
 80030b0:	4603      	mov	r3, r0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b083      	sub	sp, #12
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
 80030c2:	460b      	mov	r3, r1
 80030c4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80030c6:	78fb      	ldrb	r3, [r7, #3]
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	212c      	movs	r1, #44	; 0x2c
 80030cc:	fb01 f303 	mul.w	r3, r1, r3
 80030d0:	4413      	add	r3, r2
 80030d2:	3360      	adds	r3, #96	; 0x60
 80030d4:	781b      	ldrb	r3, [r3, #0]
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
 80030ea:	460b      	mov	r3, r1
 80030ec:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80030ee:	78fb      	ldrb	r3, [r7, #3]
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	212c      	movs	r1, #44	; 0x2c
 80030f4:	fb01 f303 	mul.w	r3, r1, r3
 80030f8:	4413      	add	r3, r2
 80030fa:	3350      	adds	r3, #80	; 0x50
 80030fc:	681b      	ldr	r3, [r3, #0]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr

0800310a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b082      	sub	sp, #8
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4618      	mov	r0, r3
 8003118:	f005 f93c 	bl	8008394 <USB_GetCurrentFrame>
 800311c:	4603      	mov	r3, r0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b082      	sub	sp, #8
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f005 f917 	bl	8008366 <USB_GetHostSpeed>
 8003138:	4603      	mov	r3, r0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b086      	sub	sp, #24
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
 800314a:	460b      	mov	r3, r1
 800314c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003158:	78fb      	ldrb	r3, [r7, #3]
 800315a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	015a      	lsls	r2, r3, #5
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	4413      	add	r3, r2
 8003164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 0304 	and.w	r3, r3, #4
 800316e:	2b04      	cmp	r3, #4
 8003170:	d11a      	bne.n	80031a8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	015a      	lsls	r2, r3, #5
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	4413      	add	r3, r2
 800317a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800317e:	461a      	mov	r2, r3
 8003180:	2304      	movs	r3, #4
 8003182:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	212c      	movs	r1, #44	; 0x2c
 800318a:	fb01 f303 	mul.w	r3, r1, r3
 800318e:	4413      	add	r3, r2
 8003190:	3361      	adds	r3, #97	; 0x61
 8003192:	2206      	movs	r2, #6
 8003194:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	b2d2      	uxtb	r2, r2
 800319e:	4611      	mov	r1, r2
 80031a0:	4618      	mov	r0, r3
 80031a2:	f005 fb7e 	bl	80088a2 <USB_HC_Halt>
 80031a6:	e0af      	b.n	8003308 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	015a      	lsls	r2, r3, #5
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	4413      	add	r3, r2
 80031b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031be:	d11b      	bne.n	80031f8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	015a      	lsls	r2, r3, #5
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	4413      	add	r3, r2
 80031c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031cc:	461a      	mov	r2, r3
 80031ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	212c      	movs	r1, #44	; 0x2c
 80031da:	fb01 f303 	mul.w	r3, r1, r3
 80031de:	4413      	add	r3, r2
 80031e0:	3361      	adds	r3, #97	; 0x61
 80031e2:	2207      	movs	r2, #7
 80031e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	b2d2      	uxtb	r2, r2
 80031ee:	4611      	mov	r1, r2
 80031f0:	4618      	mov	r0, r3
 80031f2:	f005 fb56 	bl	80088a2 <USB_HC_Halt>
 80031f6:	e087      	b.n	8003308 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	015a      	lsls	r2, r3, #5
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	4413      	add	r3, r2
 8003200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 0320 	and.w	r3, r3, #32
 800320a:	2b20      	cmp	r3, #32
 800320c:	d109      	bne.n	8003222 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	015a      	lsls	r2, r3, #5
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	4413      	add	r3, r2
 8003216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800321a:	461a      	mov	r2, r3
 800321c:	2320      	movs	r3, #32
 800321e:	6093      	str	r3, [r2, #8]
 8003220:	e072      	b.n	8003308 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	015a      	lsls	r2, r3, #5
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	4413      	add	r3, r2
 800322a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f003 0308 	and.w	r3, r3, #8
 8003234:	2b08      	cmp	r3, #8
 8003236:	d11a      	bne.n	800326e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	015a      	lsls	r2, r3, #5
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	4413      	add	r3, r2
 8003240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003244:	461a      	mov	r2, r3
 8003246:	2308      	movs	r3, #8
 8003248:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	212c      	movs	r1, #44	; 0x2c
 8003250:	fb01 f303 	mul.w	r3, r1, r3
 8003254:	4413      	add	r3, r2
 8003256:	3361      	adds	r3, #97	; 0x61
 8003258:	2205      	movs	r2, #5
 800325a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	4611      	mov	r1, r2
 8003266:	4618      	mov	r0, r3
 8003268:	f005 fb1b 	bl	80088a2 <USB_HC_Halt>
 800326c:	e04c      	b.n	8003308 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	015a      	lsls	r2, r3, #5
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	4413      	add	r3, r2
 8003276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003280:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003284:	d11b      	bne.n	80032be <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	015a      	lsls	r2, r3, #5
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	4413      	add	r3, r2
 800328e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003292:	461a      	mov	r2, r3
 8003294:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003298:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	212c      	movs	r1, #44	; 0x2c
 80032a0:	fb01 f303 	mul.w	r3, r1, r3
 80032a4:	4413      	add	r3, r2
 80032a6:	3361      	adds	r3, #97	; 0x61
 80032a8:	2208      	movs	r2, #8
 80032aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	4611      	mov	r1, r2
 80032b6:	4618      	mov	r0, r3
 80032b8:	f005 faf3 	bl	80088a2 <USB_HC_Halt>
 80032bc:	e024      	b.n	8003308 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	015a      	lsls	r2, r3, #5
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	4413      	add	r3, r2
 80032c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d0:	2b80      	cmp	r3, #128	; 0x80
 80032d2:	d119      	bne.n	8003308 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	015a      	lsls	r2, r3, #5
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	4413      	add	r3, r2
 80032dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e0:	461a      	mov	r2, r3
 80032e2:	2380      	movs	r3, #128	; 0x80
 80032e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	212c      	movs	r1, #44	; 0x2c
 80032ec:	fb01 f303 	mul.w	r3, r1, r3
 80032f0:	4413      	add	r3, r2
 80032f2:	3361      	adds	r3, #97	; 0x61
 80032f4:	2206      	movs	r2, #6
 80032f6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	4611      	mov	r1, r2
 8003302:	4618      	mov	r0, r3
 8003304:	f005 facd 	bl	80088a2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	015a      	lsls	r2, r3, #5
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	4413      	add	r3, r2
 8003310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800331a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800331e:	d112      	bne.n	8003346 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	4611      	mov	r1, r2
 800332a:	4618      	mov	r0, r3
 800332c:	f005 fab9 	bl	80088a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	015a      	lsls	r2, r3, #5
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	4413      	add	r3, r2
 8003338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800333c:	461a      	mov	r2, r3
 800333e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003342:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003344:	e24e      	b.n	80037e4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	015a      	lsls	r2, r3, #5
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	4413      	add	r3, r2
 800334e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	2b01      	cmp	r3, #1
 800335a:	f040 80df 	bne.w	800351c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d019      	beq.n	800339a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	212c      	movs	r1, #44	; 0x2c
 800336c:	fb01 f303 	mul.w	r3, r1, r3
 8003370:	4413      	add	r3, r2
 8003372:	3348      	adds	r3, #72	; 0x48
 8003374:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	0159      	lsls	r1, r3, #5
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	440b      	add	r3, r1
 800337e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003388:	1ad2      	subs	r2, r2, r3
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	202c      	movs	r0, #44	; 0x2c
 8003390:	fb00 f303 	mul.w	r3, r0, r3
 8003394:	440b      	add	r3, r1
 8003396:	3350      	adds	r3, #80	; 0x50
 8003398:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	212c      	movs	r1, #44	; 0x2c
 80033a0:	fb01 f303 	mul.w	r3, r1, r3
 80033a4:	4413      	add	r3, r2
 80033a6:	3361      	adds	r3, #97	; 0x61
 80033a8:	2201      	movs	r2, #1
 80033aa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	212c      	movs	r1, #44	; 0x2c
 80033b2:	fb01 f303 	mul.w	r3, r1, r3
 80033b6:	4413      	add	r3, r2
 80033b8:	335c      	adds	r3, #92	; 0x5c
 80033ba:	2200      	movs	r2, #0
 80033bc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	015a      	lsls	r2, r3, #5
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	4413      	add	r3, r2
 80033c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ca:	461a      	mov	r2, r3
 80033cc:	2301      	movs	r3, #1
 80033ce:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	212c      	movs	r1, #44	; 0x2c
 80033d6:	fb01 f303 	mul.w	r3, r1, r3
 80033da:	4413      	add	r3, r2
 80033dc:	333f      	adds	r3, #63	; 0x3f
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d009      	beq.n	80033f8 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	212c      	movs	r1, #44	; 0x2c
 80033ea:	fb01 f303 	mul.w	r3, r1, r3
 80033ee:	4413      	add	r3, r2
 80033f0:	333f      	adds	r3, #63	; 0x3f
 80033f2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d111      	bne.n	800341c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	b2d2      	uxtb	r2, r2
 8003400:	4611      	mov	r1, r2
 8003402:	4618      	mov	r0, r3
 8003404:	f005 fa4d 	bl	80088a2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	015a      	lsls	r2, r3, #5
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	4413      	add	r3, r2
 8003410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003414:	461a      	mov	r2, r3
 8003416:	2310      	movs	r3, #16
 8003418:	6093      	str	r3, [r2, #8]
 800341a:	e03a      	b.n	8003492 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	212c      	movs	r1, #44	; 0x2c
 8003422:	fb01 f303 	mul.w	r3, r1, r3
 8003426:	4413      	add	r3, r2
 8003428:	333f      	adds	r3, #63	; 0x3f
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	2b03      	cmp	r3, #3
 800342e:	d009      	beq.n	8003444 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	212c      	movs	r1, #44	; 0x2c
 8003436:	fb01 f303 	mul.w	r3, r1, r3
 800343a:	4413      	add	r3, r2
 800343c:	333f      	adds	r3, #63	; 0x3f
 800343e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003440:	2b01      	cmp	r3, #1
 8003442:	d126      	bne.n	8003492 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	015a      	lsls	r2, r3, #5
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	4413      	add	r3, r2
 800344c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	0151      	lsls	r1, r2, #5
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	440a      	add	r2, r1
 800345a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800345e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003462:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	212c      	movs	r1, #44	; 0x2c
 800346a:	fb01 f303 	mul.w	r3, r1, r3
 800346e:	4413      	add	r3, r2
 8003470:	3360      	adds	r3, #96	; 0x60
 8003472:	2201      	movs	r2, #1
 8003474:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	b2d9      	uxtb	r1, r3
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	202c      	movs	r0, #44	; 0x2c
 8003480:	fb00 f303 	mul.w	r3, r0, r3
 8003484:	4413      	add	r3, r2
 8003486:	3360      	adds	r3, #96	; 0x60
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	461a      	mov	r2, r3
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f007 fcad 	bl	800adec <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d12b      	bne.n	80034f2 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	212c      	movs	r1, #44	; 0x2c
 80034a0:	fb01 f303 	mul.w	r3, r1, r3
 80034a4:	4413      	add	r3, r2
 80034a6:	3348      	adds	r3, #72	; 0x48
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	202c      	movs	r0, #44	; 0x2c
 80034b0:	fb00 f202 	mul.w	r2, r0, r2
 80034b4:	440a      	add	r2, r1
 80034b6:	3240      	adds	r2, #64	; 0x40
 80034b8:	8812      	ldrh	r2, [r2, #0]
 80034ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f000 818e 	beq.w	80037e4 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	212c      	movs	r1, #44	; 0x2c
 80034ce:	fb01 f303 	mul.w	r3, r1, r3
 80034d2:	4413      	add	r3, r2
 80034d4:	3354      	adds	r3, #84	; 0x54
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	f083 0301 	eor.w	r3, r3, #1
 80034dc:	b2d8      	uxtb	r0, r3
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	212c      	movs	r1, #44	; 0x2c
 80034e4:	fb01 f303 	mul.w	r3, r1, r3
 80034e8:	4413      	add	r3, r2
 80034ea:	3354      	adds	r3, #84	; 0x54
 80034ec:	4602      	mov	r2, r0
 80034ee:	701a      	strb	r2, [r3, #0]
}
 80034f0:	e178      	b.n	80037e4 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	212c      	movs	r1, #44	; 0x2c
 80034f8:	fb01 f303 	mul.w	r3, r1, r3
 80034fc:	4413      	add	r3, r2
 80034fe:	3354      	adds	r3, #84	; 0x54
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	f083 0301 	eor.w	r3, r3, #1
 8003506:	b2d8      	uxtb	r0, r3
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	212c      	movs	r1, #44	; 0x2c
 800350e:	fb01 f303 	mul.w	r3, r1, r3
 8003512:	4413      	add	r3, r2
 8003514:	3354      	adds	r3, #84	; 0x54
 8003516:	4602      	mov	r2, r0
 8003518:	701a      	strb	r2, [r3, #0]
}
 800351a:	e163      	b.n	80037e4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	015a      	lsls	r2, r3, #5
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	4413      	add	r3, r2
 8003524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b02      	cmp	r3, #2
 8003530:	f040 80f6 	bne.w	8003720 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	212c      	movs	r1, #44	; 0x2c
 800353a:	fb01 f303 	mul.w	r3, r1, r3
 800353e:	4413      	add	r3, r2
 8003540:	3361      	adds	r3, #97	; 0x61
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d109      	bne.n	800355c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	212c      	movs	r1, #44	; 0x2c
 800354e:	fb01 f303 	mul.w	r3, r1, r3
 8003552:	4413      	add	r3, r2
 8003554:	3360      	adds	r3, #96	; 0x60
 8003556:	2201      	movs	r2, #1
 8003558:	701a      	strb	r2, [r3, #0]
 800355a:	e0c9      	b.n	80036f0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	212c      	movs	r1, #44	; 0x2c
 8003562:	fb01 f303 	mul.w	r3, r1, r3
 8003566:	4413      	add	r3, r2
 8003568:	3361      	adds	r3, #97	; 0x61
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	2b05      	cmp	r3, #5
 800356e:	d109      	bne.n	8003584 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	212c      	movs	r1, #44	; 0x2c
 8003576:	fb01 f303 	mul.w	r3, r1, r3
 800357a:	4413      	add	r3, r2
 800357c:	3360      	adds	r3, #96	; 0x60
 800357e:	2205      	movs	r2, #5
 8003580:	701a      	strb	r2, [r3, #0]
 8003582:	e0b5      	b.n	80036f0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	212c      	movs	r1, #44	; 0x2c
 800358a:	fb01 f303 	mul.w	r3, r1, r3
 800358e:	4413      	add	r3, r2
 8003590:	3361      	adds	r3, #97	; 0x61
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b06      	cmp	r3, #6
 8003596:	d009      	beq.n	80035ac <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	212c      	movs	r1, #44	; 0x2c
 800359e:	fb01 f303 	mul.w	r3, r1, r3
 80035a2:	4413      	add	r3, r2
 80035a4:	3361      	adds	r3, #97	; 0x61
 80035a6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80035a8:	2b08      	cmp	r3, #8
 80035aa:	d150      	bne.n	800364e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	212c      	movs	r1, #44	; 0x2c
 80035b2:	fb01 f303 	mul.w	r3, r1, r3
 80035b6:	4413      	add	r3, r2
 80035b8:	335c      	adds	r3, #92	; 0x5c
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	1c5a      	adds	r2, r3, #1
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	202c      	movs	r0, #44	; 0x2c
 80035c4:	fb00 f303 	mul.w	r3, r0, r3
 80035c8:	440b      	add	r3, r1
 80035ca:	335c      	adds	r3, #92	; 0x5c
 80035cc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	212c      	movs	r1, #44	; 0x2c
 80035d4:	fb01 f303 	mul.w	r3, r1, r3
 80035d8:	4413      	add	r3, r2
 80035da:	335c      	adds	r3, #92	; 0x5c
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d912      	bls.n	8003608 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	212c      	movs	r1, #44	; 0x2c
 80035e8:	fb01 f303 	mul.w	r3, r1, r3
 80035ec:	4413      	add	r3, r2
 80035ee:	335c      	adds	r3, #92	; 0x5c
 80035f0:	2200      	movs	r2, #0
 80035f2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	212c      	movs	r1, #44	; 0x2c
 80035fa:	fb01 f303 	mul.w	r3, r1, r3
 80035fe:	4413      	add	r3, r2
 8003600:	3360      	adds	r3, #96	; 0x60
 8003602:	2204      	movs	r2, #4
 8003604:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003606:	e073      	b.n	80036f0 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	212c      	movs	r1, #44	; 0x2c
 800360e:	fb01 f303 	mul.w	r3, r1, r3
 8003612:	4413      	add	r3, r2
 8003614:	3360      	adds	r3, #96	; 0x60
 8003616:	2202      	movs	r2, #2
 8003618:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	015a      	lsls	r2, r3, #5
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	4413      	add	r3, r2
 8003622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003630:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003638:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	015a      	lsls	r2, r3, #5
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	4413      	add	r3, r2
 8003642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003646:	461a      	mov	r2, r3
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800364c:	e050      	b.n	80036f0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	212c      	movs	r1, #44	; 0x2c
 8003654:	fb01 f303 	mul.w	r3, r1, r3
 8003658:	4413      	add	r3, r2
 800365a:	3361      	adds	r3, #97	; 0x61
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	2b03      	cmp	r3, #3
 8003660:	d122      	bne.n	80036a8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	212c      	movs	r1, #44	; 0x2c
 8003668:	fb01 f303 	mul.w	r3, r1, r3
 800366c:	4413      	add	r3, r2
 800366e:	3360      	adds	r3, #96	; 0x60
 8003670:	2202      	movs	r2, #2
 8003672:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	015a      	lsls	r2, r3, #5
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	4413      	add	r3, r2
 800367c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800368a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003692:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	015a      	lsls	r2, r3, #5
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	4413      	add	r3, r2
 800369c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a0:	461a      	mov	r2, r3
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	6013      	str	r3, [r2, #0]
 80036a6:	e023      	b.n	80036f0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	212c      	movs	r1, #44	; 0x2c
 80036ae:	fb01 f303 	mul.w	r3, r1, r3
 80036b2:	4413      	add	r3, r2
 80036b4:	3361      	adds	r3, #97	; 0x61
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	2b07      	cmp	r3, #7
 80036ba:	d119      	bne.n	80036f0 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	212c      	movs	r1, #44	; 0x2c
 80036c2:	fb01 f303 	mul.w	r3, r1, r3
 80036c6:	4413      	add	r3, r2
 80036c8:	335c      	adds	r3, #92	; 0x5c
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	1c5a      	adds	r2, r3, #1
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	202c      	movs	r0, #44	; 0x2c
 80036d4:	fb00 f303 	mul.w	r3, r0, r3
 80036d8:	440b      	add	r3, r1
 80036da:	335c      	adds	r3, #92	; 0x5c
 80036dc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	212c      	movs	r1, #44	; 0x2c
 80036e4:	fb01 f303 	mul.w	r3, r1, r3
 80036e8:	4413      	add	r3, r2
 80036ea:	3360      	adds	r3, #96	; 0x60
 80036ec:	2204      	movs	r2, #4
 80036ee:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	015a      	lsls	r2, r3, #5
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	4413      	add	r3, r2
 80036f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036fc:	461a      	mov	r2, r3
 80036fe:	2302      	movs	r3, #2
 8003700:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	b2d9      	uxtb	r1, r3
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	202c      	movs	r0, #44	; 0x2c
 800370c:	fb00 f303 	mul.w	r3, r0, r3
 8003710:	4413      	add	r3, r2
 8003712:	3360      	adds	r3, #96	; 0x60
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	461a      	mov	r2, r3
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f007 fb67 	bl	800adec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800371e:	e061      	b.n	80037e4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	015a      	lsls	r2, r3, #5
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	4413      	add	r3, r2
 8003728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f003 0310 	and.w	r3, r3, #16
 8003732:	2b10      	cmp	r3, #16
 8003734:	d156      	bne.n	80037e4 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	212c      	movs	r1, #44	; 0x2c
 800373c:	fb01 f303 	mul.w	r3, r1, r3
 8003740:	4413      	add	r3, r2
 8003742:	333f      	adds	r3, #63	; 0x3f
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	2b03      	cmp	r3, #3
 8003748:	d111      	bne.n	800376e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	212c      	movs	r1, #44	; 0x2c
 8003750:	fb01 f303 	mul.w	r3, r1, r3
 8003754:	4413      	add	r3, r2
 8003756:	335c      	adds	r3, #92	; 0x5c
 8003758:	2200      	movs	r2, #0
 800375a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	4611      	mov	r1, r2
 8003766:	4618      	mov	r0, r3
 8003768:	f005 f89b 	bl	80088a2 <USB_HC_Halt>
 800376c:	e031      	b.n	80037d2 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	212c      	movs	r1, #44	; 0x2c
 8003774:	fb01 f303 	mul.w	r3, r1, r3
 8003778:	4413      	add	r3, r2
 800377a:	333f      	adds	r3, #63	; 0x3f
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d009      	beq.n	8003796 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	212c      	movs	r1, #44	; 0x2c
 8003788:	fb01 f303 	mul.w	r3, r1, r3
 800378c:	4413      	add	r3, r2
 800378e:	333f      	adds	r3, #63	; 0x3f
 8003790:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003792:	2b02      	cmp	r3, #2
 8003794:	d11d      	bne.n	80037d2 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	212c      	movs	r1, #44	; 0x2c
 800379c:	fb01 f303 	mul.w	r3, r1, r3
 80037a0:	4413      	add	r3, r2
 80037a2:	335c      	adds	r3, #92	; 0x5c
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d110      	bne.n	80037d2 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	212c      	movs	r1, #44	; 0x2c
 80037b6:	fb01 f303 	mul.w	r3, r1, r3
 80037ba:	4413      	add	r3, r2
 80037bc:	3361      	adds	r3, #97	; 0x61
 80037be:	2203      	movs	r2, #3
 80037c0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	b2d2      	uxtb	r2, r2
 80037ca:	4611      	mov	r1, r2
 80037cc:	4618      	mov	r0, r3
 80037ce:	f005 f868 	bl	80088a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	015a      	lsls	r2, r3, #5
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	4413      	add	r3, r2
 80037da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037de:	461a      	mov	r2, r3
 80037e0:	2310      	movs	r3, #16
 80037e2:	6093      	str	r3, [r2, #8]
}
 80037e4:	bf00      	nop
 80037e6:	3718      	adds	r7, #24
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b088      	sub	sp, #32
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	460b      	mov	r3, r1
 80037f6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003802:	78fb      	ldrb	r3, [r7, #3]
 8003804:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	015a      	lsls	r2, r3, #5
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	4413      	add	r3, r2
 800380e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f003 0304 	and.w	r3, r3, #4
 8003818:	2b04      	cmp	r3, #4
 800381a:	d11a      	bne.n	8003852 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	4413      	add	r3, r2
 8003824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003828:	461a      	mov	r2, r3
 800382a:	2304      	movs	r3, #4
 800382c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	212c      	movs	r1, #44	; 0x2c
 8003834:	fb01 f303 	mul.w	r3, r1, r3
 8003838:	4413      	add	r3, r2
 800383a:	3361      	adds	r3, #97	; 0x61
 800383c:	2206      	movs	r2, #6
 800383e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	b2d2      	uxtb	r2, r2
 8003848:	4611      	mov	r1, r2
 800384a:	4618      	mov	r0, r3
 800384c:	f005 f829 	bl	80088a2 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003850:	e331      	b.n	8003eb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	015a      	lsls	r2, r3, #5
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	4413      	add	r3, r2
 800385a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f003 0320 	and.w	r3, r3, #32
 8003864:	2b20      	cmp	r3, #32
 8003866:	d12e      	bne.n	80038c6 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	015a      	lsls	r2, r3, #5
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	4413      	add	r3, r2
 8003870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003874:	461a      	mov	r2, r3
 8003876:	2320      	movs	r3, #32
 8003878:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	212c      	movs	r1, #44	; 0x2c
 8003880:	fb01 f303 	mul.w	r3, r1, r3
 8003884:	4413      	add	r3, r2
 8003886:	333d      	adds	r3, #61	; 0x3d
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	2b01      	cmp	r3, #1
 800388c:	f040 8313 	bne.w	8003eb6 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	212c      	movs	r1, #44	; 0x2c
 8003896:	fb01 f303 	mul.w	r3, r1, r3
 800389a:	4413      	add	r3, r2
 800389c:	333d      	adds	r3, #61	; 0x3d
 800389e:	2200      	movs	r2, #0
 80038a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	212c      	movs	r1, #44	; 0x2c
 80038a8:	fb01 f303 	mul.w	r3, r1, r3
 80038ac:	4413      	add	r3, r2
 80038ae:	3360      	adds	r3, #96	; 0x60
 80038b0:	2202      	movs	r2, #2
 80038b2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	b2d2      	uxtb	r2, r2
 80038bc:	4611      	mov	r1, r2
 80038be:	4618      	mov	r0, r3
 80038c0:	f004 ffef 	bl	80088a2 <USB_HC_Halt>
}
 80038c4:	e2f7      	b.n	8003eb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	015a      	lsls	r2, r3, #5
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	4413      	add	r3, r2
 80038ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038dc:	d112      	bne.n	8003904 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	015a      	lsls	r2, r3, #5
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	4413      	add	r3, r2
 80038e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ea:	461a      	mov	r2, r3
 80038ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038f0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	b2d2      	uxtb	r2, r2
 80038fa:	4611      	mov	r1, r2
 80038fc:	4618      	mov	r0, r3
 80038fe:	f004 ffd0 	bl	80088a2 <USB_HC_Halt>
}
 8003902:	e2d8      	b.n	8003eb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	015a      	lsls	r2, r3, #5
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	4413      	add	r3, r2
 800390c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b01      	cmp	r3, #1
 8003918:	d140      	bne.n	800399c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	212c      	movs	r1, #44	; 0x2c
 8003920:	fb01 f303 	mul.w	r3, r1, r3
 8003924:	4413      	add	r3, r2
 8003926:	335c      	adds	r3, #92	; 0x5c
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	015a      	lsls	r2, r3, #5
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	4413      	add	r3, r2
 8003934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393e:	2b40      	cmp	r3, #64	; 0x40
 8003940:	d111      	bne.n	8003966 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	212c      	movs	r1, #44	; 0x2c
 8003948:	fb01 f303 	mul.w	r3, r1, r3
 800394c:	4413      	add	r3, r2
 800394e:	333d      	adds	r3, #61	; 0x3d
 8003950:	2201      	movs	r2, #1
 8003952:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	015a      	lsls	r2, r3, #5
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	4413      	add	r3, r2
 800395c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003960:	461a      	mov	r2, r3
 8003962:	2340      	movs	r3, #64	; 0x40
 8003964:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	015a      	lsls	r2, r3, #5
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	4413      	add	r3, r2
 800396e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003972:	461a      	mov	r2, r3
 8003974:	2301      	movs	r3, #1
 8003976:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	212c      	movs	r1, #44	; 0x2c
 800397e:	fb01 f303 	mul.w	r3, r1, r3
 8003982:	4413      	add	r3, r2
 8003984:	3361      	adds	r3, #97	; 0x61
 8003986:	2201      	movs	r2, #1
 8003988:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	b2d2      	uxtb	r2, r2
 8003992:	4611      	mov	r1, r2
 8003994:	4618      	mov	r0, r3
 8003996:	f004 ff84 	bl	80088a2 <USB_HC_Halt>
}
 800399a:	e28c      	b.n	8003eb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	015a      	lsls	r2, r3, #5
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	4413      	add	r3, r2
 80039a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ae:	2b40      	cmp	r3, #64	; 0x40
 80039b0:	d12c      	bne.n	8003a0c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	212c      	movs	r1, #44	; 0x2c
 80039b8:	fb01 f303 	mul.w	r3, r1, r3
 80039bc:	4413      	add	r3, r2
 80039be:	3361      	adds	r3, #97	; 0x61
 80039c0:	2204      	movs	r2, #4
 80039c2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	212c      	movs	r1, #44	; 0x2c
 80039ca:	fb01 f303 	mul.w	r3, r1, r3
 80039ce:	4413      	add	r3, r2
 80039d0:	333d      	adds	r3, #61	; 0x3d
 80039d2:	2201      	movs	r2, #1
 80039d4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	212c      	movs	r1, #44	; 0x2c
 80039dc:	fb01 f303 	mul.w	r3, r1, r3
 80039e0:	4413      	add	r3, r2
 80039e2:	335c      	adds	r3, #92	; 0x5c
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	b2d2      	uxtb	r2, r2
 80039f0:	4611      	mov	r1, r2
 80039f2:	4618      	mov	r0, r3
 80039f4:	f004 ff55 	bl	80088a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	015a      	lsls	r2, r3, #5
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	4413      	add	r3, r2
 8003a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a04:	461a      	mov	r2, r3
 8003a06:	2340      	movs	r3, #64	; 0x40
 8003a08:	6093      	str	r3, [r2, #8]
}
 8003a0a:	e254      	b.n	8003eb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	015a      	lsls	r2, r3, #5
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	4413      	add	r3, r2
 8003a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 0308 	and.w	r3, r3, #8
 8003a1e:	2b08      	cmp	r3, #8
 8003a20:	d11a      	bne.n	8003a58 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	015a      	lsls	r2, r3, #5
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	4413      	add	r3, r2
 8003a2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a2e:	461a      	mov	r2, r3
 8003a30:	2308      	movs	r3, #8
 8003a32:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	212c      	movs	r1, #44	; 0x2c
 8003a3a:	fb01 f303 	mul.w	r3, r1, r3
 8003a3e:	4413      	add	r3, r2
 8003a40:	3361      	adds	r3, #97	; 0x61
 8003a42:	2205      	movs	r2, #5
 8003a44:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	b2d2      	uxtb	r2, r2
 8003a4e:	4611      	mov	r1, r2
 8003a50:	4618      	mov	r0, r3
 8003a52:	f004 ff26 	bl	80088a2 <USB_HC_Halt>
}
 8003a56:	e22e      	b.n	8003eb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	015a      	lsls	r2, r3, #5
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	4413      	add	r3, r2
 8003a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f003 0310 	and.w	r3, r3, #16
 8003a6a:	2b10      	cmp	r3, #16
 8003a6c:	d140      	bne.n	8003af0 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	212c      	movs	r1, #44	; 0x2c
 8003a74:	fb01 f303 	mul.w	r3, r1, r3
 8003a78:	4413      	add	r3, r2
 8003a7a:	335c      	adds	r3, #92	; 0x5c
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	212c      	movs	r1, #44	; 0x2c
 8003a86:	fb01 f303 	mul.w	r3, r1, r3
 8003a8a:	4413      	add	r3, r2
 8003a8c:	3361      	adds	r3, #97	; 0x61
 8003a8e:	2203      	movs	r2, #3
 8003a90:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	212c      	movs	r1, #44	; 0x2c
 8003a98:	fb01 f303 	mul.w	r3, r1, r3
 8003a9c:	4413      	add	r3, r2
 8003a9e:	333d      	adds	r3, #61	; 0x3d
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d112      	bne.n	8003acc <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	212c      	movs	r1, #44	; 0x2c
 8003aac:	fb01 f303 	mul.w	r3, r1, r3
 8003ab0:	4413      	add	r3, r2
 8003ab2:	333c      	adds	r3, #60	; 0x3c
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d108      	bne.n	8003acc <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	212c      	movs	r1, #44	; 0x2c
 8003ac0:	fb01 f303 	mul.w	r3, r1, r3
 8003ac4:	4413      	add	r3, r2
 8003ac6:	333d      	adds	r3, #61	; 0x3d
 8003ac8:	2201      	movs	r2, #1
 8003aca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	b2d2      	uxtb	r2, r2
 8003ad4:	4611      	mov	r1, r2
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f004 fee3 	bl	80088a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	015a      	lsls	r2, r3, #5
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ae8:	461a      	mov	r2, r3
 8003aea:	2310      	movs	r3, #16
 8003aec:	6093      	str	r3, [r2, #8]
}
 8003aee:	e1e2      	b.n	8003eb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	015a      	lsls	r2, r3, #5
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b02:	2b80      	cmp	r3, #128	; 0x80
 8003b04:	d164      	bne.n	8003bd0 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d111      	bne.n	8003b32 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	212c      	movs	r1, #44	; 0x2c
 8003b14:	fb01 f303 	mul.w	r3, r1, r3
 8003b18:	4413      	add	r3, r2
 8003b1a:	3361      	adds	r3, #97	; 0x61
 8003b1c:	2206      	movs	r2, #6
 8003b1e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	b2d2      	uxtb	r2, r2
 8003b28:	4611      	mov	r1, r2
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f004 feb9 	bl	80088a2 <USB_HC_Halt>
 8003b30:	e044      	b.n	8003bbc <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	212c      	movs	r1, #44	; 0x2c
 8003b38:	fb01 f303 	mul.w	r3, r1, r3
 8003b3c:	4413      	add	r3, r2
 8003b3e:	335c      	adds	r3, #92	; 0x5c
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	1c5a      	adds	r2, r3, #1
 8003b44:	6879      	ldr	r1, [r7, #4]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	202c      	movs	r0, #44	; 0x2c
 8003b4a:	fb00 f303 	mul.w	r3, r0, r3
 8003b4e:	440b      	add	r3, r1
 8003b50:	335c      	adds	r3, #92	; 0x5c
 8003b52:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	212c      	movs	r1, #44	; 0x2c
 8003b5a:	fb01 f303 	mul.w	r3, r1, r3
 8003b5e:	4413      	add	r3, r2
 8003b60:	335c      	adds	r3, #92	; 0x5c
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d920      	bls.n	8003baa <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	212c      	movs	r1, #44	; 0x2c
 8003b6e:	fb01 f303 	mul.w	r3, r1, r3
 8003b72:	4413      	add	r3, r2
 8003b74:	335c      	adds	r3, #92	; 0x5c
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	212c      	movs	r1, #44	; 0x2c
 8003b80:	fb01 f303 	mul.w	r3, r1, r3
 8003b84:	4413      	add	r3, r2
 8003b86:	3360      	adds	r3, #96	; 0x60
 8003b88:	2204      	movs	r2, #4
 8003b8a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	b2d9      	uxtb	r1, r3
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	202c      	movs	r0, #44	; 0x2c
 8003b96:	fb00 f303 	mul.w	r3, r0, r3
 8003b9a:	4413      	add	r3, r2
 8003b9c:	3360      	adds	r3, #96	; 0x60
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f007 f922 	bl	800adec <HAL_HCD_HC_NotifyURBChange_Callback>
 8003ba8:	e008      	b.n	8003bbc <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	212c      	movs	r1, #44	; 0x2c
 8003bb0:	fb01 f303 	mul.w	r3, r1, r3
 8003bb4:	4413      	add	r3, r2
 8003bb6:	3360      	adds	r3, #96	; 0x60
 8003bb8:	2202      	movs	r2, #2
 8003bba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	015a      	lsls	r2, r3, #5
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bc8:	461a      	mov	r2, r3
 8003bca:	2380      	movs	r3, #128	; 0x80
 8003bcc:	6093      	str	r3, [r2, #8]
}
 8003bce:	e172      	b.n	8003eb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	015a      	lsls	r2, r3, #5
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003be6:	d11b      	bne.n	8003c20 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	212c      	movs	r1, #44	; 0x2c
 8003bee:	fb01 f303 	mul.w	r3, r1, r3
 8003bf2:	4413      	add	r3, r2
 8003bf4:	3361      	adds	r3, #97	; 0x61
 8003bf6:	2208      	movs	r2, #8
 8003bf8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	b2d2      	uxtb	r2, r2
 8003c02:	4611      	mov	r1, r2
 8003c04:	4618      	mov	r0, r3
 8003c06:	f004 fe4c 	bl	80088a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	015a      	lsls	r2, r3, #5
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	4413      	add	r3, r2
 8003c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c16:	461a      	mov	r2, r3
 8003c18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c1c:	6093      	str	r3, [r2, #8]
}
 8003c1e:	e14a      	b.n	8003eb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	f040 813f 	bne.w	8003eb6 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	212c      	movs	r1, #44	; 0x2c
 8003c3e:	fb01 f303 	mul.w	r3, r1, r3
 8003c42:	4413      	add	r3, r2
 8003c44:	3361      	adds	r3, #97	; 0x61
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d17d      	bne.n	8003d48 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	212c      	movs	r1, #44	; 0x2c
 8003c52:	fb01 f303 	mul.w	r3, r1, r3
 8003c56:	4413      	add	r3, r2
 8003c58:	3360      	adds	r3, #96	; 0x60
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	212c      	movs	r1, #44	; 0x2c
 8003c64:	fb01 f303 	mul.w	r3, r1, r3
 8003c68:	4413      	add	r3, r2
 8003c6a:	333f      	adds	r3, #63	; 0x3f
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d00a      	beq.n	8003c88 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	212c      	movs	r1, #44	; 0x2c
 8003c78:	fb01 f303 	mul.w	r3, r1, r3
 8003c7c:	4413      	add	r3, r2
 8003c7e:	333f      	adds	r3, #63	; 0x3f
 8003c80:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003c82:	2b03      	cmp	r3, #3
 8003c84:	f040 8100 	bne.w	8003e88 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d113      	bne.n	8003cb8 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	212c      	movs	r1, #44	; 0x2c
 8003c96:	fb01 f303 	mul.w	r3, r1, r3
 8003c9a:	4413      	add	r3, r2
 8003c9c:	3355      	adds	r3, #85	; 0x55
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	f083 0301 	eor.w	r3, r3, #1
 8003ca4:	b2d8      	uxtb	r0, r3
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	212c      	movs	r1, #44	; 0x2c
 8003cac:	fb01 f303 	mul.w	r3, r1, r3
 8003cb0:	4413      	add	r3, r2
 8003cb2:	3355      	adds	r3, #85	; 0x55
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	f040 80e3 	bne.w	8003e88 <HCD_HC_OUT_IRQHandler+0x69c>
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	212c      	movs	r1, #44	; 0x2c
 8003cc8:	fb01 f303 	mul.w	r3, r1, r3
 8003ccc:	4413      	add	r3, r2
 8003cce:	334c      	adds	r3, #76	; 0x4c
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 80d8 	beq.w	8003e88 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	212c      	movs	r1, #44	; 0x2c
 8003cde:	fb01 f303 	mul.w	r3, r1, r3
 8003ce2:	4413      	add	r3, r2
 8003ce4:	334c      	adds	r3, #76	; 0x4c
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6879      	ldr	r1, [r7, #4]
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	202c      	movs	r0, #44	; 0x2c
 8003cee:	fb00 f202 	mul.w	r2, r0, r2
 8003cf2:	440a      	add	r2, r1
 8003cf4:	3240      	adds	r2, #64	; 0x40
 8003cf6:	8812      	ldrh	r2, [r2, #0]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	6879      	ldr	r1, [r7, #4]
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	202c      	movs	r0, #44	; 0x2c
 8003d02:	fb00 f202 	mul.w	r2, r0, r2
 8003d06:	440a      	add	r2, r1
 8003d08:	3240      	adds	r2, #64	; 0x40
 8003d0a:	8812      	ldrh	r2, [r2, #0]
 8003d0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 80b5 	beq.w	8003e88 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	212c      	movs	r1, #44	; 0x2c
 8003d24:	fb01 f303 	mul.w	r3, r1, r3
 8003d28:	4413      	add	r3, r2
 8003d2a:	3355      	adds	r3, #85	; 0x55
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	f083 0301 	eor.w	r3, r3, #1
 8003d32:	b2d8      	uxtb	r0, r3
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	212c      	movs	r1, #44	; 0x2c
 8003d3a:	fb01 f303 	mul.w	r3, r1, r3
 8003d3e:	4413      	add	r3, r2
 8003d40:	3355      	adds	r3, #85	; 0x55
 8003d42:	4602      	mov	r2, r0
 8003d44:	701a      	strb	r2, [r3, #0]
 8003d46:	e09f      	b.n	8003e88 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	212c      	movs	r1, #44	; 0x2c
 8003d4e:	fb01 f303 	mul.w	r3, r1, r3
 8003d52:	4413      	add	r3, r2
 8003d54:	3361      	adds	r3, #97	; 0x61
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	2b03      	cmp	r3, #3
 8003d5a:	d109      	bne.n	8003d70 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	212c      	movs	r1, #44	; 0x2c
 8003d62:	fb01 f303 	mul.w	r3, r1, r3
 8003d66:	4413      	add	r3, r2
 8003d68:	3360      	adds	r3, #96	; 0x60
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	701a      	strb	r2, [r3, #0]
 8003d6e:	e08b      	b.n	8003e88 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	212c      	movs	r1, #44	; 0x2c
 8003d76:	fb01 f303 	mul.w	r3, r1, r3
 8003d7a:	4413      	add	r3, r2
 8003d7c:	3361      	adds	r3, #97	; 0x61
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	2b04      	cmp	r3, #4
 8003d82:	d109      	bne.n	8003d98 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	212c      	movs	r1, #44	; 0x2c
 8003d8a:	fb01 f303 	mul.w	r3, r1, r3
 8003d8e:	4413      	add	r3, r2
 8003d90:	3360      	adds	r3, #96	; 0x60
 8003d92:	2202      	movs	r2, #2
 8003d94:	701a      	strb	r2, [r3, #0]
 8003d96:	e077      	b.n	8003e88 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	212c      	movs	r1, #44	; 0x2c
 8003d9e:	fb01 f303 	mul.w	r3, r1, r3
 8003da2:	4413      	add	r3, r2
 8003da4:	3361      	adds	r3, #97	; 0x61
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	2b05      	cmp	r3, #5
 8003daa:	d109      	bne.n	8003dc0 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	212c      	movs	r1, #44	; 0x2c
 8003db2:	fb01 f303 	mul.w	r3, r1, r3
 8003db6:	4413      	add	r3, r2
 8003db8:	3360      	adds	r3, #96	; 0x60
 8003dba:	2205      	movs	r2, #5
 8003dbc:	701a      	strb	r2, [r3, #0]
 8003dbe:	e063      	b.n	8003e88 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	212c      	movs	r1, #44	; 0x2c
 8003dc6:	fb01 f303 	mul.w	r3, r1, r3
 8003dca:	4413      	add	r3, r2
 8003dcc:	3361      	adds	r3, #97	; 0x61
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	2b06      	cmp	r3, #6
 8003dd2:	d009      	beq.n	8003de8 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	212c      	movs	r1, #44	; 0x2c
 8003dda:	fb01 f303 	mul.w	r3, r1, r3
 8003dde:	4413      	add	r3, r2
 8003de0:	3361      	adds	r3, #97	; 0x61
 8003de2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	d14f      	bne.n	8003e88 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	212c      	movs	r1, #44	; 0x2c
 8003dee:	fb01 f303 	mul.w	r3, r1, r3
 8003df2:	4413      	add	r3, r2
 8003df4:	335c      	adds	r3, #92	; 0x5c
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	1c5a      	adds	r2, r3, #1
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	202c      	movs	r0, #44	; 0x2c
 8003e00:	fb00 f303 	mul.w	r3, r0, r3
 8003e04:	440b      	add	r3, r1
 8003e06:	335c      	adds	r3, #92	; 0x5c
 8003e08:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	212c      	movs	r1, #44	; 0x2c
 8003e10:	fb01 f303 	mul.w	r3, r1, r3
 8003e14:	4413      	add	r3, r2
 8003e16:	335c      	adds	r3, #92	; 0x5c
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d912      	bls.n	8003e44 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	212c      	movs	r1, #44	; 0x2c
 8003e24:	fb01 f303 	mul.w	r3, r1, r3
 8003e28:	4413      	add	r3, r2
 8003e2a:	335c      	adds	r3, #92	; 0x5c
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	212c      	movs	r1, #44	; 0x2c
 8003e36:	fb01 f303 	mul.w	r3, r1, r3
 8003e3a:	4413      	add	r3, r2
 8003e3c:	3360      	adds	r3, #96	; 0x60
 8003e3e:	2204      	movs	r2, #4
 8003e40:	701a      	strb	r2, [r3, #0]
 8003e42:	e021      	b.n	8003e88 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	212c      	movs	r1, #44	; 0x2c
 8003e4a:	fb01 f303 	mul.w	r3, r1, r3
 8003e4e:	4413      	add	r3, r2
 8003e50:	3360      	adds	r3, #96	; 0x60
 8003e52:	2202      	movs	r2, #2
 8003e54:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	015a      	lsls	r2, r3, #5
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e6c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e74:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	015a      	lsls	r2, r3, #5
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e82:	461a      	mov	r2, r3
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	015a      	lsls	r2, r3, #5
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e94:	461a      	mov	r2, r3
 8003e96:	2302      	movs	r3, #2
 8003e98:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	b2d9      	uxtb	r1, r3
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	202c      	movs	r0, #44	; 0x2c
 8003ea4:	fb00 f303 	mul.w	r3, r0, r3
 8003ea8:	4413      	add	r3, r2
 8003eaa:	3360      	adds	r3, #96	; 0x60
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f006 ff9b 	bl	800adec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003eb6:	bf00      	nop
 8003eb8:	3720      	adds	r7, #32
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b08a      	sub	sp, #40	; 0x28
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ece:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	f003 030f 	and.w	r3, r3, #15
 8003ede:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	0c5b      	lsrs	r3, r3, #17
 8003ee4:	f003 030f 	and.w	r3, r3, #15
 8003ee8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	091b      	lsrs	r3, r3, #4
 8003eee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ef2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d004      	beq.n	8003f04 <HCD_RXQLVL_IRQHandler+0x46>
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	2b05      	cmp	r3, #5
 8003efe:	f000 80a9 	beq.w	8004054 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003f02:	e0aa      	b.n	800405a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f000 80a6 	beq.w	8004058 <HCD_RXQLVL_IRQHandler+0x19a>
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	212c      	movs	r1, #44	; 0x2c
 8003f12:	fb01 f303 	mul.w	r3, r1, r3
 8003f16:	4413      	add	r3, r2
 8003f18:	3344      	adds	r3, #68	; 0x44
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 809b 	beq.w	8004058 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	212c      	movs	r1, #44	; 0x2c
 8003f28:	fb01 f303 	mul.w	r3, r1, r3
 8003f2c:	4413      	add	r3, r2
 8003f2e:	3350      	adds	r3, #80	; 0x50
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	441a      	add	r2, r3
 8003f36:	6879      	ldr	r1, [r7, #4]
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	202c      	movs	r0, #44	; 0x2c
 8003f3c:	fb00 f303 	mul.w	r3, r0, r3
 8003f40:	440b      	add	r3, r1
 8003f42:	334c      	adds	r3, #76	; 0x4c
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d87a      	bhi.n	8004040 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6818      	ldr	r0, [r3, #0]
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	212c      	movs	r1, #44	; 0x2c
 8003f54:	fb01 f303 	mul.w	r3, r1, r3
 8003f58:	4413      	add	r3, r2
 8003f5a:	3344      	adds	r3, #68	; 0x44
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	b292      	uxth	r2, r2
 8003f62:	4619      	mov	r1, r3
 8003f64:	f003 fff4 	bl	8007f50 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	212c      	movs	r1, #44	; 0x2c
 8003f6e:	fb01 f303 	mul.w	r3, r1, r3
 8003f72:	4413      	add	r3, r2
 8003f74:	3344      	adds	r3, #68	; 0x44
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	441a      	add	r2, r3
 8003f7c:	6879      	ldr	r1, [r7, #4]
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	202c      	movs	r0, #44	; 0x2c
 8003f82:	fb00 f303 	mul.w	r3, r0, r3
 8003f86:	440b      	add	r3, r1
 8003f88:	3344      	adds	r3, #68	; 0x44
 8003f8a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	212c      	movs	r1, #44	; 0x2c
 8003f92:	fb01 f303 	mul.w	r3, r1, r3
 8003f96:	4413      	add	r3, r2
 8003f98:	3350      	adds	r3, #80	; 0x50
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	441a      	add	r2, r3
 8003fa0:	6879      	ldr	r1, [r7, #4]
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	202c      	movs	r0, #44	; 0x2c
 8003fa6:	fb00 f303 	mul.w	r3, r0, r3
 8003faa:	440b      	add	r3, r1
 8003fac:	3350      	adds	r3, #80	; 0x50
 8003fae:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	015a      	lsls	r2, r3, #5
 8003fb4:	6a3b      	ldr	r3, [r7, #32]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	0cdb      	lsrs	r3, r3, #19
 8003fc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fc4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	212c      	movs	r1, #44	; 0x2c
 8003fcc:	fb01 f303 	mul.w	r3, r1, r3
 8003fd0:	4413      	add	r3, r2
 8003fd2:	3340      	adds	r3, #64	; 0x40
 8003fd4:	881b      	ldrh	r3, [r3, #0]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d13c      	bne.n	8004058 <HCD_RXQLVL_IRQHandler+0x19a>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d039      	beq.n	8004058 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	015a      	lsls	r2, r3, #5
 8003fe8:	6a3b      	ldr	r3, [r7, #32]
 8003fea:	4413      	add	r3, r2
 8003fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ffa:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004002:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	015a      	lsls	r2, r3, #5
 8004008:	6a3b      	ldr	r3, [r7, #32]
 800400a:	4413      	add	r3, r2
 800400c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004010:	461a      	mov	r2, r3
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	212c      	movs	r1, #44	; 0x2c
 800401c:	fb01 f303 	mul.w	r3, r1, r3
 8004020:	4413      	add	r3, r2
 8004022:	3354      	adds	r3, #84	; 0x54
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	f083 0301 	eor.w	r3, r3, #1
 800402a:	b2d8      	uxtb	r0, r3
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	212c      	movs	r1, #44	; 0x2c
 8004032:	fb01 f303 	mul.w	r3, r1, r3
 8004036:	4413      	add	r3, r2
 8004038:	3354      	adds	r3, #84	; 0x54
 800403a:	4602      	mov	r2, r0
 800403c:	701a      	strb	r2, [r3, #0]
      break;
 800403e:	e00b      	b.n	8004058 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	212c      	movs	r1, #44	; 0x2c
 8004046:	fb01 f303 	mul.w	r3, r1, r3
 800404a:	4413      	add	r3, r2
 800404c:	3360      	adds	r3, #96	; 0x60
 800404e:	2204      	movs	r2, #4
 8004050:	701a      	strb	r2, [r3, #0]
      break;
 8004052:	e001      	b.n	8004058 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004054:	bf00      	nop
 8004056:	e000      	b.n	800405a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004058:	bf00      	nop
  }
}
 800405a:	bf00      	nop
 800405c:	3728      	adds	r7, #40	; 0x28
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b086      	sub	sp, #24
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800408e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b02      	cmp	r3, #2
 8004098:	d10b      	bne.n	80040b2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d102      	bne.n	80040aa <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f006 fe85 	bl	800adb4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	f043 0302 	orr.w	r3, r3, #2
 80040b0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f003 0308 	and.w	r3, r3, #8
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d132      	bne.n	8004122 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	f043 0308 	orr.w	r3, r3, #8
 80040c2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f003 0304 	and.w	r3, r3, #4
 80040ca:	2b04      	cmp	r3, #4
 80040cc:	d126      	bne.n	800411c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d113      	bne.n	80040fe <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80040dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040e0:	d106      	bne.n	80040f0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2102      	movs	r1, #2
 80040e8:	4618      	mov	r0, r3
 80040ea:	f004 f89f 	bl	800822c <USB_InitFSLSPClkSel>
 80040ee:	e011      	b.n	8004114 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2101      	movs	r1, #1
 80040f6:	4618      	mov	r0, r3
 80040f8:	f004 f898 	bl	800822c <USB_InitFSLSPClkSel>
 80040fc:	e00a      	b.n	8004114 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d106      	bne.n	8004114 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800410c:	461a      	mov	r2, r3
 800410e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004112:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f006 fe77 	bl	800ae08 <HAL_HCD_PortEnabled_Callback>
 800411a:	e002      	b.n	8004122 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f006 fe81 	bl	800ae24 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f003 0320 	and.w	r3, r3, #32
 8004128:	2b20      	cmp	r3, #32
 800412a:	d103      	bne.n	8004134 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	f043 0320 	orr.w	r3, r3, #32
 8004132:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800413a:	461a      	mov	r2, r3
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	6013      	str	r3, [r2, #0]
}
 8004140:	bf00      	nop
 8004142:	3718      	adds	r7, #24
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e12b      	b.n	80043b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d106      	bne.n	8004174 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7fc fef2 	bl	8000f58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2224      	movs	r2, #36	; 0x24
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 0201 	bic.w	r2, r2, #1
 800418a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800419a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80041ac:	f001 fa20 	bl	80055f0 <HAL_RCC_GetPCLK1Freq>
 80041b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	4a81      	ldr	r2, [pc, #516]	; (80043bc <HAL_I2C_Init+0x274>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d807      	bhi.n	80041cc <HAL_I2C_Init+0x84>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	4a80      	ldr	r2, [pc, #512]	; (80043c0 <HAL_I2C_Init+0x278>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	bf94      	ite	ls
 80041c4:	2301      	movls	r3, #1
 80041c6:	2300      	movhi	r3, #0
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	e006      	b.n	80041da <HAL_I2C_Init+0x92>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	4a7d      	ldr	r2, [pc, #500]	; (80043c4 <HAL_I2C_Init+0x27c>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	bf94      	ite	ls
 80041d4:	2301      	movls	r3, #1
 80041d6:	2300      	movhi	r3, #0
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e0e7      	b.n	80043b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	4a78      	ldr	r2, [pc, #480]	; (80043c8 <HAL_I2C_Init+0x280>)
 80041e6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ea:	0c9b      	lsrs	r3, r3, #18
 80041ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68ba      	ldr	r2, [r7, #8]
 80041fe:	430a      	orrs	r2, r1
 8004200:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	4a6a      	ldr	r2, [pc, #424]	; (80043bc <HAL_I2C_Init+0x274>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d802      	bhi.n	800421c <HAL_I2C_Init+0xd4>
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	3301      	adds	r3, #1
 800421a:	e009      	b.n	8004230 <HAL_I2C_Init+0xe8>
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004222:	fb02 f303 	mul.w	r3, r2, r3
 8004226:	4a69      	ldr	r2, [pc, #420]	; (80043cc <HAL_I2C_Init+0x284>)
 8004228:	fba2 2303 	umull	r2, r3, r2, r3
 800422c:	099b      	lsrs	r3, r3, #6
 800422e:	3301      	adds	r3, #1
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6812      	ldr	r2, [r2, #0]
 8004234:	430b      	orrs	r3, r1
 8004236:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	69db      	ldr	r3, [r3, #28]
 800423e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004242:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	495c      	ldr	r1, [pc, #368]	; (80043bc <HAL_I2C_Init+0x274>)
 800424c:	428b      	cmp	r3, r1
 800424e:	d819      	bhi.n	8004284 <HAL_I2C_Init+0x13c>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	1e59      	subs	r1, r3, #1
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	fbb1 f3f3 	udiv	r3, r1, r3
 800425e:	1c59      	adds	r1, r3, #1
 8004260:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004264:	400b      	ands	r3, r1
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <HAL_I2C_Init+0x138>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	1e59      	subs	r1, r3, #1
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	fbb1 f3f3 	udiv	r3, r1, r3
 8004278:	3301      	adds	r3, #1
 800427a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800427e:	e051      	b.n	8004324 <HAL_I2C_Init+0x1dc>
 8004280:	2304      	movs	r3, #4
 8004282:	e04f      	b.n	8004324 <HAL_I2C_Init+0x1dc>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d111      	bne.n	80042b0 <HAL_I2C_Init+0x168>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	1e58      	subs	r0, r3, #1
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6859      	ldr	r1, [r3, #4]
 8004294:	460b      	mov	r3, r1
 8004296:	005b      	lsls	r3, r3, #1
 8004298:	440b      	add	r3, r1
 800429a:	fbb0 f3f3 	udiv	r3, r0, r3
 800429e:	3301      	adds	r3, #1
 80042a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	bf0c      	ite	eq
 80042a8:	2301      	moveq	r3, #1
 80042aa:	2300      	movne	r3, #0
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	e012      	b.n	80042d6 <HAL_I2C_Init+0x18e>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	1e58      	subs	r0, r3, #1
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6859      	ldr	r1, [r3, #4]
 80042b8:	460b      	mov	r3, r1
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	440b      	add	r3, r1
 80042be:	0099      	lsls	r1, r3, #2
 80042c0:	440b      	add	r3, r1
 80042c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80042c6:	3301      	adds	r3, #1
 80042c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	bf0c      	ite	eq
 80042d0:	2301      	moveq	r3, #1
 80042d2:	2300      	movne	r3, #0
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <HAL_I2C_Init+0x196>
 80042da:	2301      	movs	r3, #1
 80042dc:	e022      	b.n	8004324 <HAL_I2C_Init+0x1dc>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10e      	bne.n	8004304 <HAL_I2C_Init+0x1bc>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	1e58      	subs	r0, r3, #1
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6859      	ldr	r1, [r3, #4]
 80042ee:	460b      	mov	r3, r1
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	440b      	add	r3, r1
 80042f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80042f8:	3301      	adds	r3, #1
 80042fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004302:	e00f      	b.n	8004324 <HAL_I2C_Init+0x1dc>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	1e58      	subs	r0, r3, #1
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6859      	ldr	r1, [r3, #4]
 800430c:	460b      	mov	r3, r1
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	440b      	add	r3, r1
 8004312:	0099      	lsls	r1, r3, #2
 8004314:	440b      	add	r3, r1
 8004316:	fbb0 f3f3 	udiv	r3, r0, r3
 800431a:	3301      	adds	r3, #1
 800431c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004320:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004324:	6879      	ldr	r1, [r7, #4]
 8004326:	6809      	ldr	r1, [r1, #0]
 8004328:	4313      	orrs	r3, r2
 800432a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	69da      	ldr	r2, [r3, #28]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	430a      	orrs	r2, r1
 8004346:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004352:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	6911      	ldr	r1, [r2, #16]
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	68d2      	ldr	r2, [r2, #12]
 800435e:	4311      	orrs	r1, r2
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	6812      	ldr	r2, [r2, #0]
 8004364:	430b      	orrs	r3, r1
 8004366:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	695a      	ldr	r2, [r3, #20]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	431a      	orrs	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	430a      	orrs	r2, r1
 8004382:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 0201 	orr.w	r2, r2, #1
 8004392:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2220      	movs	r2, #32
 800439e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	000186a0 	.word	0x000186a0
 80043c0:	001e847f 	.word	0x001e847f
 80043c4:	003d08ff 	.word	0x003d08ff
 80043c8:	431bde83 	.word	0x431bde83
 80043cc:	10624dd3 	.word	0x10624dd3

080043d0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b088      	sub	sp, #32
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e128      	b.n	8004634 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d109      	bne.n	8004402 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a90      	ldr	r2, [pc, #576]	; (800463c <HAL_I2S_Init+0x26c>)
 80043fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7fc fdf3 	bl	8000fe8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2202      	movs	r2, #2
 8004406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6812      	ldr	r2, [r2, #0]
 8004414:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004418:	f023 030f 	bic.w	r3, r3, #15
 800441c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2202      	movs	r2, #2
 8004424:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	2b02      	cmp	r3, #2
 800442c:	d060      	beq.n	80044f0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d102      	bne.n	800443c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004436:	2310      	movs	r3, #16
 8004438:	617b      	str	r3, [r7, #20]
 800443a:	e001      	b.n	8004440 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800443c:	2320      	movs	r3, #32
 800443e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	2b20      	cmp	r3, #32
 8004446:	d802      	bhi.n	800444e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800444e:	2001      	movs	r0, #1
 8004450:	f001 f9d8 	bl	8005804 <HAL_RCCEx_GetPeriphCLKFreq>
 8004454:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800445e:	d125      	bne.n	80044ac <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d010      	beq.n	800448a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004472:	4613      	mov	r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4413      	add	r3, r2
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	461a      	mov	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	fbb2 f3f3 	udiv	r3, r2, r3
 8004484:	3305      	adds	r3, #5
 8004486:	613b      	str	r3, [r7, #16]
 8004488:	e01f      	b.n	80044ca <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	fbb2 f2f3 	udiv	r2, r2, r3
 8004494:	4613      	mov	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4413      	add	r3, r2
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	461a      	mov	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a6:	3305      	adds	r3, #5
 80044a8:	613b      	str	r3, [r7, #16]
 80044aa:	e00e      	b.n	80044ca <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80044b4:	4613      	mov	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	4413      	add	r3, r2
 80044ba:	005b      	lsls	r3, r3, #1
 80044bc:	461a      	mov	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c6:	3305      	adds	r3, #5
 80044c8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	4a5c      	ldr	r2, [pc, #368]	; (8004640 <HAL_I2S_Init+0x270>)
 80044ce:	fba2 2303 	umull	r2, r3, r2, r3
 80044d2:	08db      	lsrs	r3, r3, #3
 80044d4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	085b      	lsrs	r3, r3, #1
 80044e6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	021b      	lsls	r3, r3, #8
 80044ec:	61bb      	str	r3, [r7, #24]
 80044ee:	e003      	b.n	80044f8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80044f0:	2302      	movs	r3, #2
 80044f2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80044f4:	2300      	movs	r3, #0
 80044f6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d902      	bls.n	8004504 <HAL_I2S_Init+0x134>
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	2bff      	cmp	r3, #255	; 0xff
 8004502:	d907      	bls.n	8004514 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004508:	f043 0210 	orr.w	r2, r3, #16
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e08f      	b.n	8004634 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	691a      	ldr	r2, [r3, #16]
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	ea42 0103 	orr.w	r1, r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	69fa      	ldr	r2, [r7, #28]
 8004524:	430a      	orrs	r2, r1
 8004526:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	69db      	ldr	r3, [r3, #28]
 800452e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004532:	f023 030f 	bic.w	r3, r3, #15
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6851      	ldr	r1, [r2, #4]
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	6892      	ldr	r2, [r2, #8]
 800453e:	4311      	orrs	r1, r2
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	68d2      	ldr	r2, [r2, #12]
 8004544:	4311      	orrs	r1, r2
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6992      	ldr	r2, [r2, #24]
 800454a:	430a      	orrs	r2, r1
 800454c:	431a      	orrs	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004556:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d161      	bne.n	8004624 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a38      	ldr	r2, [pc, #224]	; (8004644 <HAL_I2S_Init+0x274>)
 8004564:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a37      	ldr	r2, [pc, #220]	; (8004648 <HAL_I2S_Init+0x278>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d101      	bne.n	8004574 <HAL_I2S_Init+0x1a4>
 8004570:	4b36      	ldr	r3, [pc, #216]	; (800464c <HAL_I2S_Init+0x27c>)
 8004572:	e001      	b.n	8004578 <HAL_I2S_Init+0x1a8>
 8004574:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004578:	69db      	ldr	r3, [r3, #28]
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	6812      	ldr	r2, [r2, #0]
 800457e:	4932      	ldr	r1, [pc, #200]	; (8004648 <HAL_I2S_Init+0x278>)
 8004580:	428a      	cmp	r2, r1
 8004582:	d101      	bne.n	8004588 <HAL_I2S_Init+0x1b8>
 8004584:	4a31      	ldr	r2, [pc, #196]	; (800464c <HAL_I2S_Init+0x27c>)
 8004586:	e001      	b.n	800458c <HAL_I2S_Init+0x1bc>
 8004588:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800458c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004590:	f023 030f 	bic.w	r3, r3, #15
 8004594:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a2b      	ldr	r2, [pc, #172]	; (8004648 <HAL_I2S_Init+0x278>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d101      	bne.n	80045a4 <HAL_I2S_Init+0x1d4>
 80045a0:	4b2a      	ldr	r3, [pc, #168]	; (800464c <HAL_I2S_Init+0x27c>)
 80045a2:	e001      	b.n	80045a8 <HAL_I2S_Init+0x1d8>
 80045a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045a8:	2202      	movs	r2, #2
 80045aa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a25      	ldr	r2, [pc, #148]	; (8004648 <HAL_I2S_Init+0x278>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d101      	bne.n	80045ba <HAL_I2S_Init+0x1ea>
 80045b6:	4b25      	ldr	r3, [pc, #148]	; (800464c <HAL_I2S_Init+0x27c>)
 80045b8:	e001      	b.n	80045be <HAL_I2S_Init+0x1ee>
 80045ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045be:	69db      	ldr	r3, [r3, #28]
 80045c0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045ca:	d003      	beq.n	80045d4 <HAL_I2S_Init+0x204>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d103      	bne.n	80045dc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80045d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045d8:	613b      	str	r3, [r7, #16]
 80045da:	e001      	b.n	80045e0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80045dc:	2300      	movs	r3, #0
 80045de:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80045ea:	4313      	orrs	r3, r2
 80045ec:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80045f4:	4313      	orrs	r3, r2
 80045f6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80045fe:	4313      	orrs	r3, r2
 8004600:	b29a      	uxth	r2, r3
 8004602:	897b      	ldrh	r3, [r7, #10]
 8004604:	4313      	orrs	r3, r2
 8004606:	b29b      	uxth	r3, r3
 8004608:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800460c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a0d      	ldr	r2, [pc, #52]	; (8004648 <HAL_I2S_Init+0x278>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d101      	bne.n	800461c <HAL_I2S_Init+0x24c>
 8004618:	4b0c      	ldr	r3, [pc, #48]	; (800464c <HAL_I2S_Init+0x27c>)
 800461a:	e001      	b.n	8004620 <HAL_I2S_Init+0x250>
 800461c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004620:	897a      	ldrh	r2, [r7, #10]
 8004622:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3720      	adds	r7, #32
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	08004747 	.word	0x08004747
 8004640:	cccccccd 	.word	0xcccccccd
 8004644:	0800485d 	.word	0x0800485d
 8004648:	40003800 	.word	0x40003800
 800464c:	40003400 	.word	0x40003400

08004650 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004698:	881a      	ldrh	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a4:	1c9a      	adds	r2, r3, #2
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	3b01      	subs	r3, #1
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046bc:	b29b      	uxth	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d10e      	bne.n	80046e0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	685a      	ldr	r2, [r3, #4]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046d0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f7ff ffb8 	bl	8004650 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80046e0:	bf00      	nop
 80046e2:	3708      	adds	r7, #8
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68da      	ldr	r2, [r3, #12]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fa:	b292      	uxth	r2, r2
 80046fc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004702:	1c9a      	adds	r2, r3, #2
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800470c:	b29b      	uxth	r3, r3
 800470e:	3b01      	subs	r3, #1
 8004710:	b29a      	uxth	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800471a:	b29b      	uxth	r3, r3
 800471c:	2b00      	cmp	r3, #0
 800471e:	d10e      	bne.n	800473e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800472e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f7ff ff93 	bl	8004664 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800473e:	bf00      	nop
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b086      	sub	sp, #24
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b04      	cmp	r3, #4
 8004760:	d13a      	bne.n	80047d8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	2b01      	cmp	r3, #1
 800476a:	d109      	bne.n	8004780 <I2S_IRQHandler+0x3a>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004776:	2b40      	cmp	r3, #64	; 0x40
 8004778:	d102      	bne.n	8004780 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7ff ffb4 	bl	80046e8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004786:	2b40      	cmp	r3, #64	; 0x40
 8004788:	d126      	bne.n	80047d8 <I2S_IRQHandler+0x92>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f003 0320 	and.w	r3, r3, #32
 8004794:	2b20      	cmp	r3, #32
 8004796:	d11f      	bne.n	80047d8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685a      	ldr	r2, [r3, #4]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80047a6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80047a8:	2300      	movs	r3, #0
 80047aa:	613b      	str	r3, [r7, #16]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	613b      	str	r3, [r7, #16]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	613b      	str	r3, [r7, #16]
 80047bc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ca:	f043 0202 	orr.w	r2, r3, #2
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f7ff ff50 	bl	8004678 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b03      	cmp	r3, #3
 80047e2:	d136      	bne.n	8004852 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d109      	bne.n	8004802 <I2S_IRQHandler+0xbc>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f8:	2b80      	cmp	r3, #128	; 0x80
 80047fa:	d102      	bne.n	8004802 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f7ff ff45 	bl	800468c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f003 0308 	and.w	r3, r3, #8
 8004808:	2b08      	cmp	r3, #8
 800480a:	d122      	bne.n	8004852 <I2S_IRQHandler+0x10c>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f003 0320 	and.w	r3, r3, #32
 8004816:	2b20      	cmp	r3, #32
 8004818:	d11b      	bne.n	8004852 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004828:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800482a:	2300      	movs	r3, #0
 800482c:	60fb      	str	r3, [r7, #12]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	60fb      	str	r3, [r7, #12]
 8004836:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004844:	f043 0204 	orr.w	r2, r3, #4
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f7ff ff13 	bl	8004678 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004852:	bf00      	nop
 8004854:	3718      	adds	r7, #24
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
	...

0800485c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b088      	sub	sp, #32
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a92      	ldr	r2, [pc, #584]	; (8004abc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d101      	bne.n	800487a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004876:	4b92      	ldr	r3, [pc, #584]	; (8004ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004878:	e001      	b.n	800487e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800487a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a8b      	ldr	r2, [pc, #556]	; (8004abc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d101      	bne.n	8004898 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004894:	4b8a      	ldr	r3, [pc, #552]	; (8004ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004896:	e001      	b.n	800489c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004898:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048a8:	d004      	beq.n	80048b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f040 8099 	bne.w	80049e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d107      	bne.n	80048ce <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d002      	beq.n	80048ce <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f925 	bl	8004b18 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d107      	bne.n	80048e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d002      	beq.n	80048e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 f9c8 	bl	8004c78 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ee:	2b40      	cmp	r3, #64	; 0x40
 80048f0:	d13a      	bne.n	8004968 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	f003 0320 	and.w	r3, r3, #32
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d035      	beq.n	8004968 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a6e      	ldr	r2, [pc, #440]	; (8004abc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d101      	bne.n	800490a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004906:	4b6e      	ldr	r3, [pc, #440]	; (8004ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004908:	e001      	b.n	800490e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800490a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800490e:	685a      	ldr	r2, [r3, #4]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4969      	ldr	r1, [pc, #420]	; (8004abc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004916:	428b      	cmp	r3, r1
 8004918:	d101      	bne.n	800491e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800491a:	4b69      	ldr	r3, [pc, #420]	; (8004ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800491c:	e001      	b.n	8004922 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800491e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004922:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004926:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004936:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004938:	2300      	movs	r3, #0
 800493a:	60fb      	str	r3, [r7, #12]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	60fb      	str	r3, [r7, #12]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	60fb      	str	r3, [r7, #12]
 800494c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800495a:	f043 0202 	orr.w	r2, r3, #2
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f7ff fe88 	bl	8004678 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	f003 0308 	and.w	r3, r3, #8
 800496e:	2b08      	cmp	r3, #8
 8004970:	f040 80c3 	bne.w	8004afa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	f003 0320 	and.w	r3, r3, #32
 800497a:	2b00      	cmp	r3, #0
 800497c:	f000 80bd 	beq.w	8004afa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685a      	ldr	r2, [r3, #4]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800498e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a49      	ldr	r2, [pc, #292]	; (8004abc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d101      	bne.n	800499e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800499a:	4b49      	ldr	r3, [pc, #292]	; (8004ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800499c:	e001      	b.n	80049a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800499e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049a2:	685a      	ldr	r2, [r3, #4]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4944      	ldr	r1, [pc, #272]	; (8004abc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80049aa:	428b      	cmp	r3, r1
 80049ac:	d101      	bne.n	80049b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80049ae:	4b44      	ldr	r3, [pc, #272]	; (8004ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80049b0:	e001      	b.n	80049b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80049b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80049ba:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80049bc:	2300      	movs	r3, #0
 80049be:	60bb      	str	r3, [r7, #8]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	60bb      	str	r3, [r7, #8]
 80049c8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d6:	f043 0204 	orr.w	r2, r3, #4
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7ff fe4a 	bl	8004678 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80049e4:	e089      	b.n	8004afa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	f003 0302 	and.w	r3, r3, #2
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d107      	bne.n	8004a00 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d002      	beq.n	8004a00 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f8be 	bl	8004b7c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d107      	bne.n	8004a1a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d002      	beq.n	8004a1a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 f8fd 	bl	8004c14 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a20:	2b40      	cmp	r3, #64	; 0x40
 8004a22:	d12f      	bne.n	8004a84 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	f003 0320 	and.w	r3, r3, #32
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d02a      	beq.n	8004a84 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a3c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a1e      	ldr	r2, [pc, #120]	; (8004abc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d101      	bne.n	8004a4c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004a48:	4b1d      	ldr	r3, [pc, #116]	; (8004ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a4a:	e001      	b.n	8004a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004a4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4919      	ldr	r1, [pc, #100]	; (8004abc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a58:	428b      	cmp	r3, r1
 8004a5a:	d101      	bne.n	8004a60 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004a5c:	4b18      	ldr	r3, [pc, #96]	; (8004ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a5e:	e001      	b.n	8004a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004a60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a68:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a76:	f043 0202 	orr.w	r2, r3, #2
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f7ff fdfa 	bl	8004678 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	f003 0308 	and.w	r3, r3, #8
 8004a8a:	2b08      	cmp	r3, #8
 8004a8c:	d136      	bne.n	8004afc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	f003 0320 	and.w	r3, r3, #32
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d031      	beq.n	8004afc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a07      	ldr	r2, [pc, #28]	; (8004abc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d101      	bne.n	8004aa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004aa2:	4b07      	ldr	r3, [pc, #28]	; (8004ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004aa4:	e001      	b.n	8004aaa <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004aa6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4902      	ldr	r1, [pc, #8]	; (8004abc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ab2:	428b      	cmp	r3, r1
 8004ab4:	d106      	bne.n	8004ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004ab6:	4b02      	ldr	r3, [pc, #8]	; (8004ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ab8:	e006      	b.n	8004ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004aba:	bf00      	nop
 8004abc:	40003800 	.word	0x40003800
 8004ac0:	40003400 	.word	0x40003400
 8004ac4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ac8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004acc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004adc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aea:	f043 0204 	orr.w	r2, r3, #4
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7ff fdc0 	bl	8004678 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004af8:	e000      	b.n	8004afc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004afa:	bf00      	nop
}
 8004afc:	bf00      	nop
 8004afe:	3720      	adds	r7, #32
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	1c99      	adds	r1, r3, #2
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	6251      	str	r1, [r2, #36]	; 0x24
 8004b2a:	881a      	ldrh	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d113      	bne.n	8004b72 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b58:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d106      	bne.n	8004b72 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f7ff ffc9 	bl	8004b04 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b72:	bf00      	nop
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
	...

08004b7c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b88:	1c99      	adds	r1, r3, #2
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	6251      	str	r1, [r2, #36]	; 0x24
 8004b8e:	8819      	ldrh	r1, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a1d      	ldr	r2, [pc, #116]	; (8004c0c <I2SEx_TxISR_I2SExt+0x90>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d101      	bne.n	8004b9e <I2SEx_TxISR_I2SExt+0x22>
 8004b9a:	4b1d      	ldr	r3, [pc, #116]	; (8004c10 <I2SEx_TxISR_I2SExt+0x94>)
 8004b9c:	e001      	b.n	8004ba2 <I2SEx_TxISR_I2SExt+0x26>
 8004b9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ba2:	460a      	mov	r2, r1
 8004ba4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	3b01      	subs	r3, #1
 8004bae:	b29a      	uxth	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d121      	bne.n	8004c02 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a12      	ldr	r2, [pc, #72]	; (8004c0c <I2SEx_TxISR_I2SExt+0x90>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d101      	bne.n	8004bcc <I2SEx_TxISR_I2SExt+0x50>
 8004bc8:	4b11      	ldr	r3, [pc, #68]	; (8004c10 <I2SEx_TxISR_I2SExt+0x94>)
 8004bca:	e001      	b.n	8004bd0 <I2SEx_TxISR_I2SExt+0x54>
 8004bcc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bd0:	685a      	ldr	r2, [r3, #4]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	490d      	ldr	r1, [pc, #52]	; (8004c0c <I2SEx_TxISR_I2SExt+0x90>)
 8004bd8:	428b      	cmp	r3, r1
 8004bda:	d101      	bne.n	8004be0 <I2SEx_TxISR_I2SExt+0x64>
 8004bdc:	4b0c      	ldr	r3, [pc, #48]	; (8004c10 <I2SEx_TxISR_I2SExt+0x94>)
 8004bde:	e001      	b.n	8004be4 <I2SEx_TxISR_I2SExt+0x68>
 8004be0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004be4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004be8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d106      	bne.n	8004c02 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f7ff ff81 	bl	8004b04 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c02:	bf00      	nop
 8004c04:	3708      	adds	r7, #8
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	40003800 	.word	0x40003800
 8004c10:	40003400 	.word	0x40003400

08004c14 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68d8      	ldr	r0, [r3, #12]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c26:	1c99      	adds	r1, r3, #2
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004c2c:	b282      	uxth	r2, r0
 8004c2e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	3b01      	subs	r3, #1
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d113      	bne.n	8004c70 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	685a      	ldr	r2, [r3, #4]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c56:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d106      	bne.n	8004c70 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7ff ff4a 	bl	8004b04 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c70:	bf00      	nop
 8004c72:	3708      	adds	r7, #8
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a20      	ldr	r2, [pc, #128]	; (8004d08 <I2SEx_RxISR_I2SExt+0x90>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d101      	bne.n	8004c8e <I2SEx_RxISR_I2SExt+0x16>
 8004c8a:	4b20      	ldr	r3, [pc, #128]	; (8004d0c <I2SEx_RxISR_I2SExt+0x94>)
 8004c8c:	e001      	b.n	8004c92 <I2SEx_RxISR_I2SExt+0x1a>
 8004c8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c92:	68d8      	ldr	r0, [r3, #12]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c98:	1c99      	adds	r1, r3, #2
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004c9e:	b282      	uxth	r2, r0
 8004ca0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d121      	bne.n	8004cfe <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a12      	ldr	r2, [pc, #72]	; (8004d08 <I2SEx_RxISR_I2SExt+0x90>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d101      	bne.n	8004cc8 <I2SEx_RxISR_I2SExt+0x50>
 8004cc4:	4b11      	ldr	r3, [pc, #68]	; (8004d0c <I2SEx_RxISR_I2SExt+0x94>)
 8004cc6:	e001      	b.n	8004ccc <I2SEx_RxISR_I2SExt+0x54>
 8004cc8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ccc:	685a      	ldr	r2, [r3, #4]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	490d      	ldr	r1, [pc, #52]	; (8004d08 <I2SEx_RxISR_I2SExt+0x90>)
 8004cd4:	428b      	cmp	r3, r1
 8004cd6:	d101      	bne.n	8004cdc <I2SEx_RxISR_I2SExt+0x64>
 8004cd8:	4b0c      	ldr	r3, [pc, #48]	; (8004d0c <I2SEx_RxISR_I2SExt+0x94>)
 8004cda:	e001      	b.n	8004ce0 <I2SEx_RxISR_I2SExt+0x68>
 8004cdc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ce0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ce4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d106      	bne.n	8004cfe <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f7ff ff03 	bl	8004b04 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004cfe:	bf00      	nop
 8004d00:	3708      	adds	r7, #8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	40003800 	.word	0x40003800
 8004d0c:	40003400 	.word	0x40003400

08004d10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e267      	b.n	80051f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d075      	beq.n	8004e1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d2e:	4b88      	ldr	r3, [pc, #544]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f003 030c 	and.w	r3, r3, #12
 8004d36:	2b04      	cmp	r3, #4
 8004d38:	d00c      	beq.n	8004d54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d3a:	4b85      	ldr	r3, [pc, #532]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d42:	2b08      	cmp	r3, #8
 8004d44:	d112      	bne.n	8004d6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d46:	4b82      	ldr	r3, [pc, #520]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d52:	d10b      	bne.n	8004d6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d54:	4b7e      	ldr	r3, [pc, #504]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d05b      	beq.n	8004e18 <HAL_RCC_OscConfig+0x108>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d157      	bne.n	8004e18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e242      	b.n	80051f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d74:	d106      	bne.n	8004d84 <HAL_RCC_OscConfig+0x74>
 8004d76:	4b76      	ldr	r3, [pc, #472]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a75      	ldr	r2, [pc, #468]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d80:	6013      	str	r3, [r2, #0]
 8004d82:	e01d      	b.n	8004dc0 <HAL_RCC_OscConfig+0xb0>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d8c:	d10c      	bne.n	8004da8 <HAL_RCC_OscConfig+0x98>
 8004d8e:	4b70      	ldr	r3, [pc, #448]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a6f      	ldr	r2, [pc, #444]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d98:	6013      	str	r3, [r2, #0]
 8004d9a:	4b6d      	ldr	r3, [pc, #436]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a6c      	ldr	r2, [pc, #432]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004da4:	6013      	str	r3, [r2, #0]
 8004da6:	e00b      	b.n	8004dc0 <HAL_RCC_OscConfig+0xb0>
 8004da8:	4b69      	ldr	r3, [pc, #420]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a68      	ldr	r2, [pc, #416]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004db2:	6013      	str	r3, [r2, #0]
 8004db4:	4b66      	ldr	r3, [pc, #408]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a65      	ldr	r2, [pc, #404]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d013      	beq.n	8004df0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc8:	f7fc fc10 	bl	80015ec <HAL_GetTick>
 8004dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dce:	e008      	b.n	8004de2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004dd0:	f7fc fc0c 	bl	80015ec <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b64      	cmp	r3, #100	; 0x64
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e207      	b.n	80051f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004de2:	4b5b      	ldr	r3, [pc, #364]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d0f0      	beq.n	8004dd0 <HAL_RCC_OscConfig+0xc0>
 8004dee:	e014      	b.n	8004e1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df0:	f7fc fbfc 	bl	80015ec <HAL_GetTick>
 8004df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004df6:	e008      	b.n	8004e0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004df8:	f7fc fbf8 	bl	80015ec <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b64      	cmp	r3, #100	; 0x64
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e1f3      	b.n	80051f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e0a:	4b51      	ldr	r3, [pc, #324]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1f0      	bne.n	8004df8 <HAL_RCC_OscConfig+0xe8>
 8004e16:	e000      	b.n	8004e1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d063      	beq.n	8004eee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e26:	4b4a      	ldr	r3, [pc, #296]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f003 030c 	and.w	r3, r3, #12
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00b      	beq.n	8004e4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e32:	4b47      	ldr	r3, [pc, #284]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e3a:	2b08      	cmp	r3, #8
 8004e3c:	d11c      	bne.n	8004e78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e3e:	4b44      	ldr	r3, [pc, #272]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d116      	bne.n	8004e78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e4a:	4b41      	ldr	r3, [pc, #260]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d005      	beq.n	8004e62 <HAL_RCC_OscConfig+0x152>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d001      	beq.n	8004e62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e1c7      	b.n	80051f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e62:	4b3b      	ldr	r3, [pc, #236]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	00db      	lsls	r3, r3, #3
 8004e70:	4937      	ldr	r1, [pc, #220]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e76:	e03a      	b.n	8004eee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d020      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e80:	4b34      	ldr	r3, [pc, #208]	; (8004f54 <HAL_RCC_OscConfig+0x244>)
 8004e82:	2201      	movs	r2, #1
 8004e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e86:	f7fc fbb1 	bl	80015ec <HAL_GetTick>
 8004e8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e8c:	e008      	b.n	8004ea0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e8e:	f7fc fbad 	bl	80015ec <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d901      	bls.n	8004ea0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e1a8      	b.n	80051f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ea0:	4b2b      	ldr	r3, [pc, #172]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d0f0      	beq.n	8004e8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eac:	4b28      	ldr	r3, [pc, #160]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	00db      	lsls	r3, r3, #3
 8004eba:	4925      	ldr	r1, [pc, #148]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	600b      	str	r3, [r1, #0]
 8004ec0:	e015      	b.n	8004eee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ec2:	4b24      	ldr	r3, [pc, #144]	; (8004f54 <HAL_RCC_OscConfig+0x244>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec8:	f7fc fb90 	bl	80015ec <HAL_GetTick>
 8004ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ece:	e008      	b.n	8004ee2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ed0:	f7fc fb8c 	bl	80015ec <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e187      	b.n	80051f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ee2:	4b1b      	ldr	r3, [pc, #108]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1f0      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0308 	and.w	r3, r3, #8
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d036      	beq.n	8004f68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d016      	beq.n	8004f30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f02:	4b15      	ldr	r3, [pc, #84]	; (8004f58 <HAL_RCC_OscConfig+0x248>)
 8004f04:	2201      	movs	r2, #1
 8004f06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f08:	f7fc fb70 	bl	80015ec <HAL_GetTick>
 8004f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f0e:	e008      	b.n	8004f22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f10:	f7fc fb6c 	bl	80015ec <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e167      	b.n	80051f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f22:	4b0b      	ldr	r3, [pc, #44]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f26:	f003 0302 	and.w	r3, r3, #2
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d0f0      	beq.n	8004f10 <HAL_RCC_OscConfig+0x200>
 8004f2e:	e01b      	b.n	8004f68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f30:	4b09      	ldr	r3, [pc, #36]	; (8004f58 <HAL_RCC_OscConfig+0x248>)
 8004f32:	2200      	movs	r2, #0
 8004f34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f36:	f7fc fb59 	bl	80015ec <HAL_GetTick>
 8004f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f3c:	e00e      	b.n	8004f5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f3e:	f7fc fb55 	bl	80015ec <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d907      	bls.n	8004f5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e150      	b.n	80051f2 <HAL_RCC_OscConfig+0x4e2>
 8004f50:	40023800 	.word	0x40023800
 8004f54:	42470000 	.word	0x42470000
 8004f58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f5c:	4b88      	ldr	r3, [pc, #544]	; (8005180 <HAL_RCC_OscConfig+0x470>)
 8004f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f60:	f003 0302 	and.w	r3, r3, #2
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1ea      	bne.n	8004f3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0304 	and.w	r3, r3, #4
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f000 8097 	beq.w	80050a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f76:	2300      	movs	r3, #0
 8004f78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f7a:	4b81      	ldr	r3, [pc, #516]	; (8005180 <HAL_RCC_OscConfig+0x470>)
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10f      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f86:	2300      	movs	r3, #0
 8004f88:	60bb      	str	r3, [r7, #8]
 8004f8a:	4b7d      	ldr	r3, [pc, #500]	; (8005180 <HAL_RCC_OscConfig+0x470>)
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8e:	4a7c      	ldr	r2, [pc, #496]	; (8005180 <HAL_RCC_OscConfig+0x470>)
 8004f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f94:	6413      	str	r3, [r2, #64]	; 0x40
 8004f96:	4b7a      	ldr	r3, [pc, #488]	; (8005180 <HAL_RCC_OscConfig+0x470>)
 8004f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f9e:	60bb      	str	r3, [r7, #8]
 8004fa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fa6:	4b77      	ldr	r3, [pc, #476]	; (8005184 <HAL_RCC_OscConfig+0x474>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d118      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fb2:	4b74      	ldr	r3, [pc, #464]	; (8005184 <HAL_RCC_OscConfig+0x474>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a73      	ldr	r2, [pc, #460]	; (8005184 <HAL_RCC_OscConfig+0x474>)
 8004fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fbe:	f7fc fb15 	bl	80015ec <HAL_GetTick>
 8004fc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fc4:	e008      	b.n	8004fd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fc6:	f7fc fb11 	bl	80015ec <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d901      	bls.n	8004fd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e10c      	b.n	80051f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fd8:	4b6a      	ldr	r3, [pc, #424]	; (8005184 <HAL_RCC_OscConfig+0x474>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d0f0      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d106      	bne.n	8004ffa <HAL_RCC_OscConfig+0x2ea>
 8004fec:	4b64      	ldr	r3, [pc, #400]	; (8005180 <HAL_RCC_OscConfig+0x470>)
 8004fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff0:	4a63      	ldr	r2, [pc, #396]	; (8005180 <HAL_RCC_OscConfig+0x470>)
 8004ff2:	f043 0301 	orr.w	r3, r3, #1
 8004ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ff8:	e01c      	b.n	8005034 <HAL_RCC_OscConfig+0x324>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	2b05      	cmp	r3, #5
 8005000:	d10c      	bne.n	800501c <HAL_RCC_OscConfig+0x30c>
 8005002:	4b5f      	ldr	r3, [pc, #380]	; (8005180 <HAL_RCC_OscConfig+0x470>)
 8005004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005006:	4a5e      	ldr	r2, [pc, #376]	; (8005180 <HAL_RCC_OscConfig+0x470>)
 8005008:	f043 0304 	orr.w	r3, r3, #4
 800500c:	6713      	str	r3, [r2, #112]	; 0x70
 800500e:	4b5c      	ldr	r3, [pc, #368]	; (8005180 <HAL_RCC_OscConfig+0x470>)
 8005010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005012:	4a5b      	ldr	r2, [pc, #364]	; (8005180 <HAL_RCC_OscConfig+0x470>)
 8005014:	f043 0301 	orr.w	r3, r3, #1
 8005018:	6713      	str	r3, [r2, #112]	; 0x70
 800501a:	e00b      	b.n	8005034 <HAL_RCC_OscConfig+0x324>
 800501c:	4b58      	ldr	r3, [pc, #352]	; (8005180 <HAL_RCC_OscConfig+0x470>)
 800501e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005020:	4a57      	ldr	r2, [pc, #348]	; (8005180 <HAL_RCC_OscConfig+0x470>)
 8005022:	f023 0301 	bic.w	r3, r3, #1
 8005026:	6713      	str	r3, [r2, #112]	; 0x70
 8005028:	4b55      	ldr	r3, [pc, #340]	; (8005180 <HAL_RCC_OscConfig+0x470>)
 800502a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800502c:	4a54      	ldr	r2, [pc, #336]	; (8005180 <HAL_RCC_OscConfig+0x470>)
 800502e:	f023 0304 	bic.w	r3, r3, #4
 8005032:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d015      	beq.n	8005068 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800503c:	f7fc fad6 	bl	80015ec <HAL_GetTick>
 8005040:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005042:	e00a      	b.n	800505a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005044:	f7fc fad2 	bl	80015ec <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005052:	4293      	cmp	r3, r2
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e0cb      	b.n	80051f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800505a:	4b49      	ldr	r3, [pc, #292]	; (8005180 <HAL_RCC_OscConfig+0x470>)
 800505c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d0ee      	beq.n	8005044 <HAL_RCC_OscConfig+0x334>
 8005066:	e014      	b.n	8005092 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005068:	f7fc fac0 	bl	80015ec <HAL_GetTick>
 800506c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800506e:	e00a      	b.n	8005086 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005070:	f7fc fabc 	bl	80015ec <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	f241 3288 	movw	r2, #5000	; 0x1388
 800507e:	4293      	cmp	r3, r2
 8005080:	d901      	bls.n	8005086 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e0b5      	b.n	80051f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005086:	4b3e      	ldr	r3, [pc, #248]	; (8005180 <HAL_RCC_OscConfig+0x470>)
 8005088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800508a:	f003 0302 	and.w	r3, r3, #2
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1ee      	bne.n	8005070 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005092:	7dfb      	ldrb	r3, [r7, #23]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d105      	bne.n	80050a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005098:	4b39      	ldr	r3, [pc, #228]	; (8005180 <HAL_RCC_OscConfig+0x470>)
 800509a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509c:	4a38      	ldr	r2, [pc, #224]	; (8005180 <HAL_RCC_OscConfig+0x470>)
 800509e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	699b      	ldr	r3, [r3, #24]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 80a1 	beq.w	80051f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050ae:	4b34      	ldr	r3, [pc, #208]	; (8005180 <HAL_RCC_OscConfig+0x470>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f003 030c 	and.w	r3, r3, #12
 80050b6:	2b08      	cmp	r3, #8
 80050b8:	d05c      	beq.n	8005174 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d141      	bne.n	8005146 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050c2:	4b31      	ldr	r3, [pc, #196]	; (8005188 <HAL_RCC_OscConfig+0x478>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c8:	f7fc fa90 	bl	80015ec <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ce:	e008      	b.n	80050e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050d0:	f7fc fa8c 	bl	80015ec <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e087      	b.n	80051f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050e2:	4b27      	ldr	r3, [pc, #156]	; (8005180 <HAL_RCC_OscConfig+0x470>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1f0      	bne.n	80050d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	69da      	ldr	r2, [r3, #28]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	431a      	orrs	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	019b      	lsls	r3, r3, #6
 80050fe:	431a      	orrs	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005104:	085b      	lsrs	r3, r3, #1
 8005106:	3b01      	subs	r3, #1
 8005108:	041b      	lsls	r3, r3, #16
 800510a:	431a      	orrs	r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005110:	061b      	lsls	r3, r3, #24
 8005112:	491b      	ldr	r1, [pc, #108]	; (8005180 <HAL_RCC_OscConfig+0x470>)
 8005114:	4313      	orrs	r3, r2
 8005116:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005118:	4b1b      	ldr	r3, [pc, #108]	; (8005188 <HAL_RCC_OscConfig+0x478>)
 800511a:	2201      	movs	r2, #1
 800511c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800511e:	f7fc fa65 	bl	80015ec <HAL_GetTick>
 8005122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005124:	e008      	b.n	8005138 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005126:	f7fc fa61 	bl	80015ec <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	2b02      	cmp	r3, #2
 8005132:	d901      	bls.n	8005138 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e05c      	b.n	80051f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005138:	4b11      	ldr	r3, [pc, #68]	; (8005180 <HAL_RCC_OscConfig+0x470>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d0f0      	beq.n	8005126 <HAL_RCC_OscConfig+0x416>
 8005144:	e054      	b.n	80051f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005146:	4b10      	ldr	r3, [pc, #64]	; (8005188 <HAL_RCC_OscConfig+0x478>)
 8005148:	2200      	movs	r2, #0
 800514a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800514c:	f7fc fa4e 	bl	80015ec <HAL_GetTick>
 8005150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005152:	e008      	b.n	8005166 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005154:	f7fc fa4a 	bl	80015ec <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b02      	cmp	r3, #2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e045      	b.n	80051f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005166:	4b06      	ldr	r3, [pc, #24]	; (8005180 <HAL_RCC_OscConfig+0x470>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1f0      	bne.n	8005154 <HAL_RCC_OscConfig+0x444>
 8005172:	e03d      	b.n	80051f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	2b01      	cmp	r3, #1
 800517a:	d107      	bne.n	800518c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e038      	b.n	80051f2 <HAL_RCC_OscConfig+0x4e2>
 8005180:	40023800 	.word	0x40023800
 8005184:	40007000 	.word	0x40007000
 8005188:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800518c:	4b1b      	ldr	r3, [pc, #108]	; (80051fc <HAL_RCC_OscConfig+0x4ec>)
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	2b01      	cmp	r3, #1
 8005198:	d028      	beq.n	80051ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d121      	bne.n	80051ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d11a      	bne.n	80051ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80051bc:	4013      	ands	r3, r2
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80051c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d111      	bne.n	80051ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d2:	085b      	lsrs	r3, r3, #1
 80051d4:	3b01      	subs	r3, #1
 80051d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051d8:	429a      	cmp	r2, r3
 80051da:	d107      	bne.n	80051ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d001      	beq.n	80051f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e000      	b.n	80051f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3718      	adds	r7, #24
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	40023800 	.word	0x40023800

08005200 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d101      	bne.n	8005214 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e0cc      	b.n	80053ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005214:	4b68      	ldr	r3, [pc, #416]	; (80053b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0307 	and.w	r3, r3, #7
 800521c:	683a      	ldr	r2, [r7, #0]
 800521e:	429a      	cmp	r2, r3
 8005220:	d90c      	bls.n	800523c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005222:	4b65      	ldr	r3, [pc, #404]	; (80053b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	b2d2      	uxtb	r2, r2
 8005228:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800522a:	4b63      	ldr	r3, [pc, #396]	; (80053b8 <HAL_RCC_ClockConfig+0x1b8>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0307 	and.w	r3, r3, #7
 8005232:	683a      	ldr	r2, [r7, #0]
 8005234:	429a      	cmp	r2, r3
 8005236:	d001      	beq.n	800523c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e0b8      	b.n	80053ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0302 	and.w	r3, r3, #2
 8005244:	2b00      	cmp	r3, #0
 8005246:	d020      	beq.n	800528a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0304 	and.w	r3, r3, #4
 8005250:	2b00      	cmp	r3, #0
 8005252:	d005      	beq.n	8005260 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005254:	4b59      	ldr	r3, [pc, #356]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	4a58      	ldr	r2, [pc, #352]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 800525a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800525e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0308 	and.w	r3, r3, #8
 8005268:	2b00      	cmp	r3, #0
 800526a:	d005      	beq.n	8005278 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800526c:	4b53      	ldr	r3, [pc, #332]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	4a52      	ldr	r2, [pc, #328]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 8005272:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005276:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005278:	4b50      	ldr	r3, [pc, #320]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	494d      	ldr	r1, [pc, #308]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 8005286:	4313      	orrs	r3, r2
 8005288:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	2b00      	cmp	r3, #0
 8005294:	d044      	beq.n	8005320 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	2b01      	cmp	r3, #1
 800529c:	d107      	bne.n	80052ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800529e:	4b47      	ldr	r3, [pc, #284]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d119      	bne.n	80052de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e07f      	b.n	80053ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d003      	beq.n	80052be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052ba:	2b03      	cmp	r3, #3
 80052bc:	d107      	bne.n	80052ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052be:	4b3f      	ldr	r3, [pc, #252]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d109      	bne.n	80052de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e06f      	b.n	80053ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052ce:	4b3b      	ldr	r3, [pc, #236]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0302 	and.w	r3, r3, #2
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d101      	bne.n	80052de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e067      	b.n	80053ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052de:	4b37      	ldr	r3, [pc, #220]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f023 0203 	bic.w	r2, r3, #3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	4934      	ldr	r1, [pc, #208]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052f0:	f7fc f97c 	bl	80015ec <HAL_GetTick>
 80052f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052f6:	e00a      	b.n	800530e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052f8:	f7fc f978 	bl	80015ec <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	f241 3288 	movw	r2, #5000	; 0x1388
 8005306:	4293      	cmp	r3, r2
 8005308:	d901      	bls.n	800530e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e04f      	b.n	80053ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800530e:	4b2b      	ldr	r3, [pc, #172]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f003 020c 	and.w	r2, r3, #12
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	429a      	cmp	r2, r3
 800531e:	d1eb      	bne.n	80052f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005320:	4b25      	ldr	r3, [pc, #148]	; (80053b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0307 	and.w	r3, r3, #7
 8005328:	683a      	ldr	r2, [r7, #0]
 800532a:	429a      	cmp	r2, r3
 800532c:	d20c      	bcs.n	8005348 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800532e:	4b22      	ldr	r3, [pc, #136]	; (80053b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	b2d2      	uxtb	r2, r2
 8005334:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005336:	4b20      	ldr	r3, [pc, #128]	; (80053b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0307 	and.w	r3, r3, #7
 800533e:	683a      	ldr	r2, [r7, #0]
 8005340:	429a      	cmp	r2, r3
 8005342:	d001      	beq.n	8005348 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e032      	b.n	80053ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0304 	and.w	r3, r3, #4
 8005350:	2b00      	cmp	r3, #0
 8005352:	d008      	beq.n	8005366 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005354:	4b19      	ldr	r3, [pc, #100]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	4916      	ldr	r1, [pc, #88]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 8005362:	4313      	orrs	r3, r2
 8005364:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0308 	and.w	r3, r3, #8
 800536e:	2b00      	cmp	r3, #0
 8005370:	d009      	beq.n	8005386 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005372:	4b12      	ldr	r3, [pc, #72]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	00db      	lsls	r3, r3, #3
 8005380:	490e      	ldr	r1, [pc, #56]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 8005382:	4313      	orrs	r3, r2
 8005384:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005386:	f000 f821 	bl	80053cc <HAL_RCC_GetSysClockFreq>
 800538a:	4602      	mov	r2, r0
 800538c:	4b0b      	ldr	r3, [pc, #44]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	091b      	lsrs	r3, r3, #4
 8005392:	f003 030f 	and.w	r3, r3, #15
 8005396:	490a      	ldr	r1, [pc, #40]	; (80053c0 <HAL_RCC_ClockConfig+0x1c0>)
 8005398:	5ccb      	ldrb	r3, [r1, r3]
 800539a:	fa22 f303 	lsr.w	r3, r2, r3
 800539e:	4a09      	ldr	r2, [pc, #36]	; (80053c4 <HAL_RCC_ClockConfig+0x1c4>)
 80053a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80053a2:	4b09      	ldr	r3, [pc, #36]	; (80053c8 <HAL_RCC_ClockConfig+0x1c8>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f7fc f8dc 	bl	8001564 <HAL_InitTick>

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3710      	adds	r7, #16
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	40023c00 	.word	0x40023c00
 80053bc:	40023800 	.word	0x40023800
 80053c0:	0800b4dc 	.word	0x0800b4dc
 80053c4:	20000000 	.word	0x20000000
 80053c8:	20000004 	.word	0x20000004

080053cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053d0:	b094      	sub	sp, #80	; 0x50
 80053d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80053d4:	2300      	movs	r3, #0
 80053d6:	647b      	str	r3, [r7, #68]	; 0x44
 80053d8:	2300      	movs	r3, #0
 80053da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053dc:	2300      	movs	r3, #0
 80053de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80053e0:	2300      	movs	r3, #0
 80053e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053e4:	4b79      	ldr	r3, [pc, #484]	; (80055cc <HAL_RCC_GetSysClockFreq+0x200>)
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f003 030c 	and.w	r3, r3, #12
 80053ec:	2b08      	cmp	r3, #8
 80053ee:	d00d      	beq.n	800540c <HAL_RCC_GetSysClockFreq+0x40>
 80053f0:	2b08      	cmp	r3, #8
 80053f2:	f200 80e1 	bhi.w	80055b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d002      	beq.n	8005400 <HAL_RCC_GetSysClockFreq+0x34>
 80053fa:	2b04      	cmp	r3, #4
 80053fc:	d003      	beq.n	8005406 <HAL_RCC_GetSysClockFreq+0x3a>
 80053fe:	e0db      	b.n	80055b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005400:	4b73      	ldr	r3, [pc, #460]	; (80055d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005402:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005404:	e0db      	b.n	80055be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005406:	4b73      	ldr	r3, [pc, #460]	; (80055d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005408:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800540a:	e0d8      	b.n	80055be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800540c:	4b6f      	ldr	r3, [pc, #444]	; (80055cc <HAL_RCC_GetSysClockFreq+0x200>)
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005414:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005416:	4b6d      	ldr	r3, [pc, #436]	; (80055cc <HAL_RCC_GetSysClockFreq+0x200>)
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d063      	beq.n	80054ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005422:	4b6a      	ldr	r3, [pc, #424]	; (80055cc <HAL_RCC_GetSysClockFreq+0x200>)
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	099b      	lsrs	r3, r3, #6
 8005428:	2200      	movs	r2, #0
 800542a:	63bb      	str	r3, [r7, #56]	; 0x38
 800542c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800542e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005434:	633b      	str	r3, [r7, #48]	; 0x30
 8005436:	2300      	movs	r3, #0
 8005438:	637b      	str	r3, [r7, #52]	; 0x34
 800543a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800543e:	4622      	mov	r2, r4
 8005440:	462b      	mov	r3, r5
 8005442:	f04f 0000 	mov.w	r0, #0
 8005446:	f04f 0100 	mov.w	r1, #0
 800544a:	0159      	lsls	r1, r3, #5
 800544c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005450:	0150      	lsls	r0, r2, #5
 8005452:	4602      	mov	r2, r0
 8005454:	460b      	mov	r3, r1
 8005456:	4621      	mov	r1, r4
 8005458:	1a51      	subs	r1, r2, r1
 800545a:	6139      	str	r1, [r7, #16]
 800545c:	4629      	mov	r1, r5
 800545e:	eb63 0301 	sbc.w	r3, r3, r1
 8005462:	617b      	str	r3, [r7, #20]
 8005464:	f04f 0200 	mov.w	r2, #0
 8005468:	f04f 0300 	mov.w	r3, #0
 800546c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005470:	4659      	mov	r1, fp
 8005472:	018b      	lsls	r3, r1, #6
 8005474:	4651      	mov	r1, sl
 8005476:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800547a:	4651      	mov	r1, sl
 800547c:	018a      	lsls	r2, r1, #6
 800547e:	4651      	mov	r1, sl
 8005480:	ebb2 0801 	subs.w	r8, r2, r1
 8005484:	4659      	mov	r1, fp
 8005486:	eb63 0901 	sbc.w	r9, r3, r1
 800548a:	f04f 0200 	mov.w	r2, #0
 800548e:	f04f 0300 	mov.w	r3, #0
 8005492:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005496:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800549a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800549e:	4690      	mov	r8, r2
 80054a0:	4699      	mov	r9, r3
 80054a2:	4623      	mov	r3, r4
 80054a4:	eb18 0303 	adds.w	r3, r8, r3
 80054a8:	60bb      	str	r3, [r7, #8]
 80054aa:	462b      	mov	r3, r5
 80054ac:	eb49 0303 	adc.w	r3, r9, r3
 80054b0:	60fb      	str	r3, [r7, #12]
 80054b2:	f04f 0200 	mov.w	r2, #0
 80054b6:	f04f 0300 	mov.w	r3, #0
 80054ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80054be:	4629      	mov	r1, r5
 80054c0:	024b      	lsls	r3, r1, #9
 80054c2:	4621      	mov	r1, r4
 80054c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80054c8:	4621      	mov	r1, r4
 80054ca:	024a      	lsls	r2, r1, #9
 80054cc:	4610      	mov	r0, r2
 80054ce:	4619      	mov	r1, r3
 80054d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054d2:	2200      	movs	r2, #0
 80054d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80054d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80054dc:	f7fa fe74 	bl	80001c8 <__aeabi_uldivmod>
 80054e0:	4602      	mov	r2, r0
 80054e2:	460b      	mov	r3, r1
 80054e4:	4613      	mov	r3, r2
 80054e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054e8:	e058      	b.n	800559c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054ea:	4b38      	ldr	r3, [pc, #224]	; (80055cc <HAL_RCC_GetSysClockFreq+0x200>)
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	099b      	lsrs	r3, r3, #6
 80054f0:	2200      	movs	r2, #0
 80054f2:	4618      	mov	r0, r3
 80054f4:	4611      	mov	r1, r2
 80054f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80054fa:	623b      	str	r3, [r7, #32]
 80054fc:	2300      	movs	r3, #0
 80054fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005500:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005504:	4642      	mov	r2, r8
 8005506:	464b      	mov	r3, r9
 8005508:	f04f 0000 	mov.w	r0, #0
 800550c:	f04f 0100 	mov.w	r1, #0
 8005510:	0159      	lsls	r1, r3, #5
 8005512:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005516:	0150      	lsls	r0, r2, #5
 8005518:	4602      	mov	r2, r0
 800551a:	460b      	mov	r3, r1
 800551c:	4641      	mov	r1, r8
 800551e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005522:	4649      	mov	r1, r9
 8005524:	eb63 0b01 	sbc.w	fp, r3, r1
 8005528:	f04f 0200 	mov.w	r2, #0
 800552c:	f04f 0300 	mov.w	r3, #0
 8005530:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005534:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005538:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800553c:	ebb2 040a 	subs.w	r4, r2, sl
 8005540:	eb63 050b 	sbc.w	r5, r3, fp
 8005544:	f04f 0200 	mov.w	r2, #0
 8005548:	f04f 0300 	mov.w	r3, #0
 800554c:	00eb      	lsls	r3, r5, #3
 800554e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005552:	00e2      	lsls	r2, r4, #3
 8005554:	4614      	mov	r4, r2
 8005556:	461d      	mov	r5, r3
 8005558:	4643      	mov	r3, r8
 800555a:	18e3      	adds	r3, r4, r3
 800555c:	603b      	str	r3, [r7, #0]
 800555e:	464b      	mov	r3, r9
 8005560:	eb45 0303 	adc.w	r3, r5, r3
 8005564:	607b      	str	r3, [r7, #4]
 8005566:	f04f 0200 	mov.w	r2, #0
 800556a:	f04f 0300 	mov.w	r3, #0
 800556e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005572:	4629      	mov	r1, r5
 8005574:	028b      	lsls	r3, r1, #10
 8005576:	4621      	mov	r1, r4
 8005578:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800557c:	4621      	mov	r1, r4
 800557e:	028a      	lsls	r2, r1, #10
 8005580:	4610      	mov	r0, r2
 8005582:	4619      	mov	r1, r3
 8005584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005586:	2200      	movs	r2, #0
 8005588:	61bb      	str	r3, [r7, #24]
 800558a:	61fa      	str	r2, [r7, #28]
 800558c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005590:	f7fa fe1a 	bl	80001c8 <__aeabi_uldivmod>
 8005594:	4602      	mov	r2, r0
 8005596:	460b      	mov	r3, r1
 8005598:	4613      	mov	r3, r2
 800559a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800559c:	4b0b      	ldr	r3, [pc, #44]	; (80055cc <HAL_RCC_GetSysClockFreq+0x200>)
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	0c1b      	lsrs	r3, r3, #16
 80055a2:	f003 0303 	and.w	r3, r3, #3
 80055a6:	3301      	adds	r3, #1
 80055a8:	005b      	lsls	r3, r3, #1
 80055aa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80055ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80055b6:	e002      	b.n	80055be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055b8:	4b05      	ldr	r3, [pc, #20]	; (80055d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80055ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80055bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3750      	adds	r7, #80	; 0x50
 80055c4:	46bd      	mov	sp, r7
 80055c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055ca:	bf00      	nop
 80055cc:	40023800 	.word	0x40023800
 80055d0:	00f42400 	.word	0x00f42400
 80055d4:	007a1200 	.word	0x007a1200

080055d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055d8:	b480      	push	{r7}
 80055da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055dc:	4b03      	ldr	r3, [pc, #12]	; (80055ec <HAL_RCC_GetHCLKFreq+0x14>)
 80055de:	681b      	ldr	r3, [r3, #0]
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	20000000 	.word	0x20000000

080055f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80055f4:	f7ff fff0 	bl	80055d8 <HAL_RCC_GetHCLKFreq>
 80055f8:	4602      	mov	r2, r0
 80055fa:	4b05      	ldr	r3, [pc, #20]	; (8005610 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	0a9b      	lsrs	r3, r3, #10
 8005600:	f003 0307 	and.w	r3, r3, #7
 8005604:	4903      	ldr	r1, [pc, #12]	; (8005614 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005606:	5ccb      	ldrb	r3, [r1, r3]
 8005608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800560c:	4618      	mov	r0, r3
 800560e:	bd80      	pop	{r7, pc}
 8005610:	40023800 	.word	0x40023800
 8005614:	0800b4ec 	.word	0x0800b4ec

08005618 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800561c:	f7ff ffdc 	bl	80055d8 <HAL_RCC_GetHCLKFreq>
 8005620:	4602      	mov	r2, r0
 8005622:	4b05      	ldr	r3, [pc, #20]	; (8005638 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	0b5b      	lsrs	r3, r3, #13
 8005628:	f003 0307 	and.w	r3, r3, #7
 800562c:	4903      	ldr	r1, [pc, #12]	; (800563c <HAL_RCC_GetPCLK2Freq+0x24>)
 800562e:	5ccb      	ldrb	r3, [r1, r3]
 8005630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005634:	4618      	mov	r0, r3
 8005636:	bd80      	pop	{r7, pc}
 8005638:	40023800 	.word	0x40023800
 800563c:	0800b4ec 	.word	0x0800b4ec

08005640 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005648:	2300      	movs	r3, #0
 800564a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800564c:	2300      	movs	r3, #0
 800564e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0301 	and.w	r3, r3, #1
 8005658:	2b00      	cmp	r3, #0
 800565a:	d105      	bne.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005664:	2b00      	cmp	r3, #0
 8005666:	d035      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005668:	4b62      	ldr	r3, [pc, #392]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800566a:	2200      	movs	r2, #0
 800566c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800566e:	f7fb ffbd 	bl	80015ec <HAL_GetTick>
 8005672:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005674:	e008      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005676:	f7fb ffb9 	bl	80015ec <HAL_GetTick>
 800567a:	4602      	mov	r2, r0
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	2b02      	cmp	r3, #2
 8005682:	d901      	bls.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	e0b0      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005688:	4b5b      	ldr	r3, [pc, #364]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d1f0      	bne.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	019a      	lsls	r2, r3, #6
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	071b      	lsls	r3, r3, #28
 80056a0:	4955      	ldr	r1, [pc, #340]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80056a8:	4b52      	ldr	r3, [pc, #328]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80056aa:	2201      	movs	r2, #1
 80056ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80056ae:	f7fb ff9d 	bl	80015ec <HAL_GetTick>
 80056b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056b4:	e008      	b.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80056b6:	f7fb ff99 	bl	80015ec <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d901      	bls.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e090      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056c8:	4b4b      	ldr	r3, [pc, #300]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d0f0      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0302 	and.w	r3, r3, #2
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f000 8083 	beq.w	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80056e2:	2300      	movs	r3, #0
 80056e4:	60fb      	str	r3, [r7, #12]
 80056e6:	4b44      	ldr	r3, [pc, #272]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ea:	4a43      	ldr	r2, [pc, #268]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056f0:	6413      	str	r3, [r2, #64]	; 0x40
 80056f2:	4b41      	ldr	r3, [pc, #260]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056fa:	60fb      	str	r3, [r7, #12]
 80056fc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80056fe:	4b3f      	ldr	r3, [pc, #252]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a3e      	ldr	r2, [pc, #248]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005708:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800570a:	f7fb ff6f 	bl	80015ec <HAL_GetTick>
 800570e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005710:	e008      	b.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005712:	f7fb ff6b 	bl	80015ec <HAL_GetTick>
 8005716:	4602      	mov	r2, r0
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	2b02      	cmp	r3, #2
 800571e:	d901      	bls.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e062      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005724:	4b35      	ldr	r3, [pc, #212]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800572c:	2b00      	cmp	r3, #0
 800572e:	d0f0      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005730:	4b31      	ldr	r3, [pc, #196]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005734:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005738:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d02f      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	429a      	cmp	r2, r3
 800574c:	d028      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800574e:	4b2a      	ldr	r3, [pc, #168]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005752:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005756:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005758:	4b29      	ldr	r3, [pc, #164]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800575a:	2201      	movs	r2, #1
 800575c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800575e:	4b28      	ldr	r3, [pc, #160]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005760:	2200      	movs	r2, #0
 8005762:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005764:	4a24      	ldr	r2, [pc, #144]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800576a:	4b23      	ldr	r3, [pc, #140]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800576c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	2b01      	cmp	r3, #1
 8005774:	d114      	bne.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005776:	f7fb ff39 	bl	80015ec <HAL_GetTick>
 800577a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800577c:	e00a      	b.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800577e:	f7fb ff35 	bl	80015ec <HAL_GetTick>
 8005782:	4602      	mov	r2, r0
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	f241 3288 	movw	r2, #5000	; 0x1388
 800578c:	4293      	cmp	r3, r2
 800578e:	d901      	bls.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e02a      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005794:	4b18      	ldr	r3, [pc, #96]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005798:	f003 0302 	and.w	r3, r3, #2
 800579c:	2b00      	cmp	r3, #0
 800579e:	d0ee      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057ac:	d10d      	bne.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80057ae:	4b12      	ldr	r3, [pc, #72]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80057be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057c2:	490d      	ldr	r1, [pc, #52]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057c4:	4313      	orrs	r3, r2
 80057c6:	608b      	str	r3, [r1, #8]
 80057c8:	e005      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80057ca:	4b0b      	ldr	r3, [pc, #44]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	4a0a      	ldr	r2, [pc, #40]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057d0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80057d4:	6093      	str	r3, [r2, #8]
 80057d6:	4b08      	ldr	r3, [pc, #32]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057e2:	4905      	ldr	r1, [pc, #20]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3718      	adds	r7, #24
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	42470068 	.word	0x42470068
 80057f8:	40023800 	.word	0x40023800
 80057fc:	40007000 	.word	0x40007000
 8005800:	42470e40 	.word	0x42470e40

08005804 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005804:	b480      	push	{r7}
 8005806:	b087      	sub	sp, #28
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800580c:	2300      	movs	r3, #0
 800580e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005810:	2300      	movs	r3, #0
 8005812:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005814:	2300      	movs	r3, #0
 8005816:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005818:	2300      	movs	r3, #0
 800581a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d13e      	bne.n	80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005822:	4b23      	ldr	r3, [pc, #140]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800582a:	60fb      	str	r3, [r7, #12]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d005      	beq.n	800583e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d12f      	bne.n	8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005838:	4b1e      	ldr	r3, [pc, #120]	; (80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800583a:	617b      	str	r3, [r7, #20]
          break;
 800583c:	e02f      	b.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800583e:	4b1c      	ldr	r3, [pc, #112]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005846:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800584a:	d108      	bne.n	800585e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800584c:	4b18      	ldr	r3, [pc, #96]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005854:	4a18      	ldr	r2, [pc, #96]	; (80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005856:	fbb2 f3f3 	udiv	r3, r2, r3
 800585a:	613b      	str	r3, [r7, #16]
 800585c:	e007      	b.n	800586e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800585e:	4b14      	ldr	r3, [pc, #80]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005866:	4a15      	ldr	r2, [pc, #84]	; (80058bc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005868:	fbb2 f3f3 	udiv	r3, r2, r3
 800586c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800586e:	4b10      	ldr	r3, [pc, #64]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005870:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005874:	099b      	lsrs	r3, r3, #6
 8005876:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	fb02 f303 	mul.w	r3, r2, r3
 8005880:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005882:	4b0b      	ldr	r3, [pc, #44]	; (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005884:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005888:	0f1b      	lsrs	r3, r3, #28
 800588a:	f003 0307 	and.w	r3, r3, #7
 800588e:	68ba      	ldr	r2, [r7, #8]
 8005890:	fbb2 f3f3 	udiv	r3, r2, r3
 8005894:	617b      	str	r3, [r7, #20]
          break;
 8005896:	e002      	b.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005898:	2300      	movs	r3, #0
 800589a:	617b      	str	r3, [r7, #20]
          break;
 800589c:	bf00      	nop
        }
      }
      break;
 800589e:	bf00      	nop
    }
  }
  return frequency;
 80058a0:	697b      	ldr	r3, [r7, #20]
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	371c      	adds	r7, #28
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	40023800 	.word	0x40023800
 80058b4:	00bb8000 	.word	0x00bb8000
 80058b8:	007a1200 	.word	0x007a1200
 80058bc:	00f42400 	.word	0x00f42400

080058c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d101      	bne.n	80058d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e07b      	b.n	80059ca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d108      	bne.n	80058ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058e2:	d009      	beq.n	80058f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	61da      	str	r2, [r3, #28]
 80058ea:	e005      	b.n	80058f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	d106      	bne.n	8005918 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f7fb fbe8 	bl	80010e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2202      	movs	r2, #2
 800591c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800592e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005940:	431a      	orrs	r2, r3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800594a:	431a      	orrs	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	f003 0302 	and.w	r3, r3, #2
 8005954:	431a      	orrs	r2, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	f003 0301 	and.w	r3, r3, #1
 800595e:	431a      	orrs	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005968:	431a      	orrs	r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	69db      	ldr	r3, [r3, #28]
 800596e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005972:	431a      	orrs	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a1b      	ldr	r3, [r3, #32]
 8005978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800597c:	ea42 0103 	orr.w	r1, r2, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005984:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	430a      	orrs	r2, r1
 800598e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	699b      	ldr	r3, [r3, #24]
 8005994:	0c1b      	lsrs	r3, r3, #16
 8005996:	f003 0104 	and.w	r1, r3, #4
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599e:	f003 0210 	and.w	r2, r3, #16
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	430a      	orrs	r2, r1
 80059a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	69da      	ldr	r2, [r3, #28]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3708      	adds	r7, #8
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b088      	sub	sp, #32
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	60f8      	str	r0, [r7, #12]
 80059da:	60b9      	str	r1, [r7, #8]
 80059dc:	603b      	str	r3, [r7, #0]
 80059de:	4613      	mov	r3, r2
 80059e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80059e2:	2300      	movs	r3, #0
 80059e4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d101      	bne.n	80059f4 <HAL_SPI_Transmit+0x22>
 80059f0:	2302      	movs	r3, #2
 80059f2:	e126      	b.n	8005c42 <HAL_SPI_Transmit+0x270>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059fc:	f7fb fdf6 	bl	80015ec <HAL_GetTick>
 8005a00:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005a02:	88fb      	ldrh	r3, [r7, #6]
 8005a04:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d002      	beq.n	8005a18 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005a12:	2302      	movs	r3, #2
 8005a14:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a16:	e10b      	b.n	8005c30 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d002      	beq.n	8005a24 <HAL_SPI_Transmit+0x52>
 8005a1e:	88fb      	ldrh	r3, [r7, #6]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d102      	bne.n	8005a2a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a28:	e102      	b.n	8005c30 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2203      	movs	r2, #3
 8005a2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	68ba      	ldr	r2, [r7, #8]
 8005a3c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	88fa      	ldrh	r2, [r7, #6]
 8005a42:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	88fa      	ldrh	r2, [r7, #6]
 8005a48:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a70:	d10f      	bne.n	8005a92 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a80:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a90:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a9c:	2b40      	cmp	r3, #64	; 0x40
 8005a9e:	d007      	beq.n	8005ab0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005aae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ab8:	d14b      	bne.n	8005b52 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d002      	beq.n	8005ac8 <HAL_SPI_Transmit+0xf6>
 8005ac2:	8afb      	ldrh	r3, [r7, #22]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d13e      	bne.n	8005b46 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005acc:	881a      	ldrh	r2, [r3, #0]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad8:	1c9a      	adds	r2, r3, #2
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005aec:	e02b      	b.n	8005b46 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f003 0302 	and.w	r3, r3, #2
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d112      	bne.n	8005b22 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b00:	881a      	ldrh	r2, [r3, #0]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0c:	1c9a      	adds	r2, r3, #2
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005b20:	e011      	b.n	8005b46 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b22:	f7fb fd63 	bl	80015ec <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	683a      	ldr	r2, [r7, #0]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d803      	bhi.n	8005b3a <HAL_SPI_Transmit+0x168>
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b38:	d102      	bne.n	8005b40 <HAL_SPI_Transmit+0x16e>
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d102      	bne.n	8005b46 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b44:	e074      	b.n	8005c30 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1ce      	bne.n	8005aee <HAL_SPI_Transmit+0x11c>
 8005b50:	e04c      	b.n	8005bec <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d002      	beq.n	8005b60 <HAL_SPI_Transmit+0x18e>
 8005b5a:	8afb      	ldrh	r3, [r7, #22]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d140      	bne.n	8005be2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	330c      	adds	r3, #12
 8005b6a:	7812      	ldrb	r2, [r2, #0]
 8005b6c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b72:	1c5a      	adds	r2, r3, #1
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005b86:	e02c      	b.n	8005be2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	f003 0302 	and.w	r3, r3, #2
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d113      	bne.n	8005bbe <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	330c      	adds	r3, #12
 8005ba0:	7812      	ldrb	r2, [r2, #0]
 8005ba2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba8:	1c5a      	adds	r2, r3, #1
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	86da      	strh	r2, [r3, #54]	; 0x36
 8005bbc:	e011      	b.n	8005be2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bbe:	f7fb fd15 	bl	80015ec <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	683a      	ldr	r2, [r7, #0]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d803      	bhi.n	8005bd6 <HAL_SPI_Transmit+0x204>
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd4:	d102      	bne.n	8005bdc <HAL_SPI_Transmit+0x20a>
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d102      	bne.n	8005be2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005be0:	e026      	b.n	8005c30 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1cd      	bne.n	8005b88 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bec:	69ba      	ldr	r2, [r7, #24]
 8005bee:	6839      	ldr	r1, [r7, #0]
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f000 fbcb 	bl	800638c <SPI_EndRxTxTransaction>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d002      	beq.n	8005c02 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2220      	movs	r2, #32
 8005c00:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10a      	bne.n	8005c20 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	613b      	str	r3, [r7, #16]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	613b      	str	r3, [r7, #16]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	613b      	str	r3, [r7, #16]
 8005c1e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d002      	beq.n	8005c2e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	77fb      	strb	r3, [r7, #31]
 8005c2c:	e000      	b.n	8005c30 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005c2e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005c40:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3720      	adds	r7, #32
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b088      	sub	sp, #32
 8005c4e:	af02      	add	r7, sp, #8
 8005c50:	60f8      	str	r0, [r7, #12]
 8005c52:	60b9      	str	r1, [r7, #8]
 8005c54:	603b      	str	r3, [r7, #0]
 8005c56:	4613      	mov	r3, r2
 8005c58:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c66:	d112      	bne.n	8005c8e <HAL_SPI_Receive+0x44>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d10e      	bne.n	8005c8e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2204      	movs	r2, #4
 8005c74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005c78:	88fa      	ldrh	r2, [r7, #6]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	9300      	str	r3, [sp, #0]
 8005c7e:	4613      	mov	r3, r2
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	68b9      	ldr	r1, [r7, #8]
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	f000 f8f1 	bl	8005e6c <HAL_SPI_TransmitReceive>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	e0ea      	b.n	8005e64 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d101      	bne.n	8005c9c <HAL_SPI_Receive+0x52>
 8005c98:	2302      	movs	r3, #2
 8005c9a:	e0e3      	b.n	8005e64 <HAL_SPI_Receive+0x21a>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ca4:	f7fb fca2 	bl	80015ec <HAL_GetTick>
 8005ca8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d002      	beq.n	8005cbc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005cb6:	2302      	movs	r3, #2
 8005cb8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005cba:	e0ca      	b.n	8005e52 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d002      	beq.n	8005cc8 <HAL_SPI_Receive+0x7e>
 8005cc2:	88fb      	ldrh	r3, [r7, #6]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d102      	bne.n	8005cce <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ccc:	e0c1      	b.n	8005e52 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2204      	movs	r2, #4
 8005cd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	88fa      	ldrh	r2, [r7, #6]
 8005ce6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	88fa      	ldrh	r2, [r7, #6]
 8005cec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d14:	d10f      	bne.n	8005d36 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d24:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005d34:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d40:	2b40      	cmp	r3, #64	; 0x40
 8005d42:	d007      	beq.n	8005d54 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d52:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d162      	bne.n	8005e22 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005d5c:	e02e      	b.n	8005dbc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	f003 0301 	and.w	r3, r3, #1
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d115      	bne.n	8005d98 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f103 020c 	add.w	r2, r3, #12
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d78:	7812      	ldrb	r2, [r2, #0]
 8005d7a:	b2d2      	uxtb	r2, r2
 8005d7c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d82:	1c5a      	adds	r2, r3, #1
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	3b01      	subs	r3, #1
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d96:	e011      	b.n	8005dbc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d98:	f7fb fc28 	bl	80015ec <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	683a      	ldr	r2, [r7, #0]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d803      	bhi.n	8005db0 <HAL_SPI_Receive+0x166>
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dae:	d102      	bne.n	8005db6 <HAL_SPI_Receive+0x16c>
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d102      	bne.n	8005dbc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005dba:	e04a      	b.n	8005e52 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1cb      	bne.n	8005d5e <HAL_SPI_Receive+0x114>
 8005dc6:	e031      	b.n	8005e2c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d113      	bne.n	8005dfe <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68da      	ldr	r2, [r3, #12]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de0:	b292      	uxth	r2, r2
 8005de2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de8:	1c9a      	adds	r2, r3, #2
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	3b01      	subs	r3, #1
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005dfc:	e011      	b.n	8005e22 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dfe:	f7fb fbf5 	bl	80015ec <HAL_GetTick>
 8005e02:	4602      	mov	r2, r0
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	683a      	ldr	r2, [r7, #0]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d803      	bhi.n	8005e16 <HAL_SPI_Receive+0x1cc>
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e14:	d102      	bne.n	8005e1c <HAL_SPI_Receive+0x1d2>
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d102      	bne.n	8005e22 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005e20:	e017      	b.n	8005e52 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d1cd      	bne.n	8005dc8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	6839      	ldr	r1, [r7, #0]
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	f000 fa45 	bl	80062c0 <SPI_EndRxTransaction>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d002      	beq.n	8005e42 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2220      	movs	r2, #32
 8005e40:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d002      	beq.n	8005e50 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	75fb      	strb	r3, [r7, #23]
 8005e4e:	e000      	b.n	8005e52 <HAL_SPI_Receive+0x208>
  }

error :
 8005e50:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3718      	adds	r7, #24
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b08c      	sub	sp, #48	; 0x30
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
 8005e78:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d101      	bne.n	8005e92 <HAL_SPI_TransmitReceive+0x26>
 8005e8e:	2302      	movs	r3, #2
 8005e90:	e18a      	b.n	80061a8 <HAL_SPI_TransmitReceive+0x33c>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e9a:	f7fb fba7 	bl	80015ec <HAL_GetTick>
 8005e9e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005eb0:	887b      	ldrh	r3, [r7, #2]
 8005eb2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005eb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d00f      	beq.n	8005edc <HAL_SPI_TransmitReceive+0x70>
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ec2:	d107      	bne.n	8005ed4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d103      	bne.n	8005ed4 <HAL_SPI_TransmitReceive+0x68>
 8005ecc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ed0:	2b04      	cmp	r3, #4
 8005ed2:	d003      	beq.n	8005edc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005eda:	e15b      	b.n	8006194 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d005      	beq.n	8005eee <HAL_SPI_TransmitReceive+0x82>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d002      	beq.n	8005eee <HAL_SPI_TransmitReceive+0x82>
 8005ee8:	887b      	ldrh	r3, [r7, #2]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d103      	bne.n	8005ef6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ef4:	e14e      	b.n	8006194 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	2b04      	cmp	r3, #4
 8005f00:	d003      	beq.n	8005f0a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2205      	movs	r2, #5
 8005f06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	887a      	ldrh	r2, [r7, #2]
 8005f1a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	887a      	ldrh	r2, [r7, #2]
 8005f20:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	887a      	ldrh	r2, [r7, #2]
 8005f2c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	887a      	ldrh	r2, [r7, #2]
 8005f32:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f4a:	2b40      	cmp	r3, #64	; 0x40
 8005f4c:	d007      	beq.n	8005f5e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f5c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f66:	d178      	bne.n	800605a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d002      	beq.n	8005f76 <HAL_SPI_TransmitReceive+0x10a>
 8005f70:	8b7b      	ldrh	r3, [r7, #26]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d166      	bne.n	8006044 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7a:	881a      	ldrh	r2, [r3, #0]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f86:	1c9a      	adds	r2, r3, #2
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	3b01      	subs	r3, #1
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f9a:	e053      	b.n	8006044 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	f003 0302 	and.w	r3, r3, #2
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d11b      	bne.n	8005fe2 <HAL_SPI_TransmitReceive+0x176>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d016      	beq.n	8005fe2 <HAL_SPI_TransmitReceive+0x176>
 8005fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d113      	bne.n	8005fe2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fbe:	881a      	ldrh	r2, [r3, #0]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fca:	1c9a      	adds	r2, r3, #2
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	f003 0301 	and.w	r3, r3, #1
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d119      	bne.n	8006024 <HAL_SPI_TransmitReceive+0x1b8>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d014      	beq.n	8006024 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68da      	ldr	r2, [r3, #12]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006004:	b292      	uxth	r2, r2
 8006006:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600c:	1c9a      	adds	r2, r3, #2
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006016:	b29b      	uxth	r3, r3
 8006018:	3b01      	subs	r3, #1
 800601a:	b29a      	uxth	r2, r3
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006020:	2301      	movs	r3, #1
 8006022:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006024:	f7fb fae2 	bl	80015ec <HAL_GetTick>
 8006028:	4602      	mov	r2, r0
 800602a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006030:	429a      	cmp	r2, r3
 8006032:	d807      	bhi.n	8006044 <HAL_SPI_TransmitReceive+0x1d8>
 8006034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800603a:	d003      	beq.n	8006044 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006042:	e0a7      	b.n	8006194 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006048:	b29b      	uxth	r3, r3
 800604a:	2b00      	cmp	r3, #0
 800604c:	d1a6      	bne.n	8005f9c <HAL_SPI_TransmitReceive+0x130>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006052:	b29b      	uxth	r3, r3
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1a1      	bne.n	8005f9c <HAL_SPI_TransmitReceive+0x130>
 8006058:	e07c      	b.n	8006154 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d002      	beq.n	8006068 <HAL_SPI_TransmitReceive+0x1fc>
 8006062:	8b7b      	ldrh	r3, [r7, #26]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d16b      	bne.n	8006140 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	330c      	adds	r3, #12
 8006072:	7812      	ldrb	r2, [r2, #0]
 8006074:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607a:	1c5a      	adds	r2, r3, #1
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006084:	b29b      	uxth	r3, r3
 8006086:	3b01      	subs	r3, #1
 8006088:	b29a      	uxth	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800608e:	e057      	b.n	8006140 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	f003 0302 	and.w	r3, r3, #2
 800609a:	2b02      	cmp	r3, #2
 800609c:	d11c      	bne.n	80060d8 <HAL_SPI_TransmitReceive+0x26c>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d017      	beq.n	80060d8 <HAL_SPI_TransmitReceive+0x26c>
 80060a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d114      	bne.n	80060d8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	330c      	adds	r3, #12
 80060b8:	7812      	ldrb	r2, [r2, #0]
 80060ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c0:	1c5a      	adds	r2, r3, #1
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	3b01      	subs	r3, #1
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060d4:	2300      	movs	r3, #0
 80060d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f003 0301 	and.w	r3, r3, #1
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d119      	bne.n	800611a <HAL_SPI_TransmitReceive+0x2ae>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d014      	beq.n	800611a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68da      	ldr	r2, [r3, #12]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fa:	b2d2      	uxtb	r2, r2
 80060fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006102:	1c5a      	adds	r2, r3, #1
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800610c:	b29b      	uxth	r3, r3
 800610e:	3b01      	subs	r3, #1
 8006110:	b29a      	uxth	r2, r3
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006116:	2301      	movs	r3, #1
 8006118:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800611a:	f7fb fa67 	bl	80015ec <HAL_GetTick>
 800611e:	4602      	mov	r2, r0
 8006120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006126:	429a      	cmp	r2, r3
 8006128:	d803      	bhi.n	8006132 <HAL_SPI_TransmitReceive+0x2c6>
 800612a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800612c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006130:	d102      	bne.n	8006138 <HAL_SPI_TransmitReceive+0x2cc>
 8006132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006134:	2b00      	cmp	r3, #0
 8006136:	d103      	bne.n	8006140 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006138:	2303      	movs	r3, #3
 800613a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800613e:	e029      	b.n	8006194 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006144:	b29b      	uxth	r3, r3
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1a2      	bne.n	8006090 <HAL_SPI_TransmitReceive+0x224>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800614e:	b29b      	uxth	r3, r3
 8006150:	2b00      	cmp	r3, #0
 8006152:	d19d      	bne.n	8006090 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006156:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006158:	68f8      	ldr	r0, [r7, #12]
 800615a:	f000 f917 	bl	800638c <SPI_EndRxTxTransaction>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d006      	beq.n	8006172 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2220      	movs	r2, #32
 800616e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006170:	e010      	b.n	8006194 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10b      	bne.n	8006192 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800617a:	2300      	movs	r3, #0
 800617c:	617b      	str	r3, [r7, #20]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	617b      	str	r3, [r7, #20]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	617b      	str	r3, [r7, #20]
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	e000      	b.n	8006194 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006192:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80061a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3730      	adds	r7, #48	; 0x30
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b088      	sub	sp, #32
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	603b      	str	r3, [r7, #0]
 80061bc:	4613      	mov	r3, r2
 80061be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80061c0:	f7fb fa14 	bl	80015ec <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c8:	1a9b      	subs	r3, r3, r2
 80061ca:	683a      	ldr	r2, [r7, #0]
 80061cc:	4413      	add	r3, r2
 80061ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80061d0:	f7fb fa0c 	bl	80015ec <HAL_GetTick>
 80061d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80061d6:	4b39      	ldr	r3, [pc, #228]	; (80062bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	015b      	lsls	r3, r3, #5
 80061dc:	0d1b      	lsrs	r3, r3, #20
 80061de:	69fa      	ldr	r2, [r7, #28]
 80061e0:	fb02 f303 	mul.w	r3, r2, r3
 80061e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061e6:	e054      	b.n	8006292 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ee:	d050      	beq.n	8006292 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061f0:	f7fb f9fc 	bl	80015ec <HAL_GetTick>
 80061f4:	4602      	mov	r2, r0
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	69fa      	ldr	r2, [r7, #28]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d902      	bls.n	8006206 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d13d      	bne.n	8006282 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	685a      	ldr	r2, [r3, #4]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006214:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800621e:	d111      	bne.n	8006244 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006228:	d004      	beq.n	8006234 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006232:	d107      	bne.n	8006244 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006242:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006248:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800624c:	d10f      	bne.n	800626e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800625c:	601a      	str	r2, [r3, #0]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800626c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2201      	movs	r2, #1
 8006272:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2200      	movs	r2, #0
 800627a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	e017      	b.n	80062b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d101      	bne.n	800628c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006288:	2300      	movs	r3, #0
 800628a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	3b01      	subs	r3, #1
 8006290:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	689a      	ldr	r2, [r3, #8]
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	4013      	ands	r3, r2
 800629c:	68ba      	ldr	r2, [r7, #8]
 800629e:	429a      	cmp	r2, r3
 80062a0:	bf0c      	ite	eq
 80062a2:	2301      	moveq	r3, #1
 80062a4:	2300      	movne	r3, #0
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	461a      	mov	r2, r3
 80062aa:	79fb      	ldrb	r3, [r7, #7]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d19b      	bne.n	80061e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3720      	adds	r7, #32
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	20000000 	.word	0x20000000

080062c0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b086      	sub	sp, #24
 80062c4:	af02      	add	r7, sp, #8
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062d4:	d111      	bne.n	80062fa <SPI_EndRxTransaction+0x3a>
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062de:	d004      	beq.n	80062ea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062e8:	d107      	bne.n	80062fa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062f8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006302:	d12a      	bne.n	800635a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800630c:	d012      	beq.n	8006334 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	9300      	str	r3, [sp, #0]
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	2200      	movs	r2, #0
 8006316:	2180      	movs	r1, #128	; 0x80
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	f7ff ff49 	bl	80061b0 <SPI_WaitFlagStateUntilTimeout>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d02d      	beq.n	8006380 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006328:	f043 0220 	orr.w	r2, r3, #32
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006330:	2303      	movs	r3, #3
 8006332:	e026      	b.n	8006382 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	9300      	str	r3, [sp, #0]
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	2200      	movs	r2, #0
 800633c:	2101      	movs	r1, #1
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f7ff ff36 	bl	80061b0 <SPI_WaitFlagStateUntilTimeout>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d01a      	beq.n	8006380 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800634e:	f043 0220 	orr.w	r2, r3, #32
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	e013      	b.n	8006382 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	9300      	str	r3, [sp, #0]
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	2200      	movs	r2, #0
 8006362:	2101      	movs	r1, #1
 8006364:	68f8      	ldr	r0, [r7, #12]
 8006366:	f7ff ff23 	bl	80061b0 <SPI_WaitFlagStateUntilTimeout>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d007      	beq.n	8006380 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006374:	f043 0220 	orr.w	r2, r3, #32
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800637c:	2303      	movs	r3, #3
 800637e:	e000      	b.n	8006382 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
	...

0800638c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b088      	sub	sp, #32
 8006390:	af02      	add	r7, sp, #8
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006398:	4b1b      	ldr	r3, [pc, #108]	; (8006408 <SPI_EndRxTxTransaction+0x7c>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a1b      	ldr	r2, [pc, #108]	; (800640c <SPI_EndRxTxTransaction+0x80>)
 800639e:	fba2 2303 	umull	r2, r3, r2, r3
 80063a2:	0d5b      	lsrs	r3, r3, #21
 80063a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80063a8:	fb02 f303 	mul.w	r3, r2, r3
 80063ac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063b6:	d112      	bne.n	80063de <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	9300      	str	r3, [sp, #0]
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	2200      	movs	r2, #0
 80063c0:	2180      	movs	r1, #128	; 0x80
 80063c2:	68f8      	ldr	r0, [r7, #12]
 80063c4:	f7ff fef4 	bl	80061b0 <SPI_WaitFlagStateUntilTimeout>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d016      	beq.n	80063fc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063d2:	f043 0220 	orr.w	r2, r3, #32
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e00f      	b.n	80063fe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00a      	beq.n	80063fa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	3b01      	subs	r3, #1
 80063e8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063f4:	2b80      	cmp	r3, #128	; 0x80
 80063f6:	d0f2      	beq.n	80063de <SPI_EndRxTxTransaction+0x52>
 80063f8:	e000      	b.n	80063fc <SPI_EndRxTxTransaction+0x70>
        break;
 80063fa:	bf00      	nop
  }

  return HAL_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3718      	adds	r7, #24
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	20000000 	.word	0x20000000
 800640c:	165e9f81 	.word	0x165e9f81

08006410 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b082      	sub	sp, #8
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d101      	bne.n	8006422 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	e041      	b.n	80064a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006428:	b2db      	uxtb	r3, r3
 800642a:	2b00      	cmp	r3, #0
 800642c:	d106      	bne.n	800643c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f7fa fe9e 	bl	8001178 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2202      	movs	r2, #2
 8006440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	3304      	adds	r3, #4
 800644c:	4619      	mov	r1, r3
 800644e:	4610      	mov	r0, r2
 8006450:	f000 fa2e 	bl	80068b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3708      	adds	r7, #8
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b082      	sub	sp, #8
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	f003 0302 	and.w	r3, r3, #2
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d122      	bne.n	800650a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	f003 0302 	and.w	r3, r3, #2
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d11b      	bne.n	800650a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f06f 0202 	mvn.w	r2, #2
 80064da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	699b      	ldr	r3, [r3, #24]
 80064e8:	f003 0303 	and.w	r3, r3, #3
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d003      	beq.n	80064f8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 f9bf 	bl	8006874 <HAL_TIM_IC_CaptureCallback>
 80064f6:	e005      	b.n	8006504 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 f9b1 	bl	8006860 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 f9c2 	bl	8006888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	f003 0304 	and.w	r3, r3, #4
 8006514:	2b04      	cmp	r3, #4
 8006516:	d122      	bne.n	800655e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	f003 0304 	and.w	r3, r3, #4
 8006522:	2b04      	cmp	r3, #4
 8006524:	d11b      	bne.n	800655e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f06f 0204 	mvn.w	r2, #4
 800652e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2202      	movs	r2, #2
 8006534:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	699b      	ldr	r3, [r3, #24]
 800653c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006540:	2b00      	cmp	r3, #0
 8006542:	d003      	beq.n	800654c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 f995 	bl	8006874 <HAL_TIM_IC_CaptureCallback>
 800654a:	e005      	b.n	8006558 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 f987 	bl	8006860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 f998 	bl	8006888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	691b      	ldr	r3, [r3, #16]
 8006564:	f003 0308 	and.w	r3, r3, #8
 8006568:	2b08      	cmp	r3, #8
 800656a:	d122      	bne.n	80065b2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	f003 0308 	and.w	r3, r3, #8
 8006576:	2b08      	cmp	r3, #8
 8006578:	d11b      	bne.n	80065b2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f06f 0208 	mvn.w	r2, #8
 8006582:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2204      	movs	r2, #4
 8006588:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	69db      	ldr	r3, [r3, #28]
 8006590:	f003 0303 	and.w	r3, r3, #3
 8006594:	2b00      	cmp	r3, #0
 8006596:	d003      	beq.n	80065a0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 f96b 	bl	8006874 <HAL_TIM_IC_CaptureCallback>
 800659e:	e005      	b.n	80065ac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 f95d 	bl	8006860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 f96e 	bl	8006888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	f003 0310 	and.w	r3, r3, #16
 80065bc:	2b10      	cmp	r3, #16
 80065be:	d122      	bne.n	8006606 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	f003 0310 	and.w	r3, r3, #16
 80065ca:	2b10      	cmp	r3, #16
 80065cc:	d11b      	bne.n	8006606 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f06f 0210 	mvn.w	r2, #16
 80065d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2208      	movs	r2, #8
 80065dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	69db      	ldr	r3, [r3, #28]
 80065e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d003      	beq.n	80065f4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 f941 	bl	8006874 <HAL_TIM_IC_CaptureCallback>
 80065f2:	e005      	b.n	8006600 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 f933 	bl	8006860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f944 	bl	8006888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	f003 0301 	and.w	r3, r3, #1
 8006610:	2b01      	cmp	r3, #1
 8006612:	d10e      	bne.n	8006632 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	f003 0301 	and.w	r3, r3, #1
 800661e:	2b01      	cmp	r3, #1
 8006620:	d107      	bne.n	8006632 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f06f 0201 	mvn.w	r2, #1
 800662a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 f90d 	bl	800684c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800663c:	2b80      	cmp	r3, #128	; 0x80
 800663e:	d10e      	bne.n	800665e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800664a:	2b80      	cmp	r3, #128	; 0x80
 800664c:	d107      	bne.n	800665e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006656:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 fae9 	bl	8006c30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006668:	2b40      	cmp	r3, #64	; 0x40
 800666a:	d10e      	bne.n	800668a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006676:	2b40      	cmp	r3, #64	; 0x40
 8006678:	d107      	bne.n	800668a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 f909 	bl	800689c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	f003 0320 	and.w	r3, r3, #32
 8006694:	2b20      	cmp	r3, #32
 8006696:	d10e      	bne.n	80066b6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	f003 0320 	and.w	r3, r3, #32
 80066a2:	2b20      	cmp	r3, #32
 80066a4:	d107      	bne.n	80066b6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f06f 0220 	mvn.w	r2, #32
 80066ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 fab3 	bl	8006c1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066b6:	bf00      	nop
 80066b8:	3708      	adds	r7, #8
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b084      	sub	sp, #16
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
 80066c6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066c8:	2300      	movs	r3, #0
 80066ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d101      	bne.n	80066da <HAL_TIM_ConfigClockSource+0x1c>
 80066d6:	2302      	movs	r3, #2
 80066d8:	e0b4      	b.n	8006844 <HAL_TIM_ConfigClockSource+0x186>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2201      	movs	r2, #1
 80066de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2202      	movs	r2, #2
 80066e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80066f8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006700:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68ba      	ldr	r2, [r7, #8]
 8006708:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006712:	d03e      	beq.n	8006792 <HAL_TIM_ConfigClockSource+0xd4>
 8006714:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006718:	f200 8087 	bhi.w	800682a <HAL_TIM_ConfigClockSource+0x16c>
 800671c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006720:	f000 8086 	beq.w	8006830 <HAL_TIM_ConfigClockSource+0x172>
 8006724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006728:	d87f      	bhi.n	800682a <HAL_TIM_ConfigClockSource+0x16c>
 800672a:	2b70      	cmp	r3, #112	; 0x70
 800672c:	d01a      	beq.n	8006764 <HAL_TIM_ConfigClockSource+0xa6>
 800672e:	2b70      	cmp	r3, #112	; 0x70
 8006730:	d87b      	bhi.n	800682a <HAL_TIM_ConfigClockSource+0x16c>
 8006732:	2b60      	cmp	r3, #96	; 0x60
 8006734:	d050      	beq.n	80067d8 <HAL_TIM_ConfigClockSource+0x11a>
 8006736:	2b60      	cmp	r3, #96	; 0x60
 8006738:	d877      	bhi.n	800682a <HAL_TIM_ConfigClockSource+0x16c>
 800673a:	2b50      	cmp	r3, #80	; 0x50
 800673c:	d03c      	beq.n	80067b8 <HAL_TIM_ConfigClockSource+0xfa>
 800673e:	2b50      	cmp	r3, #80	; 0x50
 8006740:	d873      	bhi.n	800682a <HAL_TIM_ConfigClockSource+0x16c>
 8006742:	2b40      	cmp	r3, #64	; 0x40
 8006744:	d058      	beq.n	80067f8 <HAL_TIM_ConfigClockSource+0x13a>
 8006746:	2b40      	cmp	r3, #64	; 0x40
 8006748:	d86f      	bhi.n	800682a <HAL_TIM_ConfigClockSource+0x16c>
 800674a:	2b30      	cmp	r3, #48	; 0x30
 800674c:	d064      	beq.n	8006818 <HAL_TIM_ConfigClockSource+0x15a>
 800674e:	2b30      	cmp	r3, #48	; 0x30
 8006750:	d86b      	bhi.n	800682a <HAL_TIM_ConfigClockSource+0x16c>
 8006752:	2b20      	cmp	r3, #32
 8006754:	d060      	beq.n	8006818 <HAL_TIM_ConfigClockSource+0x15a>
 8006756:	2b20      	cmp	r3, #32
 8006758:	d867      	bhi.n	800682a <HAL_TIM_ConfigClockSource+0x16c>
 800675a:	2b00      	cmp	r3, #0
 800675c:	d05c      	beq.n	8006818 <HAL_TIM_ConfigClockSource+0x15a>
 800675e:	2b10      	cmp	r3, #16
 8006760:	d05a      	beq.n	8006818 <HAL_TIM_ConfigClockSource+0x15a>
 8006762:	e062      	b.n	800682a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6818      	ldr	r0, [r3, #0]
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	6899      	ldr	r1, [r3, #8]
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	685a      	ldr	r2, [r3, #4]
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	f000 f9b6 	bl	8006ae4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006786:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	609a      	str	r2, [r3, #8]
      break;
 8006790:	e04f      	b.n	8006832 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6818      	ldr	r0, [r3, #0]
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	6899      	ldr	r1, [r3, #8]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	685a      	ldr	r2, [r3, #4]
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	f000 f99f 	bl	8006ae4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	689a      	ldr	r2, [r3, #8]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067b4:	609a      	str	r2, [r3, #8]
      break;
 80067b6:	e03c      	b.n	8006832 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6818      	ldr	r0, [r3, #0]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	6859      	ldr	r1, [r3, #4]
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	461a      	mov	r2, r3
 80067c6:	f000 f913 	bl	80069f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2150      	movs	r1, #80	; 0x50
 80067d0:	4618      	mov	r0, r3
 80067d2:	f000 f96c 	bl	8006aae <TIM_ITRx_SetConfig>
      break;
 80067d6:	e02c      	b.n	8006832 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6818      	ldr	r0, [r3, #0]
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	6859      	ldr	r1, [r3, #4]
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	461a      	mov	r2, r3
 80067e6:	f000 f932 	bl	8006a4e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2160      	movs	r1, #96	; 0x60
 80067f0:	4618      	mov	r0, r3
 80067f2:	f000 f95c 	bl	8006aae <TIM_ITRx_SetConfig>
      break;
 80067f6:	e01c      	b.n	8006832 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6818      	ldr	r0, [r3, #0]
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	6859      	ldr	r1, [r3, #4]
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	461a      	mov	r2, r3
 8006806:	f000 f8f3 	bl	80069f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2140      	movs	r1, #64	; 0x40
 8006810:	4618      	mov	r0, r3
 8006812:	f000 f94c 	bl	8006aae <TIM_ITRx_SetConfig>
      break;
 8006816:	e00c      	b.n	8006832 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4619      	mov	r1, r3
 8006822:	4610      	mov	r0, r2
 8006824:	f000 f943 	bl	8006aae <TIM_ITRx_SetConfig>
      break;
 8006828:	e003      	b.n	8006832 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	73fb      	strb	r3, [r7, #15]
      break;
 800682e:	e000      	b.n	8006832 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006830:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2201      	movs	r2, #1
 8006836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006842:	7bfb      	ldrb	r3, [r7, #15]
}
 8006844:	4618      	mov	r0, r3
 8006846:	3710      	adds	r7, #16
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006854:	bf00      	nop
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800687c:	bf00      	nop
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006890:	bf00      	nop
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068a4:	bf00      	nop
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a40      	ldr	r2, [pc, #256]	; (80069c4 <TIM_Base_SetConfig+0x114>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d013      	beq.n	80068f0 <TIM_Base_SetConfig+0x40>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068ce:	d00f      	beq.n	80068f0 <TIM_Base_SetConfig+0x40>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a3d      	ldr	r2, [pc, #244]	; (80069c8 <TIM_Base_SetConfig+0x118>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d00b      	beq.n	80068f0 <TIM_Base_SetConfig+0x40>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a3c      	ldr	r2, [pc, #240]	; (80069cc <TIM_Base_SetConfig+0x11c>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d007      	beq.n	80068f0 <TIM_Base_SetConfig+0x40>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	4a3b      	ldr	r2, [pc, #236]	; (80069d0 <TIM_Base_SetConfig+0x120>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d003      	beq.n	80068f0 <TIM_Base_SetConfig+0x40>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a3a      	ldr	r2, [pc, #232]	; (80069d4 <TIM_Base_SetConfig+0x124>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d108      	bne.n	8006902 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	4313      	orrs	r3, r2
 8006900:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a2f      	ldr	r2, [pc, #188]	; (80069c4 <TIM_Base_SetConfig+0x114>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d02b      	beq.n	8006962 <TIM_Base_SetConfig+0xb2>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006910:	d027      	beq.n	8006962 <TIM_Base_SetConfig+0xb2>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a2c      	ldr	r2, [pc, #176]	; (80069c8 <TIM_Base_SetConfig+0x118>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d023      	beq.n	8006962 <TIM_Base_SetConfig+0xb2>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a2b      	ldr	r2, [pc, #172]	; (80069cc <TIM_Base_SetConfig+0x11c>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d01f      	beq.n	8006962 <TIM_Base_SetConfig+0xb2>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a2a      	ldr	r2, [pc, #168]	; (80069d0 <TIM_Base_SetConfig+0x120>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d01b      	beq.n	8006962 <TIM_Base_SetConfig+0xb2>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a29      	ldr	r2, [pc, #164]	; (80069d4 <TIM_Base_SetConfig+0x124>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d017      	beq.n	8006962 <TIM_Base_SetConfig+0xb2>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4a28      	ldr	r2, [pc, #160]	; (80069d8 <TIM_Base_SetConfig+0x128>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d013      	beq.n	8006962 <TIM_Base_SetConfig+0xb2>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a27      	ldr	r2, [pc, #156]	; (80069dc <TIM_Base_SetConfig+0x12c>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d00f      	beq.n	8006962 <TIM_Base_SetConfig+0xb2>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a26      	ldr	r2, [pc, #152]	; (80069e0 <TIM_Base_SetConfig+0x130>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d00b      	beq.n	8006962 <TIM_Base_SetConfig+0xb2>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a25      	ldr	r2, [pc, #148]	; (80069e4 <TIM_Base_SetConfig+0x134>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d007      	beq.n	8006962 <TIM_Base_SetConfig+0xb2>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a24      	ldr	r2, [pc, #144]	; (80069e8 <TIM_Base_SetConfig+0x138>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d003      	beq.n	8006962 <TIM_Base_SetConfig+0xb2>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a23      	ldr	r2, [pc, #140]	; (80069ec <TIM_Base_SetConfig+0x13c>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d108      	bne.n	8006974 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006968:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	4313      	orrs	r3, r2
 8006972:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	4313      	orrs	r3, r2
 8006980:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	689a      	ldr	r2, [r3, #8]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4a0a      	ldr	r2, [pc, #40]	; (80069c4 <TIM_Base_SetConfig+0x114>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d003      	beq.n	80069a8 <TIM_Base_SetConfig+0xf8>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a0c      	ldr	r2, [pc, #48]	; (80069d4 <TIM_Base_SetConfig+0x124>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d103      	bne.n	80069b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	691a      	ldr	r2, [r3, #16]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	615a      	str	r2, [r3, #20]
}
 80069b6:	bf00      	nop
 80069b8:	3714      	adds	r7, #20
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	40010000 	.word	0x40010000
 80069c8:	40000400 	.word	0x40000400
 80069cc:	40000800 	.word	0x40000800
 80069d0:	40000c00 	.word	0x40000c00
 80069d4:	40010400 	.word	0x40010400
 80069d8:	40014000 	.word	0x40014000
 80069dc:	40014400 	.word	0x40014400
 80069e0:	40014800 	.word	0x40014800
 80069e4:	40001800 	.word	0x40001800
 80069e8:	40001c00 	.word	0x40001c00
 80069ec:	40002000 	.word	0x40002000

080069f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b087      	sub	sp, #28
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6a1b      	ldr	r3, [r3, #32]
 8006a00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6a1b      	ldr	r3, [r3, #32]
 8006a06:	f023 0201 	bic.w	r2, r3, #1
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	699b      	ldr	r3, [r3, #24]
 8006a12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	011b      	lsls	r3, r3, #4
 8006a20:	693a      	ldr	r2, [r7, #16]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	f023 030a 	bic.w	r3, r3, #10
 8006a2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a2e:	697a      	ldr	r2, [r7, #20]
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	693a      	ldr	r2, [r7, #16]
 8006a3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	697a      	ldr	r2, [r7, #20]
 8006a40:	621a      	str	r2, [r3, #32]
}
 8006a42:	bf00      	nop
 8006a44:	371c      	adds	r7, #28
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr

08006a4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a4e:	b480      	push	{r7}
 8006a50:	b087      	sub	sp, #28
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	60f8      	str	r0, [r7, #12]
 8006a56:	60b9      	str	r1, [r7, #8]
 8006a58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6a1b      	ldr	r3, [r3, #32]
 8006a5e:	f023 0210 	bic.w	r2, r3, #16
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6a1b      	ldr	r3, [r3, #32]
 8006a70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	031b      	lsls	r3, r3, #12
 8006a7e:	697a      	ldr	r2, [r7, #20]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	011b      	lsls	r3, r3, #4
 8006a90:	693a      	ldr	r2, [r7, #16]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	697a      	ldr	r2, [r7, #20]
 8006a9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	693a      	ldr	r2, [r7, #16]
 8006aa0:	621a      	str	r2, [r3, #32]
}
 8006aa2:	bf00      	nop
 8006aa4:	371c      	adds	r7, #28
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr

08006aae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006aae:	b480      	push	{r7}
 8006ab0:	b085      	sub	sp, #20
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
 8006ab6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ac6:	683a      	ldr	r2, [r7, #0]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	f043 0307 	orr.w	r3, r3, #7
 8006ad0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	609a      	str	r2, [r3, #8]
}
 8006ad8:	bf00      	nop
 8006ada:	3714      	adds	r7, #20
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b087      	sub	sp, #28
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
 8006af0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006afe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	021a      	lsls	r2, r3, #8
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	431a      	orrs	r2, r3
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	697a      	ldr	r2, [r7, #20]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	697a      	ldr	r2, [r7, #20]
 8006b16:	609a      	str	r2, [r3, #8]
}
 8006b18:	bf00      	nop
 8006b1a:	371c      	adds	r7, #28
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b085      	sub	sp, #20
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d101      	bne.n	8006b3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b38:	2302      	movs	r3, #2
 8006b3a:	e05a      	b.n	8006bf2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2202      	movs	r2, #2
 8006b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a21      	ldr	r2, [pc, #132]	; (8006c00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d022      	beq.n	8006bc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b88:	d01d      	beq.n	8006bc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a1d      	ldr	r2, [pc, #116]	; (8006c04 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d018      	beq.n	8006bc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a1b      	ldr	r2, [pc, #108]	; (8006c08 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d013      	beq.n	8006bc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a1a      	ldr	r2, [pc, #104]	; (8006c0c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d00e      	beq.n	8006bc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a18      	ldr	r2, [pc, #96]	; (8006c10 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d009      	beq.n	8006bc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a17      	ldr	r2, [pc, #92]	; (8006c14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d004      	beq.n	8006bc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a15      	ldr	r2, [pc, #84]	; (8006c18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d10c      	bne.n	8006be0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	68ba      	ldr	r2, [r7, #8]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68ba      	ldr	r2, [r7, #8]
 8006bde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3714      	adds	r7, #20
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	40010000 	.word	0x40010000
 8006c04:	40000400 	.word	0x40000400
 8006c08:	40000800 	.word	0x40000800
 8006c0c:	40000c00 	.word	0x40000c00
 8006c10:	40010400 	.word	0x40010400
 8006c14:	40014000 	.word	0x40014000
 8006c18:	40001800 	.word	0x40001800

08006c1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c24:	bf00      	nop
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c38:	bf00      	nop
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d101      	bne.n	8006c56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e03f      	b.n	8006cd6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d106      	bne.n	8006c70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f7fa faac 	bl	80011c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2224      	movs	r2, #36	; 0x24
 8006c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68da      	ldr	r2, [r3, #12]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 fd7b 	bl	8007784 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	691a      	ldr	r2, [r3, #16]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	695a      	ldr	r2, [r3, #20]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68da      	ldr	r2, [r3, #12]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006cbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2220      	movs	r2, #32
 8006cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2220      	movs	r2, #32
 8006cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3708      	adds	r7, #8
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}

08006cde <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cde:	b580      	push	{r7, lr}
 8006ce0:	b08a      	sub	sp, #40	; 0x28
 8006ce2:	af02      	add	r7, sp, #8
 8006ce4:	60f8      	str	r0, [r7, #12]
 8006ce6:	60b9      	str	r1, [r7, #8]
 8006ce8:	603b      	str	r3, [r7, #0]
 8006cea:	4613      	mov	r3, r2
 8006cec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	2b20      	cmp	r3, #32
 8006cfc:	d17c      	bne.n	8006df8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d002      	beq.n	8006d0a <HAL_UART_Transmit+0x2c>
 8006d04:	88fb      	ldrh	r3, [r7, #6]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d101      	bne.n	8006d0e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e075      	b.n	8006dfa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d101      	bne.n	8006d1c <HAL_UART_Transmit+0x3e>
 8006d18:	2302      	movs	r3, #2
 8006d1a:	e06e      	b.n	8006dfa <HAL_UART_Transmit+0x11c>
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2200      	movs	r2, #0
 8006d28:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2221      	movs	r2, #33	; 0x21
 8006d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d32:	f7fa fc5b 	bl	80015ec <HAL_GetTick>
 8006d36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	88fa      	ldrh	r2, [r7, #6]
 8006d3c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	88fa      	ldrh	r2, [r7, #6]
 8006d42:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d4c:	d108      	bne.n	8006d60 <HAL_UART_Transmit+0x82>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d104      	bne.n	8006d60 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006d56:	2300      	movs	r3, #0
 8006d58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	61bb      	str	r3, [r7, #24]
 8006d5e:	e003      	b.n	8006d68 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d64:	2300      	movs	r3, #0
 8006d66:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006d70:	e02a      	b.n	8006dc8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	9300      	str	r3, [sp, #0]
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	2180      	movs	r1, #128	; 0x80
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f000 faf9 	bl	8007374 <UART_WaitOnFlagUntilTimeout>
 8006d82:	4603      	mov	r3, r0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d001      	beq.n	8006d8c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	e036      	b.n	8006dfa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d10b      	bne.n	8006daa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	881b      	ldrh	r3, [r3, #0]
 8006d96:	461a      	mov	r2, r3
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006da0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	3302      	adds	r3, #2
 8006da6:	61bb      	str	r3, [r7, #24]
 8006da8:	e007      	b.n	8006dba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	781a      	ldrb	r2, [r3, #0]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	3301      	adds	r3, #1
 8006db8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	b29a      	uxth	r2, r3
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d1cf      	bne.n	8006d72 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	9300      	str	r3, [sp, #0]
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	2140      	movs	r1, #64	; 0x40
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f000 fac9 	bl	8007374 <UART_WaitOnFlagUntilTimeout>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d001      	beq.n	8006dec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006de8:	2303      	movs	r3, #3
 8006dea:	e006      	b.n	8006dfa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2220      	movs	r2, #32
 8006df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006df4:	2300      	movs	r3, #0
 8006df6:	e000      	b.n	8006dfa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006df8:	2302      	movs	r3, #2
  }
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3720      	adds	r7, #32
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
	...

08006e04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b0ba      	sub	sp, #232	; 0xe8
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	695b      	ldr	r3, [r3, #20]
 8006e26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006e30:	2300      	movs	r3, #0
 8006e32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e3a:	f003 030f 	and.w	r3, r3, #15
 8006e3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006e42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d10f      	bne.n	8006e6a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e4e:	f003 0320 	and.w	r3, r3, #32
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d009      	beq.n	8006e6a <HAL_UART_IRQHandler+0x66>
 8006e56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e5a:	f003 0320 	and.w	r3, r3, #32
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d003      	beq.n	8006e6a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 fbd3 	bl	800760e <UART_Receive_IT>
      return;
 8006e68:	e256      	b.n	8007318 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006e6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	f000 80de 	beq.w	8007030 <HAL_UART_IRQHandler+0x22c>
 8006e74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e78:	f003 0301 	and.w	r3, r3, #1
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d106      	bne.n	8006e8e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e84:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f000 80d1 	beq.w	8007030 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e92:	f003 0301 	and.w	r3, r3, #1
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00b      	beq.n	8006eb2 <HAL_UART_IRQHandler+0xae>
 8006e9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d005      	beq.n	8006eb2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eaa:	f043 0201 	orr.w	r2, r3, #1
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eb6:	f003 0304 	and.w	r3, r3, #4
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00b      	beq.n	8006ed6 <HAL_UART_IRQHandler+0xd2>
 8006ebe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ec2:	f003 0301 	and.w	r3, r3, #1
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d005      	beq.n	8006ed6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ece:	f043 0202 	orr.w	r2, r3, #2
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eda:	f003 0302 	and.w	r3, r3, #2
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00b      	beq.n	8006efa <HAL_UART_IRQHandler+0xf6>
 8006ee2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ee6:	f003 0301 	and.w	r3, r3, #1
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d005      	beq.n	8006efa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef2:	f043 0204 	orr.w	r2, r3, #4
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006efe:	f003 0308 	and.w	r3, r3, #8
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d011      	beq.n	8006f2a <HAL_UART_IRQHandler+0x126>
 8006f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f0a:	f003 0320 	and.w	r3, r3, #32
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d105      	bne.n	8006f1e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006f12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f16:	f003 0301 	and.w	r3, r3, #1
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d005      	beq.n	8006f2a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f22:	f043 0208 	orr.w	r2, r3, #8
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f000 81ed 	beq.w	800730e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f38:	f003 0320 	and.w	r3, r3, #32
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d008      	beq.n	8006f52 <HAL_UART_IRQHandler+0x14e>
 8006f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f44:	f003 0320 	and.w	r3, r3, #32
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d002      	beq.n	8006f52 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 fb5e 	bl	800760e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	695b      	ldr	r3, [r3, #20]
 8006f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f5c:	2b40      	cmp	r3, #64	; 0x40
 8006f5e:	bf0c      	ite	eq
 8006f60:	2301      	moveq	r3, #1
 8006f62:	2300      	movne	r3, #0
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6e:	f003 0308 	and.w	r3, r3, #8
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d103      	bne.n	8006f7e <HAL_UART_IRQHandler+0x17a>
 8006f76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d04f      	beq.n	800701e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 fa66 	bl	8007450 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	695b      	ldr	r3, [r3, #20]
 8006f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f8e:	2b40      	cmp	r3, #64	; 0x40
 8006f90:	d141      	bne.n	8007016 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	3314      	adds	r3, #20
 8006f98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006fa0:	e853 3f00 	ldrex	r3, [r3]
 8006fa4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006fa8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006fac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	3314      	adds	r3, #20
 8006fba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006fbe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006fc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006fca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006fce:	e841 2300 	strex	r3, r2, [r1]
 8006fd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006fd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d1d9      	bne.n	8006f92 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d013      	beq.n	800700e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fea:	4a7d      	ldr	r2, [pc, #500]	; (80071e0 <HAL_UART_IRQHandler+0x3dc>)
 8006fec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7fb fac5 	bl	8002582 <HAL_DMA_Abort_IT>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d016      	beq.n	800702c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007008:	4610      	mov	r0, r2
 800700a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800700c:	e00e      	b.n	800702c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 f99a 	bl	8007348 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007014:	e00a      	b.n	800702c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 f996 	bl	8007348 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800701c:	e006      	b.n	800702c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 f992 	bl	8007348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800702a:	e170      	b.n	800730e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800702c:	bf00      	nop
    return;
 800702e:	e16e      	b.n	800730e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007034:	2b01      	cmp	r3, #1
 8007036:	f040 814a 	bne.w	80072ce <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800703a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800703e:	f003 0310 	and.w	r3, r3, #16
 8007042:	2b00      	cmp	r3, #0
 8007044:	f000 8143 	beq.w	80072ce <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800704c:	f003 0310 	and.w	r3, r3, #16
 8007050:	2b00      	cmp	r3, #0
 8007052:	f000 813c 	beq.w	80072ce <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007056:	2300      	movs	r3, #0
 8007058:	60bb      	str	r3, [r7, #8]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	60bb      	str	r3, [r7, #8]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	60bb      	str	r3, [r7, #8]
 800706a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	695b      	ldr	r3, [r3, #20]
 8007072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007076:	2b40      	cmp	r3, #64	; 0x40
 8007078:	f040 80b4 	bne.w	80071e4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007088:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800708c:	2b00      	cmp	r3, #0
 800708e:	f000 8140 	beq.w	8007312 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007096:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800709a:	429a      	cmp	r2, r3
 800709c:	f080 8139 	bcs.w	8007312 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80070a6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ac:	69db      	ldr	r3, [r3, #28]
 80070ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070b2:	f000 8088 	beq.w	80071c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	330c      	adds	r3, #12
 80070bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80070c4:	e853 3f00 	ldrex	r3, [r3]
 80070c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80070cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80070d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	330c      	adds	r3, #12
 80070de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80070e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80070e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80070ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80070f2:	e841 2300 	strex	r3, r2, [r1]
 80070f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80070fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1d9      	bne.n	80070b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	3314      	adds	r3, #20
 8007108:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800710c:	e853 3f00 	ldrex	r3, [r3]
 8007110:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007112:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007114:	f023 0301 	bic.w	r3, r3, #1
 8007118:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	3314      	adds	r3, #20
 8007122:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007126:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800712a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800712e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007132:	e841 2300 	strex	r3, r2, [r1]
 8007136:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007138:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800713a:	2b00      	cmp	r3, #0
 800713c:	d1e1      	bne.n	8007102 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	3314      	adds	r3, #20
 8007144:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007146:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007148:	e853 3f00 	ldrex	r3, [r3]
 800714c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800714e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007150:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007154:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	3314      	adds	r3, #20
 800715e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007162:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007164:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007166:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007168:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800716a:	e841 2300 	strex	r3, r2, [r1]
 800716e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007170:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007172:	2b00      	cmp	r3, #0
 8007174:	d1e3      	bne.n	800713e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2220      	movs	r2, #32
 800717a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	330c      	adds	r3, #12
 800718a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800718c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800718e:	e853 3f00 	ldrex	r3, [r3]
 8007192:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007194:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007196:	f023 0310 	bic.w	r3, r3, #16
 800719a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	330c      	adds	r3, #12
 80071a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80071a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80071aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80071ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80071b0:	e841 2300 	strex	r3, r2, [r1]
 80071b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80071b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d1e3      	bne.n	8007184 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c0:	4618      	mov	r0, r3
 80071c2:	f7fb f96e 	bl	80024a2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	4619      	mov	r1, r3
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 f8c0 	bl	800735c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80071dc:	e099      	b.n	8007312 <HAL_UART_IRQHandler+0x50e>
 80071de:	bf00      	nop
 80071e0:	08007517 	.word	0x08007517
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	1ad3      	subs	r3, r2, r3
 80071f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	f000 808b 	beq.w	8007316 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007200:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007204:	2b00      	cmp	r3, #0
 8007206:	f000 8086 	beq.w	8007316 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	330c      	adds	r3, #12
 8007210:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007214:	e853 3f00 	ldrex	r3, [r3]
 8007218:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800721a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800721c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007220:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	330c      	adds	r3, #12
 800722a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800722e:	647a      	str	r2, [r7, #68]	; 0x44
 8007230:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007232:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007234:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007236:	e841 2300 	strex	r3, r2, [r1]
 800723a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800723c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800723e:	2b00      	cmp	r3, #0
 8007240:	d1e3      	bne.n	800720a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	3314      	adds	r3, #20
 8007248:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724c:	e853 3f00 	ldrex	r3, [r3]
 8007250:	623b      	str	r3, [r7, #32]
   return(result);
 8007252:	6a3b      	ldr	r3, [r7, #32]
 8007254:	f023 0301 	bic.w	r3, r3, #1
 8007258:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	3314      	adds	r3, #20
 8007262:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007266:	633a      	str	r2, [r7, #48]	; 0x30
 8007268:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800726c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800726e:	e841 2300 	strex	r3, r2, [r1]
 8007272:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007276:	2b00      	cmp	r3, #0
 8007278:	d1e3      	bne.n	8007242 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2220      	movs	r2, #32
 800727e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	330c      	adds	r3, #12
 800728e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	e853 3f00 	ldrex	r3, [r3]
 8007296:	60fb      	str	r3, [r7, #12]
   return(result);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f023 0310 	bic.w	r3, r3, #16
 800729e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	330c      	adds	r3, #12
 80072a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80072ac:	61fa      	str	r2, [r7, #28]
 80072ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b0:	69b9      	ldr	r1, [r7, #24]
 80072b2:	69fa      	ldr	r2, [r7, #28]
 80072b4:	e841 2300 	strex	r3, r2, [r1]
 80072b8:	617b      	str	r3, [r7, #20]
   return(result);
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d1e3      	bne.n	8007288 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80072c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80072c4:	4619      	mov	r1, r3
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 f848 	bl	800735c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80072cc:	e023      	b.n	8007316 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80072ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d009      	beq.n	80072ee <HAL_UART_IRQHandler+0x4ea>
 80072da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d003      	beq.n	80072ee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f929 	bl	800753e <UART_Transmit_IT>
    return;
 80072ec:	e014      	b.n	8007318 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80072ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d00e      	beq.n	8007318 <HAL_UART_IRQHandler+0x514>
 80072fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007302:	2b00      	cmp	r3, #0
 8007304:	d008      	beq.n	8007318 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f969 	bl	80075de <UART_EndTransmit_IT>
    return;
 800730c:	e004      	b.n	8007318 <HAL_UART_IRQHandler+0x514>
    return;
 800730e:	bf00      	nop
 8007310:	e002      	b.n	8007318 <HAL_UART_IRQHandler+0x514>
      return;
 8007312:	bf00      	nop
 8007314:	e000      	b.n	8007318 <HAL_UART_IRQHandler+0x514>
      return;
 8007316:	bf00      	nop
  }
}
 8007318:	37e8      	adds	r7, #232	; 0xe8
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop

08007320 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007328:	bf00      	nop
 800732a:	370c      	adds	r7, #12
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr

08007334 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800733c:	bf00      	nop
 800733e:	370c      	adds	r7, #12
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr

08007348 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007350:	bf00      	nop
 8007352:	370c      	adds	r7, #12
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	460b      	mov	r3, r1
 8007366:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007368:	bf00      	nop
 800736a:	370c      	adds	r7, #12
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr

08007374 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b090      	sub	sp, #64	; 0x40
 8007378:	af00      	add	r7, sp, #0
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	603b      	str	r3, [r7, #0]
 8007380:	4613      	mov	r3, r2
 8007382:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007384:	e050      	b.n	8007428 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800738c:	d04c      	beq.n	8007428 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800738e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007390:	2b00      	cmp	r3, #0
 8007392:	d007      	beq.n	80073a4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007394:	f7fa f92a 	bl	80015ec <HAL_GetTick>
 8007398:	4602      	mov	r2, r0
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d241      	bcs.n	8007428 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	330c      	adds	r3, #12
 80073aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ae:	e853 3f00 	ldrex	r3, [r3]
 80073b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80073ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	330c      	adds	r3, #12
 80073c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80073c4:	637a      	str	r2, [r7, #52]	; 0x34
 80073c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80073ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073cc:	e841 2300 	strex	r3, r2, [r1]
 80073d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80073d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d1e5      	bne.n	80073a4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	3314      	adds	r3, #20
 80073de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	e853 3f00 	ldrex	r3, [r3]
 80073e6:	613b      	str	r3, [r7, #16]
   return(result);
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	f023 0301 	bic.w	r3, r3, #1
 80073ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	3314      	adds	r3, #20
 80073f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073f8:	623a      	str	r2, [r7, #32]
 80073fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fc:	69f9      	ldr	r1, [r7, #28]
 80073fe:	6a3a      	ldr	r2, [r7, #32]
 8007400:	e841 2300 	strex	r3, r2, [r1]
 8007404:	61bb      	str	r3, [r7, #24]
   return(result);
 8007406:	69bb      	ldr	r3, [r7, #24]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d1e5      	bne.n	80073d8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2220      	movs	r2, #32
 8007410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2220      	movs	r2, #32
 8007418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2200      	movs	r2, #0
 8007420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007424:	2303      	movs	r3, #3
 8007426:	e00f      	b.n	8007448 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	4013      	ands	r3, r2
 8007432:	68ba      	ldr	r2, [r7, #8]
 8007434:	429a      	cmp	r2, r3
 8007436:	bf0c      	ite	eq
 8007438:	2301      	moveq	r3, #1
 800743a:	2300      	movne	r3, #0
 800743c:	b2db      	uxtb	r3, r3
 800743e:	461a      	mov	r2, r3
 8007440:	79fb      	ldrb	r3, [r7, #7]
 8007442:	429a      	cmp	r2, r3
 8007444:	d09f      	beq.n	8007386 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007446:	2300      	movs	r3, #0
}
 8007448:	4618      	mov	r0, r3
 800744a:	3740      	adds	r7, #64	; 0x40
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007450:	b480      	push	{r7}
 8007452:	b095      	sub	sp, #84	; 0x54
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	330c      	adds	r3, #12
 800745e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007462:	e853 3f00 	ldrex	r3, [r3]
 8007466:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800746e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	330c      	adds	r3, #12
 8007476:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007478:	643a      	str	r2, [r7, #64]	; 0x40
 800747a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800747e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007480:	e841 2300 	strex	r3, r2, [r1]
 8007484:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1e5      	bne.n	8007458 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	3314      	adds	r3, #20
 8007492:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007494:	6a3b      	ldr	r3, [r7, #32]
 8007496:	e853 3f00 	ldrex	r3, [r3]
 800749a:	61fb      	str	r3, [r7, #28]
   return(result);
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	f023 0301 	bic.w	r3, r3, #1
 80074a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	3314      	adds	r3, #20
 80074aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80074ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074b4:	e841 2300 	strex	r3, r2, [r1]
 80074b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d1e5      	bne.n	800748c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d119      	bne.n	80074fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	330c      	adds	r3, #12
 80074ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	e853 3f00 	ldrex	r3, [r3]
 80074d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	f023 0310 	bic.w	r3, r3, #16
 80074de:	647b      	str	r3, [r7, #68]	; 0x44
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	330c      	adds	r3, #12
 80074e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074e8:	61ba      	str	r2, [r7, #24]
 80074ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ec:	6979      	ldr	r1, [r7, #20]
 80074ee:	69ba      	ldr	r2, [r7, #24]
 80074f0:	e841 2300 	strex	r3, r2, [r1]
 80074f4:	613b      	str	r3, [r7, #16]
   return(result);
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d1e5      	bne.n	80074c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2220      	movs	r2, #32
 8007500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	631a      	str	r2, [r3, #48]	; 0x30
}
 800750a:	bf00      	nop
 800750c:	3754      	adds	r7, #84	; 0x54
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr

08007516 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b084      	sub	sp, #16
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007522:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2200      	movs	r2, #0
 8007528:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2200      	movs	r2, #0
 800752e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f7ff ff09 	bl	8007348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007536:	bf00      	nop
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800753e:	b480      	push	{r7}
 8007540:	b085      	sub	sp, #20
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800754c:	b2db      	uxtb	r3, r3
 800754e:	2b21      	cmp	r3, #33	; 0x21
 8007550:	d13e      	bne.n	80075d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800755a:	d114      	bne.n	8007586 <UART_Transmit_IT+0x48>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	691b      	ldr	r3, [r3, #16]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d110      	bne.n	8007586 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6a1b      	ldr	r3, [r3, #32]
 8007568:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	881b      	ldrh	r3, [r3, #0]
 800756e:	461a      	mov	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007578:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6a1b      	ldr	r3, [r3, #32]
 800757e:	1c9a      	adds	r2, r3, #2
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	621a      	str	r2, [r3, #32]
 8007584:	e008      	b.n	8007598 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6a1b      	ldr	r3, [r3, #32]
 800758a:	1c59      	adds	r1, r3, #1
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	6211      	str	r1, [r2, #32]
 8007590:	781a      	ldrb	r2, [r3, #0]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800759c:	b29b      	uxth	r3, r3
 800759e:	3b01      	subs	r3, #1
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	4619      	mov	r1, r3
 80075a6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d10f      	bne.n	80075cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68da      	ldr	r2, [r3, #12]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80075ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	68da      	ldr	r2, [r3, #12]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80075cc:	2300      	movs	r3, #0
 80075ce:	e000      	b.n	80075d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80075d0:	2302      	movs	r3, #2
  }
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3714      	adds	r7, #20
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr

080075de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b082      	sub	sp, #8
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	68da      	ldr	r2, [r3, #12]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2220      	movs	r2, #32
 80075fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f7ff fe8e 	bl	8007320 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	3708      	adds	r7, #8
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}

0800760e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800760e:	b580      	push	{r7, lr}
 8007610:	b08c      	sub	sp, #48	; 0x30
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800761c:	b2db      	uxtb	r3, r3
 800761e:	2b22      	cmp	r3, #34	; 0x22
 8007620:	f040 80ab 	bne.w	800777a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800762c:	d117      	bne.n	800765e <UART_Receive_IT+0x50>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d113      	bne.n	800765e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007636:	2300      	movs	r3, #0
 8007638:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800763e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	b29b      	uxth	r3, r3
 8007648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800764c:	b29a      	uxth	r2, r3
 800764e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007650:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007656:	1c9a      	adds	r2, r3, #2
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	629a      	str	r2, [r3, #40]	; 0x28
 800765c:	e026      	b.n	80076ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007662:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007664:	2300      	movs	r3, #0
 8007666:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007670:	d007      	beq.n	8007682 <UART_Receive_IT+0x74>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d10a      	bne.n	8007690 <UART_Receive_IT+0x82>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d106      	bne.n	8007690 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	b2da      	uxtb	r2, r3
 800768a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800768c:	701a      	strb	r2, [r3, #0]
 800768e:	e008      	b.n	80076a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	b2db      	uxtb	r3, r3
 8007698:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800769c:	b2da      	uxtb	r2, r3
 800769e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a6:	1c5a      	adds	r2, r3, #1
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	3b01      	subs	r3, #1
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	4619      	mov	r1, r3
 80076ba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d15a      	bne.n	8007776 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	68da      	ldr	r2, [r3, #12]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f022 0220 	bic.w	r2, r2, #32
 80076ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	68da      	ldr	r2, [r3, #12]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	695a      	ldr	r2, [r3, #20]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f022 0201 	bic.w	r2, r2, #1
 80076ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2220      	movs	r2, #32
 80076f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d135      	bne.n	800776c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	330c      	adds	r3, #12
 800770c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	e853 3f00 	ldrex	r3, [r3]
 8007714:	613b      	str	r3, [r7, #16]
   return(result);
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	f023 0310 	bic.w	r3, r3, #16
 800771c:	627b      	str	r3, [r7, #36]	; 0x24
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	330c      	adds	r3, #12
 8007724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007726:	623a      	str	r2, [r7, #32]
 8007728:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772a:	69f9      	ldr	r1, [r7, #28]
 800772c:	6a3a      	ldr	r2, [r7, #32]
 800772e:	e841 2300 	strex	r3, r2, [r1]
 8007732:	61bb      	str	r3, [r7, #24]
   return(result);
 8007734:	69bb      	ldr	r3, [r7, #24]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1e5      	bne.n	8007706 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f003 0310 	and.w	r3, r3, #16
 8007744:	2b10      	cmp	r3, #16
 8007746:	d10a      	bne.n	800775e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007748:	2300      	movs	r3, #0
 800774a:	60fb      	str	r3, [r7, #12]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	60fb      	str	r3, [r7, #12]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	60fb      	str	r3, [r7, #12]
 800775c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007762:	4619      	mov	r1, r3
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f7ff fdf9 	bl	800735c <HAL_UARTEx_RxEventCallback>
 800776a:	e002      	b.n	8007772 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f7ff fde1 	bl	8007334 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007772:	2300      	movs	r3, #0
 8007774:	e002      	b.n	800777c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007776:	2300      	movs	r3, #0
 8007778:	e000      	b.n	800777c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800777a:	2302      	movs	r3, #2
  }
}
 800777c:	4618      	mov	r0, r3
 800777e:	3730      	adds	r7, #48	; 0x30
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007784:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007788:	b0c0      	sub	sp, #256	; 0x100
 800778a:	af00      	add	r7, sp, #0
 800778c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	691b      	ldr	r3, [r3, #16]
 8007798:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800779c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077a0:	68d9      	ldr	r1, [r3, #12]
 80077a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	ea40 0301 	orr.w	r3, r0, r1
 80077ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80077ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077b2:	689a      	ldr	r2, [r3, #8]
 80077b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077b8:	691b      	ldr	r3, [r3, #16]
 80077ba:	431a      	orrs	r2, r3
 80077bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077c0:	695b      	ldr	r3, [r3, #20]
 80077c2:	431a      	orrs	r2, r3
 80077c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077c8:	69db      	ldr	r3, [r3, #28]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80077d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80077dc:	f021 010c 	bic.w	r1, r1, #12
 80077e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80077ea:	430b      	orrs	r3, r1
 80077ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80077ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	695b      	ldr	r3, [r3, #20]
 80077f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80077fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077fe:	6999      	ldr	r1, [r3, #24]
 8007800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	ea40 0301 	orr.w	r3, r0, r1
 800780a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800780c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	4b8f      	ldr	r3, [pc, #572]	; (8007a50 <UART_SetConfig+0x2cc>)
 8007814:	429a      	cmp	r2, r3
 8007816:	d005      	beq.n	8007824 <UART_SetConfig+0xa0>
 8007818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	4b8d      	ldr	r3, [pc, #564]	; (8007a54 <UART_SetConfig+0x2d0>)
 8007820:	429a      	cmp	r2, r3
 8007822:	d104      	bne.n	800782e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007824:	f7fd fef8 	bl	8005618 <HAL_RCC_GetPCLK2Freq>
 8007828:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800782c:	e003      	b.n	8007836 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800782e:	f7fd fedf 	bl	80055f0 <HAL_RCC_GetPCLK1Freq>
 8007832:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800783a:	69db      	ldr	r3, [r3, #28]
 800783c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007840:	f040 810c 	bne.w	8007a5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007844:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007848:	2200      	movs	r2, #0
 800784a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800784e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007852:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007856:	4622      	mov	r2, r4
 8007858:	462b      	mov	r3, r5
 800785a:	1891      	adds	r1, r2, r2
 800785c:	65b9      	str	r1, [r7, #88]	; 0x58
 800785e:	415b      	adcs	r3, r3
 8007860:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007862:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007866:	4621      	mov	r1, r4
 8007868:	eb12 0801 	adds.w	r8, r2, r1
 800786c:	4629      	mov	r1, r5
 800786e:	eb43 0901 	adc.w	r9, r3, r1
 8007872:	f04f 0200 	mov.w	r2, #0
 8007876:	f04f 0300 	mov.w	r3, #0
 800787a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800787e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007882:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007886:	4690      	mov	r8, r2
 8007888:	4699      	mov	r9, r3
 800788a:	4623      	mov	r3, r4
 800788c:	eb18 0303 	adds.w	r3, r8, r3
 8007890:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007894:	462b      	mov	r3, r5
 8007896:	eb49 0303 	adc.w	r3, r9, r3
 800789a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800789e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80078aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80078ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80078b2:	460b      	mov	r3, r1
 80078b4:	18db      	adds	r3, r3, r3
 80078b6:	653b      	str	r3, [r7, #80]	; 0x50
 80078b8:	4613      	mov	r3, r2
 80078ba:	eb42 0303 	adc.w	r3, r2, r3
 80078be:	657b      	str	r3, [r7, #84]	; 0x54
 80078c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80078c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80078c8:	f7f8 fc7e 	bl	80001c8 <__aeabi_uldivmod>
 80078cc:	4602      	mov	r2, r0
 80078ce:	460b      	mov	r3, r1
 80078d0:	4b61      	ldr	r3, [pc, #388]	; (8007a58 <UART_SetConfig+0x2d4>)
 80078d2:	fba3 2302 	umull	r2, r3, r3, r2
 80078d6:	095b      	lsrs	r3, r3, #5
 80078d8:	011c      	lsls	r4, r3, #4
 80078da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078de:	2200      	movs	r2, #0
 80078e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80078e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80078e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80078ec:	4642      	mov	r2, r8
 80078ee:	464b      	mov	r3, r9
 80078f0:	1891      	adds	r1, r2, r2
 80078f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80078f4:	415b      	adcs	r3, r3
 80078f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80078fc:	4641      	mov	r1, r8
 80078fe:	eb12 0a01 	adds.w	sl, r2, r1
 8007902:	4649      	mov	r1, r9
 8007904:	eb43 0b01 	adc.w	fp, r3, r1
 8007908:	f04f 0200 	mov.w	r2, #0
 800790c:	f04f 0300 	mov.w	r3, #0
 8007910:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007914:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007918:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800791c:	4692      	mov	sl, r2
 800791e:	469b      	mov	fp, r3
 8007920:	4643      	mov	r3, r8
 8007922:	eb1a 0303 	adds.w	r3, sl, r3
 8007926:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800792a:	464b      	mov	r3, r9
 800792c:	eb4b 0303 	adc.w	r3, fp, r3
 8007930:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007940:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007944:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007948:	460b      	mov	r3, r1
 800794a:	18db      	adds	r3, r3, r3
 800794c:	643b      	str	r3, [r7, #64]	; 0x40
 800794e:	4613      	mov	r3, r2
 8007950:	eb42 0303 	adc.w	r3, r2, r3
 8007954:	647b      	str	r3, [r7, #68]	; 0x44
 8007956:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800795a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800795e:	f7f8 fc33 	bl	80001c8 <__aeabi_uldivmod>
 8007962:	4602      	mov	r2, r0
 8007964:	460b      	mov	r3, r1
 8007966:	4611      	mov	r1, r2
 8007968:	4b3b      	ldr	r3, [pc, #236]	; (8007a58 <UART_SetConfig+0x2d4>)
 800796a:	fba3 2301 	umull	r2, r3, r3, r1
 800796e:	095b      	lsrs	r3, r3, #5
 8007970:	2264      	movs	r2, #100	; 0x64
 8007972:	fb02 f303 	mul.w	r3, r2, r3
 8007976:	1acb      	subs	r3, r1, r3
 8007978:	00db      	lsls	r3, r3, #3
 800797a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800797e:	4b36      	ldr	r3, [pc, #216]	; (8007a58 <UART_SetConfig+0x2d4>)
 8007980:	fba3 2302 	umull	r2, r3, r3, r2
 8007984:	095b      	lsrs	r3, r3, #5
 8007986:	005b      	lsls	r3, r3, #1
 8007988:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800798c:	441c      	add	r4, r3
 800798e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007992:	2200      	movs	r2, #0
 8007994:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007998:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800799c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80079a0:	4642      	mov	r2, r8
 80079a2:	464b      	mov	r3, r9
 80079a4:	1891      	adds	r1, r2, r2
 80079a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80079a8:	415b      	adcs	r3, r3
 80079aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80079b0:	4641      	mov	r1, r8
 80079b2:	1851      	adds	r1, r2, r1
 80079b4:	6339      	str	r1, [r7, #48]	; 0x30
 80079b6:	4649      	mov	r1, r9
 80079b8:	414b      	adcs	r3, r1
 80079ba:	637b      	str	r3, [r7, #52]	; 0x34
 80079bc:	f04f 0200 	mov.w	r2, #0
 80079c0:	f04f 0300 	mov.w	r3, #0
 80079c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80079c8:	4659      	mov	r1, fp
 80079ca:	00cb      	lsls	r3, r1, #3
 80079cc:	4651      	mov	r1, sl
 80079ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80079d2:	4651      	mov	r1, sl
 80079d4:	00ca      	lsls	r2, r1, #3
 80079d6:	4610      	mov	r0, r2
 80079d8:	4619      	mov	r1, r3
 80079da:	4603      	mov	r3, r0
 80079dc:	4642      	mov	r2, r8
 80079de:	189b      	adds	r3, r3, r2
 80079e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80079e4:	464b      	mov	r3, r9
 80079e6:	460a      	mov	r2, r1
 80079e8:	eb42 0303 	adc.w	r3, r2, r3
 80079ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80079f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80079fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007a00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007a04:	460b      	mov	r3, r1
 8007a06:	18db      	adds	r3, r3, r3
 8007a08:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a0a:	4613      	mov	r3, r2
 8007a0c:	eb42 0303 	adc.w	r3, r2, r3
 8007a10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007a16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007a1a:	f7f8 fbd5 	bl	80001c8 <__aeabi_uldivmod>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	460b      	mov	r3, r1
 8007a22:	4b0d      	ldr	r3, [pc, #52]	; (8007a58 <UART_SetConfig+0x2d4>)
 8007a24:	fba3 1302 	umull	r1, r3, r3, r2
 8007a28:	095b      	lsrs	r3, r3, #5
 8007a2a:	2164      	movs	r1, #100	; 0x64
 8007a2c:	fb01 f303 	mul.w	r3, r1, r3
 8007a30:	1ad3      	subs	r3, r2, r3
 8007a32:	00db      	lsls	r3, r3, #3
 8007a34:	3332      	adds	r3, #50	; 0x32
 8007a36:	4a08      	ldr	r2, [pc, #32]	; (8007a58 <UART_SetConfig+0x2d4>)
 8007a38:	fba2 2303 	umull	r2, r3, r2, r3
 8007a3c:	095b      	lsrs	r3, r3, #5
 8007a3e:	f003 0207 	and.w	r2, r3, #7
 8007a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4422      	add	r2, r4
 8007a4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007a4c:	e106      	b.n	8007c5c <UART_SetConfig+0x4d8>
 8007a4e:	bf00      	nop
 8007a50:	40011000 	.word	0x40011000
 8007a54:	40011400 	.word	0x40011400
 8007a58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a60:	2200      	movs	r2, #0
 8007a62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007a66:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007a6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007a6e:	4642      	mov	r2, r8
 8007a70:	464b      	mov	r3, r9
 8007a72:	1891      	adds	r1, r2, r2
 8007a74:	6239      	str	r1, [r7, #32]
 8007a76:	415b      	adcs	r3, r3
 8007a78:	627b      	str	r3, [r7, #36]	; 0x24
 8007a7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007a7e:	4641      	mov	r1, r8
 8007a80:	1854      	adds	r4, r2, r1
 8007a82:	4649      	mov	r1, r9
 8007a84:	eb43 0501 	adc.w	r5, r3, r1
 8007a88:	f04f 0200 	mov.w	r2, #0
 8007a8c:	f04f 0300 	mov.w	r3, #0
 8007a90:	00eb      	lsls	r3, r5, #3
 8007a92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007a96:	00e2      	lsls	r2, r4, #3
 8007a98:	4614      	mov	r4, r2
 8007a9a:	461d      	mov	r5, r3
 8007a9c:	4643      	mov	r3, r8
 8007a9e:	18e3      	adds	r3, r4, r3
 8007aa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007aa4:	464b      	mov	r3, r9
 8007aa6:	eb45 0303 	adc.w	r3, r5, r3
 8007aaa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007aba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007abe:	f04f 0200 	mov.w	r2, #0
 8007ac2:	f04f 0300 	mov.w	r3, #0
 8007ac6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007aca:	4629      	mov	r1, r5
 8007acc:	008b      	lsls	r3, r1, #2
 8007ace:	4621      	mov	r1, r4
 8007ad0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ad4:	4621      	mov	r1, r4
 8007ad6:	008a      	lsls	r2, r1, #2
 8007ad8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007adc:	f7f8 fb74 	bl	80001c8 <__aeabi_uldivmod>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	4b60      	ldr	r3, [pc, #384]	; (8007c68 <UART_SetConfig+0x4e4>)
 8007ae6:	fba3 2302 	umull	r2, r3, r3, r2
 8007aea:	095b      	lsrs	r3, r3, #5
 8007aec:	011c      	lsls	r4, r3, #4
 8007aee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007af2:	2200      	movs	r2, #0
 8007af4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007af8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007afc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007b00:	4642      	mov	r2, r8
 8007b02:	464b      	mov	r3, r9
 8007b04:	1891      	adds	r1, r2, r2
 8007b06:	61b9      	str	r1, [r7, #24]
 8007b08:	415b      	adcs	r3, r3
 8007b0a:	61fb      	str	r3, [r7, #28]
 8007b0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b10:	4641      	mov	r1, r8
 8007b12:	1851      	adds	r1, r2, r1
 8007b14:	6139      	str	r1, [r7, #16]
 8007b16:	4649      	mov	r1, r9
 8007b18:	414b      	adcs	r3, r1
 8007b1a:	617b      	str	r3, [r7, #20]
 8007b1c:	f04f 0200 	mov.w	r2, #0
 8007b20:	f04f 0300 	mov.w	r3, #0
 8007b24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007b28:	4659      	mov	r1, fp
 8007b2a:	00cb      	lsls	r3, r1, #3
 8007b2c:	4651      	mov	r1, sl
 8007b2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b32:	4651      	mov	r1, sl
 8007b34:	00ca      	lsls	r2, r1, #3
 8007b36:	4610      	mov	r0, r2
 8007b38:	4619      	mov	r1, r3
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	4642      	mov	r2, r8
 8007b3e:	189b      	adds	r3, r3, r2
 8007b40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b44:	464b      	mov	r3, r9
 8007b46:	460a      	mov	r2, r1
 8007b48:	eb42 0303 	adc.w	r3, r2, r3
 8007b4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	67bb      	str	r3, [r7, #120]	; 0x78
 8007b5a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007b5c:	f04f 0200 	mov.w	r2, #0
 8007b60:	f04f 0300 	mov.w	r3, #0
 8007b64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007b68:	4649      	mov	r1, r9
 8007b6a:	008b      	lsls	r3, r1, #2
 8007b6c:	4641      	mov	r1, r8
 8007b6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b72:	4641      	mov	r1, r8
 8007b74:	008a      	lsls	r2, r1, #2
 8007b76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007b7a:	f7f8 fb25 	bl	80001c8 <__aeabi_uldivmod>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	460b      	mov	r3, r1
 8007b82:	4611      	mov	r1, r2
 8007b84:	4b38      	ldr	r3, [pc, #224]	; (8007c68 <UART_SetConfig+0x4e4>)
 8007b86:	fba3 2301 	umull	r2, r3, r3, r1
 8007b8a:	095b      	lsrs	r3, r3, #5
 8007b8c:	2264      	movs	r2, #100	; 0x64
 8007b8e:	fb02 f303 	mul.w	r3, r2, r3
 8007b92:	1acb      	subs	r3, r1, r3
 8007b94:	011b      	lsls	r3, r3, #4
 8007b96:	3332      	adds	r3, #50	; 0x32
 8007b98:	4a33      	ldr	r2, [pc, #204]	; (8007c68 <UART_SetConfig+0x4e4>)
 8007b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b9e:	095b      	lsrs	r3, r3, #5
 8007ba0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ba4:	441c      	add	r4, r3
 8007ba6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007baa:	2200      	movs	r2, #0
 8007bac:	673b      	str	r3, [r7, #112]	; 0x70
 8007bae:	677a      	str	r2, [r7, #116]	; 0x74
 8007bb0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007bb4:	4642      	mov	r2, r8
 8007bb6:	464b      	mov	r3, r9
 8007bb8:	1891      	adds	r1, r2, r2
 8007bba:	60b9      	str	r1, [r7, #8]
 8007bbc:	415b      	adcs	r3, r3
 8007bbe:	60fb      	str	r3, [r7, #12]
 8007bc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007bc4:	4641      	mov	r1, r8
 8007bc6:	1851      	adds	r1, r2, r1
 8007bc8:	6039      	str	r1, [r7, #0]
 8007bca:	4649      	mov	r1, r9
 8007bcc:	414b      	adcs	r3, r1
 8007bce:	607b      	str	r3, [r7, #4]
 8007bd0:	f04f 0200 	mov.w	r2, #0
 8007bd4:	f04f 0300 	mov.w	r3, #0
 8007bd8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007bdc:	4659      	mov	r1, fp
 8007bde:	00cb      	lsls	r3, r1, #3
 8007be0:	4651      	mov	r1, sl
 8007be2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007be6:	4651      	mov	r1, sl
 8007be8:	00ca      	lsls	r2, r1, #3
 8007bea:	4610      	mov	r0, r2
 8007bec:	4619      	mov	r1, r3
 8007bee:	4603      	mov	r3, r0
 8007bf0:	4642      	mov	r2, r8
 8007bf2:	189b      	adds	r3, r3, r2
 8007bf4:	66bb      	str	r3, [r7, #104]	; 0x68
 8007bf6:	464b      	mov	r3, r9
 8007bf8:	460a      	mov	r2, r1
 8007bfa:	eb42 0303 	adc.w	r3, r2, r3
 8007bfe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	663b      	str	r3, [r7, #96]	; 0x60
 8007c0a:	667a      	str	r2, [r7, #100]	; 0x64
 8007c0c:	f04f 0200 	mov.w	r2, #0
 8007c10:	f04f 0300 	mov.w	r3, #0
 8007c14:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007c18:	4649      	mov	r1, r9
 8007c1a:	008b      	lsls	r3, r1, #2
 8007c1c:	4641      	mov	r1, r8
 8007c1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c22:	4641      	mov	r1, r8
 8007c24:	008a      	lsls	r2, r1, #2
 8007c26:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007c2a:	f7f8 facd 	bl	80001c8 <__aeabi_uldivmod>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	460b      	mov	r3, r1
 8007c32:	4b0d      	ldr	r3, [pc, #52]	; (8007c68 <UART_SetConfig+0x4e4>)
 8007c34:	fba3 1302 	umull	r1, r3, r3, r2
 8007c38:	095b      	lsrs	r3, r3, #5
 8007c3a:	2164      	movs	r1, #100	; 0x64
 8007c3c:	fb01 f303 	mul.w	r3, r1, r3
 8007c40:	1ad3      	subs	r3, r2, r3
 8007c42:	011b      	lsls	r3, r3, #4
 8007c44:	3332      	adds	r3, #50	; 0x32
 8007c46:	4a08      	ldr	r2, [pc, #32]	; (8007c68 <UART_SetConfig+0x4e4>)
 8007c48:	fba2 2303 	umull	r2, r3, r2, r3
 8007c4c:	095b      	lsrs	r3, r3, #5
 8007c4e:	f003 020f 	and.w	r2, r3, #15
 8007c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4422      	add	r2, r4
 8007c5a:	609a      	str	r2, [r3, #8]
}
 8007c5c:	bf00      	nop
 8007c5e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007c62:	46bd      	mov	sp, r7
 8007c64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c68:	51eb851f 	.word	0x51eb851f

08007c6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007c6c:	b084      	sub	sp, #16
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b084      	sub	sp, #16
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
 8007c76:	f107 001c 	add.w	r0, r7, #28
 8007c7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d122      	bne.n	8007cca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007c98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007cac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d105      	bne.n	8007cbe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 f9c0 	bl	8008044 <USB_CoreReset>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	73fb      	strb	r3, [r7, #15]
 8007cc8:	e01a      	b.n	8007d00 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 f9b4 	bl	8008044 <USB_CoreReset>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d106      	bne.n	8007cf4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	639a      	str	r2, [r3, #56]	; 0x38
 8007cf2:	e005      	b.n	8007d00 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d10b      	bne.n	8007d1e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	f043 0206 	orr.w	r2, r3, #6
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	f043 0220 	orr.w	r2, r3, #32
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3710      	adds	r7, #16
 8007d24:	46bd      	mov	sp, r7
 8007d26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d2a:	b004      	add	sp, #16
 8007d2c:	4770      	bx	lr

08007d2e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d2e:	b480      	push	{r7}
 8007d30:	b083      	sub	sp, #12
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	f043 0201 	orr.w	r2, r3, #1
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d42:	2300      	movs	r3, #0
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	370c      	adds	r7, #12
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	f023 0201 	bic.w	r2, r3, #1
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	370c      	adds	r7, #12
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr

08007d72 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b084      	sub	sp, #16
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
 8007d7a:	460b      	mov	r3, r1
 8007d7c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007d8e:	78fb      	ldrb	r3, [r7, #3]
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d115      	bne.n	8007dc0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007da0:	2001      	movs	r0, #1
 8007da2:	f7f9 fc2f 	bl	8001604 <HAL_Delay>
      ms++;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	3301      	adds	r3, #1
 8007daa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 f93a 	bl	8008026 <USB_GetMode>
 8007db2:	4603      	mov	r3, r0
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d01e      	beq.n	8007df6 <USB_SetCurrentMode+0x84>
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2b31      	cmp	r3, #49	; 0x31
 8007dbc:	d9f0      	bls.n	8007da0 <USB_SetCurrentMode+0x2e>
 8007dbe:	e01a      	b.n	8007df6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007dc0:	78fb      	ldrb	r3, [r7, #3]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d115      	bne.n	8007df2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007dd2:	2001      	movs	r0, #1
 8007dd4:	f7f9 fc16 	bl	8001604 <HAL_Delay>
      ms++;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 f921 	bl	8008026 <USB_GetMode>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d005      	beq.n	8007df6 <USB_SetCurrentMode+0x84>
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2b31      	cmp	r3, #49	; 0x31
 8007dee:	d9f0      	bls.n	8007dd2 <USB_SetCurrentMode+0x60>
 8007df0:	e001      	b.n	8007df6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	e005      	b.n	8007e02 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2b32      	cmp	r3, #50	; 0x32
 8007dfa:	d101      	bne.n	8007e00 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	e000      	b.n	8007e02 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
	...

08007e0c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b085      	sub	sp, #20
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007e16:	2300      	movs	r3, #0
 8007e18:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	4a13      	ldr	r2, [pc, #76]	; (8007e70 <USB_FlushTxFifo+0x64>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d901      	bls.n	8007e2c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007e28:	2303      	movs	r3, #3
 8007e2a:	e01b      	b.n	8007e64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	691b      	ldr	r3, [r3, #16]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	daf2      	bge.n	8007e1a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007e34:	2300      	movs	r3, #0
 8007e36:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	019b      	lsls	r3, r3, #6
 8007e3c:	f043 0220 	orr.w	r2, r3, #32
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	3301      	adds	r3, #1
 8007e48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	4a08      	ldr	r2, [pc, #32]	; (8007e70 <USB_FlushTxFifo+0x64>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d901      	bls.n	8007e56 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007e52:	2303      	movs	r3, #3
 8007e54:	e006      	b.n	8007e64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	f003 0320 	and.w	r3, r3, #32
 8007e5e:	2b20      	cmp	r3, #32
 8007e60:	d0f0      	beq.n	8007e44 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007e62:	2300      	movs	r3, #0
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3714      	adds	r7, #20
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr
 8007e70:	00030d40 	.word	0x00030d40

08007e74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b085      	sub	sp, #20
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	3301      	adds	r3, #1
 8007e84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	4a11      	ldr	r2, [pc, #68]	; (8007ed0 <USB_FlushRxFifo+0x5c>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d901      	bls.n	8007e92 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007e8e:	2303      	movs	r3, #3
 8007e90:	e018      	b.n	8007ec4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	daf2      	bge.n	8007e80 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2210      	movs	r2, #16
 8007ea2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	4a08      	ldr	r2, [pc, #32]	; (8007ed0 <USB_FlushRxFifo+0x5c>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d901      	bls.n	8007eb6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007eb2:	2303      	movs	r3, #3
 8007eb4:	e006      	b.n	8007ec4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	691b      	ldr	r3, [r3, #16]
 8007eba:	f003 0310 	and.w	r3, r3, #16
 8007ebe:	2b10      	cmp	r3, #16
 8007ec0:	d0f0      	beq.n	8007ea4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007ec2:	2300      	movs	r3, #0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3714      	adds	r7, #20
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr
 8007ed0:	00030d40 	.word	0x00030d40

08007ed4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b089      	sub	sp, #36	; 0x24
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	4611      	mov	r1, r2
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	71fb      	strb	r3, [r7, #7]
 8007ee6:	4613      	mov	r3, r2
 8007ee8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007ef2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d123      	bne.n	8007f42 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007efa:	88bb      	ldrh	r3, [r7, #4]
 8007efc:	3303      	adds	r3, #3
 8007efe:	089b      	lsrs	r3, r3, #2
 8007f00:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007f02:	2300      	movs	r3, #0
 8007f04:	61bb      	str	r3, [r7, #24]
 8007f06:	e018      	b.n	8007f3a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007f08:	79fb      	ldrb	r3, [r7, #7]
 8007f0a:	031a      	lsls	r2, r3, #12
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	4413      	add	r3, r2
 8007f10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f14:	461a      	mov	r2, r3
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007f1c:	69fb      	ldr	r3, [r7, #28]
 8007f1e:	3301      	adds	r3, #1
 8007f20:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	3301      	adds	r3, #1
 8007f26:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007f2e:	69fb      	ldr	r3, [r7, #28]
 8007f30:	3301      	adds	r3, #1
 8007f32:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007f34:	69bb      	ldr	r3, [r7, #24]
 8007f36:	3301      	adds	r3, #1
 8007f38:	61bb      	str	r3, [r7, #24]
 8007f3a:	69ba      	ldr	r2, [r7, #24]
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d3e2      	bcc.n	8007f08 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007f42:	2300      	movs	r3, #0
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3724      	adds	r7, #36	; 0x24
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b08b      	sub	sp, #44	; 0x2c
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007f66:	88fb      	ldrh	r3, [r7, #6]
 8007f68:	089b      	lsrs	r3, r3, #2
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007f6e:	88fb      	ldrh	r3, [r7, #6]
 8007f70:	f003 0303 	and.w	r3, r3, #3
 8007f74:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007f76:	2300      	movs	r3, #0
 8007f78:	623b      	str	r3, [r7, #32]
 8007f7a:	e014      	b.n	8007fa6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f86:	601a      	str	r2, [r3, #0]
    pDest++;
 8007f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f90:	3301      	adds	r3, #1
 8007f92:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f96:	3301      	adds	r3, #1
 8007f98:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007fa0:	6a3b      	ldr	r3, [r7, #32]
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	623b      	str	r3, [r7, #32]
 8007fa6:	6a3a      	ldr	r2, [r7, #32]
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d3e6      	bcc.n	8007f7c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007fae:	8bfb      	ldrh	r3, [r7, #30]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d01e      	beq.n	8007ff2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	f107 0310 	add.w	r3, r7, #16
 8007fc4:	6812      	ldr	r2, [r2, #0]
 8007fc6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007fc8:	693a      	ldr	r2, [r7, #16]
 8007fca:	6a3b      	ldr	r3, [r7, #32]
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	00db      	lsls	r3, r3, #3
 8007fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8007fd4:	b2da      	uxtb	r2, r3
 8007fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd8:	701a      	strb	r2, [r3, #0]
      i++;
 8007fda:	6a3b      	ldr	r3, [r7, #32]
 8007fdc:	3301      	adds	r3, #1
 8007fde:	623b      	str	r3, [r7, #32]
      pDest++;
 8007fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007fe6:	8bfb      	ldrh	r3, [r7, #30]
 8007fe8:	3b01      	subs	r3, #1
 8007fea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007fec:	8bfb      	ldrh	r3, [r7, #30]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d1ea      	bne.n	8007fc8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	372c      	adds	r7, #44	; 0x2c
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr

08008000 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008000:	b480      	push	{r7}
 8008002:	b085      	sub	sp, #20
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	695b      	ldr	r3, [r3, #20]
 800800c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	699b      	ldr	r3, [r3, #24]
 8008012:	68fa      	ldr	r2, [r7, #12]
 8008014:	4013      	ands	r3, r2
 8008016:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008018:	68fb      	ldr	r3, [r7, #12]
}
 800801a:	4618      	mov	r0, r3
 800801c:	3714      	adds	r7, #20
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr

08008026 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008026:	b480      	push	{r7}
 8008028:	b083      	sub	sp, #12
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	695b      	ldr	r3, [r3, #20]
 8008032:	f003 0301 	and.w	r3, r3, #1
}
 8008036:	4618      	mov	r0, r3
 8008038:	370c      	adds	r7, #12
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr
	...

08008044 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008044:	b480      	push	{r7}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800804c:	2300      	movs	r3, #0
 800804e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	3301      	adds	r3, #1
 8008054:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	4a13      	ldr	r2, [pc, #76]	; (80080a8 <USB_CoreReset+0x64>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d901      	bls.n	8008062 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800805e:	2303      	movs	r3, #3
 8008060:	e01b      	b.n	800809a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	2b00      	cmp	r3, #0
 8008068:	daf2      	bge.n	8008050 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800806a:	2300      	movs	r3, #0
 800806c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	691b      	ldr	r3, [r3, #16]
 8008072:	f043 0201 	orr.w	r2, r3, #1
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	3301      	adds	r3, #1
 800807e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	4a09      	ldr	r2, [pc, #36]	; (80080a8 <USB_CoreReset+0x64>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d901      	bls.n	800808c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008088:	2303      	movs	r3, #3
 800808a:	e006      	b.n	800809a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	691b      	ldr	r3, [r3, #16]
 8008090:	f003 0301 	and.w	r3, r3, #1
 8008094:	2b01      	cmp	r3, #1
 8008096:	d0f0      	beq.n	800807a <USB_CoreReset+0x36>

  return HAL_OK;
 8008098:	2300      	movs	r3, #0
}
 800809a:	4618      	mov	r0, r3
 800809c:	3714      	adds	r7, #20
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	00030d40 	.word	0x00030d40

080080ac <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80080ac:	b084      	sub	sp, #16
 80080ae:	b580      	push	{r7, lr}
 80080b0:	b086      	sub	sp, #24
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	6078      	str	r0, [r7, #4]
 80080b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80080ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80080be:	2300      	movs	r3, #0
 80080c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80080cc:	461a      	mov	r2, r3
 80080ce:	2300      	movs	r3, #0
 80080d0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ee:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d018      	beq.n	8008134 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008104:	2b01      	cmp	r3, #1
 8008106:	d10a      	bne.n	800811e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	68fa      	ldr	r2, [r7, #12]
 8008112:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008116:	f043 0304 	orr.w	r3, r3, #4
 800811a:	6013      	str	r3, [r2, #0]
 800811c:	e014      	b.n	8008148 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	68fa      	ldr	r2, [r7, #12]
 8008128:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800812c:	f023 0304 	bic.w	r3, r3, #4
 8008130:	6013      	str	r3, [r2, #0]
 8008132:	e009      	b.n	8008148 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008142:	f023 0304 	bic.w	r3, r3, #4
 8008146:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008148:	2110      	movs	r1, #16
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f7ff fe5e 	bl	8007e0c <USB_FlushTxFifo>
 8008150:	4603      	mov	r3, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d001      	beq.n	800815a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f7ff fe8a 	bl	8007e74 <USB_FlushRxFifo>
 8008160:	4603      	mov	r3, r0
 8008162:	2b00      	cmp	r3, #0
 8008164:	d001      	beq.n	800816a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8008166:	2301      	movs	r3, #1
 8008168:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800816a:	2300      	movs	r3, #0
 800816c:	613b      	str	r3, [r7, #16]
 800816e:	e015      	b.n	800819c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	015a      	lsls	r2, r3, #5
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	4413      	add	r3, r2
 8008178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800817c:	461a      	mov	r2, r3
 800817e:	f04f 33ff 	mov.w	r3, #4294967295
 8008182:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	015a      	lsls	r2, r3, #5
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	4413      	add	r3, r2
 800818c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008190:	461a      	mov	r2, r3
 8008192:	2300      	movs	r3, #0
 8008194:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	3301      	adds	r3, #1
 800819a:	613b      	str	r3, [r7, #16]
 800819c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800819e:	693a      	ldr	r2, [r7, #16]
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d3e5      	bcc.n	8008170 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f04f 32ff 	mov.w	r2, #4294967295
 80081b0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d00b      	beq.n	80081d6 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081c4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4a13      	ldr	r2, [pc, #76]	; (8008218 <USB_HostInit+0x16c>)
 80081ca:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	4a13      	ldr	r2, [pc, #76]	; (800821c <USB_HostInit+0x170>)
 80081d0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80081d4:	e009      	b.n	80081ea <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2280      	movs	r2, #128	; 0x80
 80081da:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	4a10      	ldr	r2, [pc, #64]	; (8008220 <USB_HostInit+0x174>)
 80081e0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4a0f      	ldr	r2, [pc, #60]	; (8008224 <USB_HostInit+0x178>)
 80081e6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80081ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d105      	bne.n	80081fc <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	699b      	ldr	r3, [r3, #24]
 80081f4:	f043 0210 	orr.w	r2, r3, #16
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	699a      	ldr	r2, [r3, #24]
 8008200:	4b09      	ldr	r3, [pc, #36]	; (8008228 <USB_HostInit+0x17c>)
 8008202:	4313      	orrs	r3, r2
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008208:	7dfb      	ldrb	r3, [r7, #23]
}
 800820a:	4618      	mov	r0, r3
 800820c:	3718      	adds	r7, #24
 800820e:	46bd      	mov	sp, r7
 8008210:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008214:	b004      	add	sp, #16
 8008216:	4770      	bx	lr
 8008218:	01000200 	.word	0x01000200
 800821c:	00e00300 	.word	0x00e00300
 8008220:	00600080 	.word	0x00600080
 8008224:	004000e0 	.word	0x004000e0
 8008228:	a3200008 	.word	0xa3200008

0800822c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800822c:	b480      	push	{r7}
 800822e:	b085      	sub	sp, #20
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	460b      	mov	r3, r1
 8008236:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	68fa      	ldr	r2, [r7, #12]
 8008246:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800824a:	f023 0303 	bic.w	r3, r3, #3
 800824e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	78fb      	ldrb	r3, [r7, #3]
 800825a:	f003 0303 	and.w	r3, r3, #3
 800825e:	68f9      	ldr	r1, [r7, #12]
 8008260:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008264:	4313      	orrs	r3, r2
 8008266:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008268:	78fb      	ldrb	r3, [r7, #3]
 800826a:	2b01      	cmp	r3, #1
 800826c:	d107      	bne.n	800827e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008274:	461a      	mov	r2, r3
 8008276:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800827a:	6053      	str	r3, [r2, #4]
 800827c:	e009      	b.n	8008292 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800827e:	78fb      	ldrb	r3, [r7, #3]
 8008280:	2b02      	cmp	r3, #2
 8008282:	d106      	bne.n	8008292 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800828a:	461a      	mov	r2, r3
 800828c:	f241 7370 	movw	r3, #6000	; 0x1770
 8008290:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008292:	2300      	movs	r3, #0
}
 8008294:	4618      	mov	r0, r3
 8008296:	3714      	adds	r7, #20
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80082ac:	2300      	movs	r3, #0
 80082ae:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80082c0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	68fa      	ldr	r2, [r7, #12]
 80082c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80082ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082ce:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80082d0:	2064      	movs	r0, #100	; 0x64
 80082d2:	f7f9 f997 	bl	8001604 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	68fa      	ldr	r2, [r7, #12]
 80082da:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80082de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082e2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80082e4:	200a      	movs	r0, #10
 80082e6:	f7f9 f98d 	bl	8001604 <HAL_Delay>

  return HAL_OK;
 80082ea:	2300      	movs	r3, #0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3710      	adds	r7, #16
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b085      	sub	sp, #20
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	460b      	mov	r3, r1
 80082fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008304:	2300      	movs	r3, #0
 8008306:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008318:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008320:	2b00      	cmp	r3, #0
 8008322:	d109      	bne.n	8008338 <USB_DriveVbus+0x44>
 8008324:	78fb      	ldrb	r3, [r7, #3]
 8008326:	2b01      	cmp	r3, #1
 8008328:	d106      	bne.n	8008338 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	68fa      	ldr	r2, [r7, #12]
 800832e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008332:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008336:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800833e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008342:	d109      	bne.n	8008358 <USB_DriveVbus+0x64>
 8008344:	78fb      	ldrb	r3, [r7, #3]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d106      	bne.n	8008358 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	68fa      	ldr	r2, [r7, #12]
 800834e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008352:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008356:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008358:	2300      	movs	r3, #0
}
 800835a:	4618      	mov	r0, r3
 800835c:	3714      	adds	r7, #20
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr

08008366 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008366:	b480      	push	{r7}
 8008368:	b085      	sub	sp, #20
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008372:	2300      	movs	r3, #0
 8008374:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	0c5b      	lsrs	r3, r3, #17
 8008384:	f003 0303 	and.w	r3, r3, #3
}
 8008388:	4618      	mov	r0, r3
 800838a:	3714      	adds	r7, #20
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008394:	b480      	push	{r7}
 8008396:	b085      	sub	sp, #20
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	b29b      	uxth	r3, r3
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3714      	adds	r7, #20
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr
	...

080083b8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b088      	sub	sp, #32
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	4608      	mov	r0, r1
 80083c2:	4611      	mov	r1, r2
 80083c4:	461a      	mov	r2, r3
 80083c6:	4603      	mov	r3, r0
 80083c8:	70fb      	strb	r3, [r7, #3]
 80083ca:	460b      	mov	r3, r1
 80083cc:	70bb      	strb	r3, [r7, #2]
 80083ce:	4613      	mov	r3, r2
 80083d0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80083d2:	2300      	movs	r3, #0
 80083d4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80083da:	78fb      	ldrb	r3, [r7, #3]
 80083dc:	015a      	lsls	r2, r3, #5
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	4413      	add	r3, r2
 80083e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083e6:	461a      	mov	r2, r3
 80083e8:	f04f 33ff 	mov.w	r3, #4294967295
 80083ec:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80083ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80083f2:	2b03      	cmp	r3, #3
 80083f4:	d87e      	bhi.n	80084f4 <USB_HC_Init+0x13c>
 80083f6:	a201      	add	r2, pc, #4	; (adr r2, 80083fc <USB_HC_Init+0x44>)
 80083f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083fc:	0800840d 	.word	0x0800840d
 8008400:	080084b7 	.word	0x080084b7
 8008404:	0800840d 	.word	0x0800840d
 8008408:	08008479 	.word	0x08008479
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800840c:	78fb      	ldrb	r3, [r7, #3]
 800840e:	015a      	lsls	r2, r3, #5
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	4413      	add	r3, r2
 8008414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008418:	461a      	mov	r2, r3
 800841a:	f240 439d 	movw	r3, #1181	; 0x49d
 800841e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008420:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008424:	2b00      	cmp	r3, #0
 8008426:	da10      	bge.n	800844a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008428:	78fb      	ldrb	r3, [r7, #3]
 800842a:	015a      	lsls	r2, r3, #5
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	4413      	add	r3, r2
 8008430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	78fa      	ldrb	r2, [r7, #3]
 8008438:	0151      	lsls	r1, r2, #5
 800843a:	693a      	ldr	r2, [r7, #16]
 800843c:	440a      	add	r2, r1
 800843e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008446:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008448:	e057      	b.n	80084fa <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800844e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008452:	2b00      	cmp	r3, #0
 8008454:	d051      	beq.n	80084fa <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008456:	78fb      	ldrb	r3, [r7, #3]
 8008458:	015a      	lsls	r2, r3, #5
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	4413      	add	r3, r2
 800845e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	78fa      	ldrb	r2, [r7, #3]
 8008466:	0151      	lsls	r1, r2, #5
 8008468:	693a      	ldr	r2, [r7, #16]
 800846a:	440a      	add	r2, r1
 800846c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008470:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008474:	60d3      	str	r3, [r2, #12]
      break;
 8008476:	e040      	b.n	80084fa <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008478:	78fb      	ldrb	r3, [r7, #3]
 800847a:	015a      	lsls	r2, r3, #5
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	4413      	add	r3, r2
 8008480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008484:	461a      	mov	r2, r3
 8008486:	f240 639d 	movw	r3, #1693	; 0x69d
 800848a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800848c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008490:	2b00      	cmp	r3, #0
 8008492:	da34      	bge.n	80084fe <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008494:	78fb      	ldrb	r3, [r7, #3]
 8008496:	015a      	lsls	r2, r3, #5
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	4413      	add	r3, r2
 800849c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	78fa      	ldrb	r2, [r7, #3]
 80084a4:	0151      	lsls	r1, r2, #5
 80084a6:	693a      	ldr	r2, [r7, #16]
 80084a8:	440a      	add	r2, r1
 80084aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084b2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80084b4:	e023      	b.n	80084fe <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80084b6:	78fb      	ldrb	r3, [r7, #3]
 80084b8:	015a      	lsls	r2, r3, #5
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	4413      	add	r3, r2
 80084be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084c2:	461a      	mov	r2, r3
 80084c4:	f240 2325 	movw	r3, #549	; 0x225
 80084c8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80084ca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	da17      	bge.n	8008502 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80084d2:	78fb      	ldrb	r3, [r7, #3]
 80084d4:	015a      	lsls	r2, r3, #5
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	4413      	add	r3, r2
 80084da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	78fa      	ldrb	r2, [r7, #3]
 80084e2:	0151      	lsls	r1, r2, #5
 80084e4:	693a      	ldr	r2, [r7, #16]
 80084e6:	440a      	add	r2, r1
 80084e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084ec:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80084f0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80084f2:	e006      	b.n	8008502 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80084f4:	2301      	movs	r3, #1
 80084f6:	77fb      	strb	r3, [r7, #31]
      break;
 80084f8:	e004      	b.n	8008504 <USB_HC_Init+0x14c>
      break;
 80084fa:	bf00      	nop
 80084fc:	e002      	b.n	8008504 <USB_HC_Init+0x14c>
      break;
 80084fe:	bf00      	nop
 8008500:	e000      	b.n	8008504 <USB_HC_Init+0x14c>
      break;
 8008502:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008504:	78fb      	ldrb	r3, [r7, #3]
 8008506:	015a      	lsls	r2, r3, #5
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	4413      	add	r3, r2
 800850c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008510:	68db      	ldr	r3, [r3, #12]
 8008512:	78fa      	ldrb	r2, [r7, #3]
 8008514:	0151      	lsls	r1, r2, #5
 8008516:	693a      	ldr	r2, [r7, #16]
 8008518:	440a      	add	r2, r1
 800851a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800851e:	f043 0302 	orr.w	r3, r3, #2
 8008522:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800852a:	699a      	ldr	r2, [r3, #24]
 800852c:	78fb      	ldrb	r3, [r7, #3]
 800852e:	f003 030f 	and.w	r3, r3, #15
 8008532:	2101      	movs	r1, #1
 8008534:	fa01 f303 	lsl.w	r3, r1, r3
 8008538:	6939      	ldr	r1, [r7, #16]
 800853a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800853e:	4313      	orrs	r3, r2
 8008540:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	699b      	ldr	r3, [r3, #24]
 8008546:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800854e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008552:	2b00      	cmp	r3, #0
 8008554:	da03      	bge.n	800855e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800855a:	61bb      	str	r3, [r7, #24]
 800855c:	e001      	b.n	8008562 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800855e:	2300      	movs	r3, #0
 8008560:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f7ff feff 	bl	8008366 <USB_GetHostSpeed>
 8008568:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800856a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800856e:	2b02      	cmp	r3, #2
 8008570:	d106      	bne.n	8008580 <USB_HC_Init+0x1c8>
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2b02      	cmp	r3, #2
 8008576:	d003      	beq.n	8008580 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008578:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800857c:	617b      	str	r3, [r7, #20]
 800857e:	e001      	b.n	8008584 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008580:	2300      	movs	r3, #0
 8008582:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008584:	787b      	ldrb	r3, [r7, #1]
 8008586:	059b      	lsls	r3, r3, #22
 8008588:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800858c:	78bb      	ldrb	r3, [r7, #2]
 800858e:	02db      	lsls	r3, r3, #11
 8008590:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008594:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008596:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800859a:	049b      	lsls	r3, r3, #18
 800859c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80085a0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80085a2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80085a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80085a8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80085ae:	78fb      	ldrb	r3, [r7, #3]
 80085b0:	0159      	lsls	r1, r3, #5
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	440b      	add	r3, r1
 80085b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085ba:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80085c0:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80085c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80085c6:	2b03      	cmp	r3, #3
 80085c8:	d003      	beq.n	80085d2 <USB_HC_Init+0x21a>
 80085ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d10f      	bne.n	80085f2 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80085d2:	78fb      	ldrb	r3, [r7, #3]
 80085d4:	015a      	lsls	r2, r3, #5
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	4413      	add	r3, r2
 80085da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	78fa      	ldrb	r2, [r7, #3]
 80085e2:	0151      	lsls	r1, r2, #5
 80085e4:	693a      	ldr	r2, [r7, #16]
 80085e6:	440a      	add	r2, r1
 80085e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80085f0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80085f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3720      	adds	r7, #32
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b08c      	sub	sp, #48	; 0x30
 8008600:	af02      	add	r7, sp, #8
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	4613      	mov	r3, r2
 8008608:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	785b      	ldrb	r3, [r3, #1]
 8008612:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008614:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008618:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800861e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008622:	2b00      	cmp	r3, #0
 8008624:	d02d      	beq.n	8008682 <USB_HC_StartXfer+0x86>
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	791b      	ldrb	r3, [r3, #4]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d129      	bne.n	8008682 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800862e:	79fb      	ldrb	r3, [r7, #7]
 8008630:	2b01      	cmp	r3, #1
 8008632:	d117      	bne.n	8008664 <USB_HC_StartXfer+0x68>
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	79db      	ldrb	r3, [r3, #7]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d003      	beq.n	8008644 <USB_HC_StartXfer+0x48>
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	79db      	ldrb	r3, [r3, #7]
 8008640:	2b02      	cmp	r3, #2
 8008642:	d10f      	bne.n	8008664 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008644:	69fb      	ldr	r3, [r7, #28]
 8008646:	015a      	lsls	r2, r3, #5
 8008648:	6a3b      	ldr	r3, [r7, #32]
 800864a:	4413      	add	r3, r2
 800864c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008650:	68db      	ldr	r3, [r3, #12]
 8008652:	69fa      	ldr	r2, [r7, #28]
 8008654:	0151      	lsls	r1, r2, #5
 8008656:	6a3a      	ldr	r2, [r7, #32]
 8008658:	440a      	add	r2, r1
 800865a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800865e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008662:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8008664:	79fb      	ldrb	r3, [r7, #7]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d10b      	bne.n	8008682 <USB_HC_StartXfer+0x86>
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	795b      	ldrb	r3, [r3, #5]
 800866e:	2b01      	cmp	r3, #1
 8008670:	d107      	bne.n	8008682 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	785b      	ldrb	r3, [r3, #1]
 8008676:	4619      	mov	r1, r3
 8008678:	68f8      	ldr	r0, [r7, #12]
 800867a:	f000 fa0f 	bl	8008a9c <USB_DoPing>
      return HAL_OK;
 800867e:	2300      	movs	r3, #0
 8008680:	e0f8      	b.n	8008874 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	695b      	ldr	r3, [r3, #20]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d018      	beq.n	80086bc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	695b      	ldr	r3, [r3, #20]
 800868e:	68ba      	ldr	r2, [r7, #8]
 8008690:	8912      	ldrh	r2, [r2, #8]
 8008692:	4413      	add	r3, r2
 8008694:	3b01      	subs	r3, #1
 8008696:	68ba      	ldr	r2, [r7, #8]
 8008698:	8912      	ldrh	r2, [r2, #8]
 800869a:	fbb3 f3f2 	udiv	r3, r3, r2
 800869e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80086a0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80086a2:	8b7b      	ldrh	r3, [r7, #26]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d90b      	bls.n	80086c0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80086a8:	8b7b      	ldrh	r3, [r7, #26]
 80086aa:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80086ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80086ae:	68ba      	ldr	r2, [r7, #8]
 80086b0:	8912      	ldrh	r2, [r2, #8]
 80086b2:	fb03 f202 	mul.w	r2, r3, r2
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	611a      	str	r2, [r3, #16]
 80086ba:	e001      	b.n	80086c0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80086bc:	2301      	movs	r3, #1
 80086be:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	78db      	ldrb	r3, [r3, #3]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d007      	beq.n	80086d8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80086c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80086ca:	68ba      	ldr	r2, [r7, #8]
 80086cc:	8912      	ldrh	r2, [r2, #8]
 80086ce:	fb03 f202 	mul.w	r2, r3, r2
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	611a      	str	r2, [r3, #16]
 80086d6:	e003      	b.n	80086e0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	695a      	ldr	r2, [r3, #20]
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	691b      	ldr	r3, [r3, #16]
 80086e4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80086e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80086ea:	04d9      	lsls	r1, r3, #19
 80086ec:	4b63      	ldr	r3, [pc, #396]	; (800887c <USB_HC_StartXfer+0x280>)
 80086ee:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80086f0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	7a9b      	ldrb	r3, [r3, #10]
 80086f6:	075b      	lsls	r3, r3, #29
 80086f8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80086fc:	69f9      	ldr	r1, [r7, #28]
 80086fe:	0148      	lsls	r0, r1, #5
 8008700:	6a39      	ldr	r1, [r7, #32]
 8008702:	4401      	add	r1, r0
 8008704:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008708:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800870a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800870c:	79fb      	ldrb	r3, [r7, #7]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d009      	beq.n	8008726 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	68d9      	ldr	r1, [r3, #12]
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	015a      	lsls	r2, r3, #5
 800871a:	6a3b      	ldr	r3, [r7, #32]
 800871c:	4413      	add	r3, r2
 800871e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008722:	460a      	mov	r2, r1
 8008724:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008726:	6a3b      	ldr	r3, [r7, #32]
 8008728:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	f003 0301 	and.w	r3, r3, #1
 8008732:	2b00      	cmp	r3, #0
 8008734:	bf0c      	ite	eq
 8008736:	2301      	moveq	r3, #1
 8008738:	2300      	movne	r3, #0
 800873a:	b2db      	uxtb	r3, r3
 800873c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800873e:	69fb      	ldr	r3, [r7, #28]
 8008740:	015a      	lsls	r2, r3, #5
 8008742:	6a3b      	ldr	r3, [r7, #32]
 8008744:	4413      	add	r3, r2
 8008746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	69fa      	ldr	r2, [r7, #28]
 800874e:	0151      	lsls	r1, r2, #5
 8008750:	6a3a      	ldr	r2, [r7, #32]
 8008752:	440a      	add	r2, r1
 8008754:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008758:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800875c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	015a      	lsls	r2, r3, #5
 8008762:	6a3b      	ldr	r3, [r7, #32]
 8008764:	4413      	add	r3, r2
 8008766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	7e7b      	ldrb	r3, [r7, #25]
 800876e:	075b      	lsls	r3, r3, #29
 8008770:	69f9      	ldr	r1, [r7, #28]
 8008772:	0148      	lsls	r0, r1, #5
 8008774:	6a39      	ldr	r1, [r7, #32]
 8008776:	4401      	add	r1, r0
 8008778:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800877c:	4313      	orrs	r3, r2
 800877e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	015a      	lsls	r2, r3, #5
 8008784:	6a3b      	ldr	r3, [r7, #32]
 8008786:	4413      	add	r3, r2
 8008788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008796:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	78db      	ldrb	r3, [r3, #3]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d004      	beq.n	80087aa <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087a6:	613b      	str	r3, [r7, #16]
 80087a8:	e003      	b.n	80087b2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80087b0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80087b8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80087ba:	69fb      	ldr	r3, [r7, #28]
 80087bc:	015a      	lsls	r2, r3, #5
 80087be:	6a3b      	ldr	r3, [r7, #32]
 80087c0:	4413      	add	r3, r2
 80087c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087c6:	461a      	mov	r2, r3
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80087cc:	79fb      	ldrb	r3, [r7, #7]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d001      	beq.n	80087d6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80087d2:	2300      	movs	r3, #0
 80087d4:	e04e      	b.n	8008874 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	78db      	ldrb	r3, [r3, #3]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d149      	bne.n	8008872 <USB_HC_StartXfer+0x276>
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	695b      	ldr	r3, [r3, #20]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d045      	beq.n	8008872 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	79db      	ldrb	r3, [r3, #7]
 80087ea:	2b03      	cmp	r3, #3
 80087ec:	d830      	bhi.n	8008850 <USB_HC_StartXfer+0x254>
 80087ee:	a201      	add	r2, pc, #4	; (adr r2, 80087f4 <USB_HC_StartXfer+0x1f8>)
 80087f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f4:	08008805 	.word	0x08008805
 80087f8:	08008829 	.word	0x08008829
 80087fc:	08008805 	.word	0x08008805
 8008800:	08008829 	.word	0x08008829
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	695b      	ldr	r3, [r3, #20]
 8008808:	3303      	adds	r3, #3
 800880a:	089b      	lsrs	r3, r3, #2
 800880c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800880e:	8afa      	ldrh	r2, [r7, #22]
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008814:	b29b      	uxth	r3, r3
 8008816:	429a      	cmp	r2, r3
 8008818:	d91c      	bls.n	8008854 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	699b      	ldr	r3, [r3, #24]
 800881e:	f043 0220 	orr.w	r2, r3, #32
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	619a      	str	r2, [r3, #24]
        }
        break;
 8008826:	e015      	b.n	8008854 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	695b      	ldr	r3, [r3, #20]
 800882c:	3303      	adds	r3, #3
 800882e:	089b      	lsrs	r3, r3, #2
 8008830:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008832:	8afa      	ldrh	r2, [r7, #22]
 8008834:	6a3b      	ldr	r3, [r7, #32]
 8008836:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800883a:	691b      	ldr	r3, [r3, #16]
 800883c:	b29b      	uxth	r3, r3
 800883e:	429a      	cmp	r2, r3
 8008840:	d90a      	bls.n	8008858 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	699b      	ldr	r3, [r3, #24]
 8008846:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	619a      	str	r2, [r3, #24]
        }
        break;
 800884e:	e003      	b.n	8008858 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008850:	bf00      	nop
 8008852:	e002      	b.n	800885a <USB_HC_StartXfer+0x25e>
        break;
 8008854:	bf00      	nop
 8008856:	e000      	b.n	800885a <USB_HC_StartXfer+0x25e>
        break;
 8008858:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	68d9      	ldr	r1, [r3, #12]
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	785a      	ldrb	r2, [r3, #1]
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	695b      	ldr	r3, [r3, #20]
 8008866:	b29b      	uxth	r3, r3
 8008868:	2000      	movs	r0, #0
 800886a:	9000      	str	r0, [sp, #0]
 800886c:	68f8      	ldr	r0, [r7, #12]
 800886e:	f7ff fb31 	bl	8007ed4 <USB_WritePacket>
  }

  return HAL_OK;
 8008872:	2300      	movs	r3, #0
}
 8008874:	4618      	mov	r0, r3
 8008876:	3728      	adds	r7, #40	; 0x28
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}
 800887c:	1ff80000 	.word	0x1ff80000

08008880 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008880:	b480      	push	{r7}
 8008882:	b085      	sub	sp, #20
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008892:	695b      	ldr	r3, [r3, #20]
 8008894:	b29b      	uxth	r3, r3
}
 8008896:	4618      	mov	r0, r3
 8008898:	3714      	adds	r7, #20
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr

080088a2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80088a2:	b480      	push	{r7}
 80088a4:	b089      	sub	sp, #36	; 0x24
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
 80088aa:	460b      	mov	r3, r1
 80088ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80088b2:	78fb      	ldrb	r3, [r7, #3]
 80088b4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80088b6:	2300      	movs	r3, #0
 80088b8:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80088ba:	69bb      	ldr	r3, [r7, #24]
 80088bc:	015a      	lsls	r2, r3, #5
 80088be:	69fb      	ldr	r3, [r7, #28]
 80088c0:	4413      	add	r3, r2
 80088c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	0c9b      	lsrs	r3, r3, #18
 80088ca:	f003 0303 	and.w	r3, r3, #3
 80088ce:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	015a      	lsls	r2, r3, #5
 80088d4:	69fb      	ldr	r3, [r7, #28]
 80088d6:	4413      	add	r3, r2
 80088d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	0fdb      	lsrs	r3, r3, #31
 80088e0:	f003 0301 	and.w	r3, r3, #1
 80088e4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	f003 0320 	and.w	r3, r3, #32
 80088ee:	2b20      	cmp	r3, #32
 80088f0:	d104      	bne.n	80088fc <USB_HC_Halt+0x5a>
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d101      	bne.n	80088fc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80088f8:	2300      	movs	r3, #0
 80088fa:	e0c8      	b.n	8008a8e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d002      	beq.n	8008908 <USB_HC_Halt+0x66>
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	2b02      	cmp	r3, #2
 8008906:	d163      	bne.n	80089d0 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008908:	69bb      	ldr	r3, [r7, #24]
 800890a:	015a      	lsls	r2, r3, #5
 800890c:	69fb      	ldr	r3, [r7, #28]
 800890e:	4413      	add	r3, r2
 8008910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	69ba      	ldr	r2, [r7, #24]
 8008918:	0151      	lsls	r1, r2, #5
 800891a:	69fa      	ldr	r2, [r7, #28]
 800891c:	440a      	add	r2, r1
 800891e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008922:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008926:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	f003 0320 	and.w	r3, r3, #32
 8008930:	2b00      	cmp	r3, #0
 8008932:	f040 80ab 	bne.w	8008a8c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800893a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800893e:	2b00      	cmp	r3, #0
 8008940:	d133      	bne.n	80089aa <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	015a      	lsls	r2, r3, #5
 8008946:	69fb      	ldr	r3, [r7, #28]
 8008948:	4413      	add	r3, r2
 800894a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	69ba      	ldr	r2, [r7, #24]
 8008952:	0151      	lsls	r1, r2, #5
 8008954:	69fa      	ldr	r2, [r7, #28]
 8008956:	440a      	add	r2, r1
 8008958:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800895c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008960:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008962:	69bb      	ldr	r3, [r7, #24]
 8008964:	015a      	lsls	r2, r3, #5
 8008966:	69fb      	ldr	r3, [r7, #28]
 8008968:	4413      	add	r3, r2
 800896a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	69ba      	ldr	r2, [r7, #24]
 8008972:	0151      	lsls	r1, r2, #5
 8008974:	69fa      	ldr	r2, [r7, #28]
 8008976:	440a      	add	r2, r1
 8008978:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800897c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008980:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	3301      	adds	r3, #1
 8008986:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800898e:	d81d      	bhi.n	80089cc <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	015a      	lsls	r2, r3, #5
 8008994:	69fb      	ldr	r3, [r7, #28]
 8008996:	4413      	add	r3, r2
 8008998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089a6:	d0ec      	beq.n	8008982 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80089a8:	e070      	b.n	8008a8c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80089aa:	69bb      	ldr	r3, [r7, #24]
 80089ac:	015a      	lsls	r2, r3, #5
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	4413      	add	r3, r2
 80089b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	69ba      	ldr	r2, [r7, #24]
 80089ba:	0151      	lsls	r1, r2, #5
 80089bc:	69fa      	ldr	r2, [r7, #28]
 80089be:	440a      	add	r2, r1
 80089c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089c8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80089ca:	e05f      	b.n	8008a8c <USB_HC_Halt+0x1ea>
            break;
 80089cc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80089ce:	e05d      	b.n	8008a8c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	015a      	lsls	r2, r3, #5
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	4413      	add	r3, r2
 80089d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	69ba      	ldr	r2, [r7, #24]
 80089e0:	0151      	lsls	r1, r2, #5
 80089e2:	69fa      	ldr	r2, [r7, #28]
 80089e4:	440a      	add	r2, r1
 80089e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089ee:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80089f0:	69fb      	ldr	r3, [r7, #28]
 80089f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089f6:	691b      	ldr	r3, [r3, #16]
 80089f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d133      	bne.n	8008a68 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008a00:	69bb      	ldr	r3, [r7, #24]
 8008a02:	015a      	lsls	r2, r3, #5
 8008a04:	69fb      	ldr	r3, [r7, #28]
 8008a06:	4413      	add	r3, r2
 8008a08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	69ba      	ldr	r2, [r7, #24]
 8008a10:	0151      	lsls	r1, r2, #5
 8008a12:	69fa      	ldr	r2, [r7, #28]
 8008a14:	440a      	add	r2, r1
 8008a16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a1e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008a20:	69bb      	ldr	r3, [r7, #24]
 8008a22:	015a      	lsls	r2, r3, #5
 8008a24:	69fb      	ldr	r3, [r7, #28]
 8008a26:	4413      	add	r3, r2
 8008a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	69ba      	ldr	r2, [r7, #24]
 8008a30:	0151      	lsls	r1, r2, #5
 8008a32:	69fa      	ldr	r2, [r7, #28]
 8008a34:	440a      	add	r2, r1
 8008a36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a3e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	3301      	adds	r3, #1
 8008a44:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a4c:	d81d      	bhi.n	8008a8a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	015a      	lsls	r2, r3, #5
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	4413      	add	r3, r2
 8008a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a64:	d0ec      	beq.n	8008a40 <USB_HC_Halt+0x19e>
 8008a66:	e011      	b.n	8008a8c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008a68:	69bb      	ldr	r3, [r7, #24]
 8008a6a:	015a      	lsls	r2, r3, #5
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	4413      	add	r3, r2
 8008a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	69ba      	ldr	r2, [r7, #24]
 8008a78:	0151      	lsls	r1, r2, #5
 8008a7a:	69fa      	ldr	r2, [r7, #28]
 8008a7c:	440a      	add	r2, r1
 8008a7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a86:	6013      	str	r3, [r2, #0]
 8008a88:	e000      	b.n	8008a8c <USB_HC_Halt+0x1ea>
          break;
 8008a8a:	bf00      	nop
    }
  }

  return HAL_OK;
 8008a8c:	2300      	movs	r3, #0
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3724      	adds	r7, #36	; 0x24
 8008a92:	46bd      	mov	sp, r7
 8008a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a98:	4770      	bx	lr
	...

08008a9c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b087      	sub	sp, #28
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008aac:	78fb      	ldrb	r3, [r7, #3]
 8008aae:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	04da      	lsls	r2, r3, #19
 8008ab8:	4b15      	ldr	r3, [pc, #84]	; (8008b10 <USB_DoPing+0x74>)
 8008aba:	4013      	ands	r3, r2
 8008abc:	693a      	ldr	r2, [r7, #16]
 8008abe:	0151      	lsls	r1, r2, #5
 8008ac0:	697a      	ldr	r2, [r7, #20]
 8008ac2:	440a      	add	r2, r1
 8008ac4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ac8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008acc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	015a      	lsls	r2, r3, #5
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	4413      	add	r3, r2
 8008ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008ae4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008aec:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	015a      	lsls	r2, r3, #5
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	4413      	add	r3, r2
 8008af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008afa:	461a      	mov	r2, r3
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008b00:	2300      	movs	r3, #0
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	371c      	adds	r7, #28
 8008b06:	46bd      	mov	sp, r7
 8008b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0c:	4770      	bx	lr
 8008b0e:	bf00      	nop
 8008b10:	1ff80000 	.word	0x1ff80000

08008b14 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b088      	sub	sp, #32
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008b24:	2300      	movs	r3, #0
 8008b26:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f7ff f911 	bl	8007d50 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008b2e:	2110      	movs	r1, #16
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f7ff f96b 	bl	8007e0c <USB_FlushTxFifo>
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d001      	beq.n	8008b40 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f7ff f997 	bl	8007e74 <USB_FlushRxFifo>
 8008b46:	4603      	mov	r3, r0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d001      	beq.n	8008b50 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008b50:	2300      	movs	r3, #0
 8008b52:	61bb      	str	r3, [r7, #24]
 8008b54:	e01f      	b.n	8008b96 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008b56:	69bb      	ldr	r3, [r7, #24]
 8008b58:	015a      	lsls	r2, r3, #5
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	4413      	add	r3, r2
 8008b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b6c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b74:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008b7c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008b7e:	69bb      	ldr	r3, [r7, #24]
 8008b80:	015a      	lsls	r2, r3, #5
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	4413      	add	r3, r2
 8008b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008b90:	69bb      	ldr	r3, [r7, #24]
 8008b92:	3301      	adds	r3, #1
 8008b94:	61bb      	str	r3, [r7, #24]
 8008b96:	69bb      	ldr	r3, [r7, #24]
 8008b98:	2b0f      	cmp	r3, #15
 8008b9a:	d9dc      	bls.n	8008b56 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	61bb      	str	r3, [r7, #24]
 8008ba0:	e034      	b.n	8008c0c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008ba2:	69bb      	ldr	r3, [r7, #24]
 8008ba4:	015a      	lsls	r2, r3, #5
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	4413      	add	r3, r2
 8008baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008bb8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008bc0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008bc8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008bca:	69bb      	ldr	r3, [r7, #24]
 8008bcc:	015a      	lsls	r2, r3, #5
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	4413      	add	r3, r2
 8008bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	3301      	adds	r3, #1
 8008be0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008be8:	d80c      	bhi.n	8008c04 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008bea:	69bb      	ldr	r3, [r7, #24]
 8008bec:	015a      	lsls	r2, r3, #5
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	4413      	add	r3, r2
 8008bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008bfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c00:	d0ec      	beq.n	8008bdc <USB_StopHost+0xc8>
 8008c02:	e000      	b.n	8008c06 <USB_StopHost+0xf2>
        break;
 8008c04:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008c06:	69bb      	ldr	r3, [r7, #24]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	61bb      	str	r3, [r7, #24]
 8008c0c:	69bb      	ldr	r3, [r7, #24]
 8008c0e:	2b0f      	cmp	r3, #15
 8008c10:	d9c7      	bls.n	8008ba2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c18:	461a      	mov	r2, r3
 8008c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c1e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f04f 32ff 	mov.w	r2, #4294967295
 8008c26:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f7ff f880 	bl	8007d2e <USB_EnableGlobalInt>

  return ret;
 8008c2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3720      	adds	r7, #32
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008c38:	b590      	push	{r4, r7, lr}
 8008c3a:	b089      	sub	sp, #36	; 0x24
 8008c3c:	af04      	add	r7, sp, #16
 8008c3e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008c40:	2301      	movs	r3, #1
 8008c42:	2202      	movs	r2, #2
 8008c44:	2102      	movs	r1, #2
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 fc66 	bl	8009518 <USBH_FindInterface>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008c50:	7bfb      	ldrb	r3, [r7, #15]
 8008c52:	2bff      	cmp	r3, #255	; 0xff
 8008c54:	d002      	beq.n	8008c5c <USBH_CDC_InterfaceInit+0x24>
 8008c56:	7bfb      	ldrb	r3, [r7, #15]
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d901      	bls.n	8008c60 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008c5c:	2302      	movs	r3, #2
 8008c5e:	e13d      	b.n	8008edc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008c60:	7bfb      	ldrb	r3, [r7, #15]
 8008c62:	4619      	mov	r1, r3
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 fc3b 	bl	80094e0 <USBH_SelectInterface>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008c6e:	7bbb      	ldrb	r3, [r7, #14]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d001      	beq.n	8008c78 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008c74:	2302      	movs	r3, #2
 8008c76:	e131      	b.n	8008edc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008c7e:	2050      	movs	r0, #80	; 0x50
 8008c80:	f002 fad2 	bl	800b228 <malloc>
 8008c84:	4603      	mov	r3, r0
 8008c86:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c8e:	69db      	ldr	r3, [r3, #28]
 8008c90:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d101      	bne.n	8008c9c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008c98:	2302      	movs	r3, #2
 8008c9a:	e11f      	b.n	8008edc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008c9c:	2250      	movs	r2, #80	; 0x50
 8008c9e:	2100      	movs	r1, #0
 8008ca0:	68b8      	ldr	r0, [r7, #8]
 8008ca2:	f002 fb7d 	bl	800b3a0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008ca6:	7bfb      	ldrb	r3, [r7, #15]
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	211a      	movs	r1, #26
 8008cac:	fb01 f303 	mul.w	r3, r1, r3
 8008cb0:	4413      	add	r3, r2
 8008cb2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	b25b      	sxtb	r3, r3
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	da15      	bge.n	8008cea <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008cbe:	7bfb      	ldrb	r3, [r7, #15]
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	211a      	movs	r1, #26
 8008cc4:	fb01 f303 	mul.w	r3, r1, r3
 8008cc8:	4413      	add	r3, r2
 8008cca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008cce:	781a      	ldrb	r2, [r3, #0]
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008cd4:	7bfb      	ldrb	r3, [r7, #15]
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	211a      	movs	r1, #26
 8008cda:	fb01 f303 	mul.w	r3, r1, r3
 8008cde:	4413      	add	r3, r2
 8008ce0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008ce4:	881a      	ldrh	r2, [r3, #0]
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	785b      	ldrb	r3, [r3, #1]
 8008cee:	4619      	mov	r1, r3
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f001 ff2e 	bl	800ab52 <USBH_AllocPipe>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	7819      	ldrb	r1, [r3, #0]
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	7858      	ldrb	r0, [r3, #1]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008d12:	68ba      	ldr	r2, [r7, #8]
 8008d14:	8952      	ldrh	r2, [r2, #10]
 8008d16:	9202      	str	r2, [sp, #8]
 8008d18:	2203      	movs	r2, #3
 8008d1a:	9201      	str	r2, [sp, #4]
 8008d1c:	9300      	str	r3, [sp, #0]
 8008d1e:	4623      	mov	r3, r4
 8008d20:	4602      	mov	r2, r0
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f001 fee6 	bl	800aaf4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	4619      	mov	r1, r3
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f002 f9f5 	bl	800b120 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008d36:	2300      	movs	r3, #0
 8008d38:	2200      	movs	r2, #0
 8008d3a:	210a      	movs	r1, #10
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 fbeb 	bl	8009518 <USBH_FindInterface>
 8008d42:	4603      	mov	r3, r0
 8008d44:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008d46:	7bfb      	ldrb	r3, [r7, #15]
 8008d48:	2bff      	cmp	r3, #255	; 0xff
 8008d4a:	d002      	beq.n	8008d52 <USBH_CDC_InterfaceInit+0x11a>
 8008d4c:	7bfb      	ldrb	r3, [r7, #15]
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d901      	bls.n	8008d56 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008d52:	2302      	movs	r3, #2
 8008d54:	e0c2      	b.n	8008edc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008d56:	7bfb      	ldrb	r3, [r7, #15]
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	211a      	movs	r1, #26
 8008d5c:	fb01 f303 	mul.w	r3, r1, r3
 8008d60:	4413      	add	r3, r2
 8008d62:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	b25b      	sxtb	r3, r3
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	da16      	bge.n	8008d9c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008d6e:	7bfb      	ldrb	r3, [r7, #15]
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	211a      	movs	r1, #26
 8008d74:	fb01 f303 	mul.w	r3, r1, r3
 8008d78:	4413      	add	r3, r2
 8008d7a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008d7e:	781a      	ldrb	r2, [r3, #0]
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008d84:	7bfb      	ldrb	r3, [r7, #15]
 8008d86:	687a      	ldr	r2, [r7, #4]
 8008d88:	211a      	movs	r1, #26
 8008d8a:	fb01 f303 	mul.w	r3, r1, r3
 8008d8e:	4413      	add	r3, r2
 8008d90:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008d94:	881a      	ldrh	r2, [r3, #0]
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	835a      	strh	r2, [r3, #26]
 8008d9a:	e015      	b.n	8008dc8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008d9c:	7bfb      	ldrb	r3, [r7, #15]
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	211a      	movs	r1, #26
 8008da2:	fb01 f303 	mul.w	r3, r1, r3
 8008da6:	4413      	add	r3, r2
 8008da8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008dac:	781a      	ldrb	r2, [r3, #0]
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008db2:	7bfb      	ldrb	r3, [r7, #15]
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	211a      	movs	r1, #26
 8008db8:	fb01 f303 	mul.w	r3, r1, r3
 8008dbc:	4413      	add	r3, r2
 8008dbe:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008dc2:	881a      	ldrh	r2, [r3, #0]
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008dc8:	7bfb      	ldrb	r3, [r7, #15]
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	211a      	movs	r1, #26
 8008dce:	fb01 f303 	mul.w	r3, r1, r3
 8008dd2:	4413      	add	r3, r2
 8008dd4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	b25b      	sxtb	r3, r3
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	da16      	bge.n	8008e0e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008de0:	7bfb      	ldrb	r3, [r7, #15]
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	211a      	movs	r1, #26
 8008de6:	fb01 f303 	mul.w	r3, r1, r3
 8008dea:	4413      	add	r3, r2
 8008dec:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008df0:	781a      	ldrb	r2, [r3, #0]
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008df6:	7bfb      	ldrb	r3, [r7, #15]
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	211a      	movs	r1, #26
 8008dfc:	fb01 f303 	mul.w	r3, r1, r3
 8008e00:	4413      	add	r3, r2
 8008e02:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008e06:	881a      	ldrh	r2, [r3, #0]
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	835a      	strh	r2, [r3, #26]
 8008e0c:	e015      	b.n	8008e3a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008e0e:	7bfb      	ldrb	r3, [r7, #15]
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	211a      	movs	r1, #26
 8008e14:	fb01 f303 	mul.w	r3, r1, r3
 8008e18:	4413      	add	r3, r2
 8008e1a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008e1e:	781a      	ldrb	r2, [r3, #0]
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008e24:	7bfb      	ldrb	r3, [r7, #15]
 8008e26:	687a      	ldr	r2, [r7, #4]
 8008e28:	211a      	movs	r1, #26
 8008e2a:	fb01 f303 	mul.w	r3, r1, r3
 8008e2e:	4413      	add	r3, r2
 8008e30:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008e34:	881a      	ldrh	r2, [r3, #0]
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	7b9b      	ldrb	r3, [r3, #14]
 8008e3e:	4619      	mov	r1, r3
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f001 fe86 	bl	800ab52 <USBH_AllocPipe>
 8008e46:	4603      	mov	r3, r0
 8008e48:	461a      	mov	r2, r3
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	7bdb      	ldrb	r3, [r3, #15]
 8008e52:	4619      	mov	r1, r3
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f001 fe7c 	bl	800ab52 <USBH_AllocPipe>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	7b59      	ldrb	r1, [r3, #13]
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	7b98      	ldrb	r0, [r3, #14]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008e76:	68ba      	ldr	r2, [r7, #8]
 8008e78:	8b12      	ldrh	r2, [r2, #24]
 8008e7a:	9202      	str	r2, [sp, #8]
 8008e7c:	2202      	movs	r2, #2
 8008e7e:	9201      	str	r2, [sp, #4]
 8008e80:	9300      	str	r3, [sp, #0]
 8008e82:	4623      	mov	r3, r4
 8008e84:	4602      	mov	r2, r0
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f001 fe34 	bl	800aaf4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	7b19      	ldrb	r1, [r3, #12]
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	7bd8      	ldrb	r0, [r3, #15]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008ea0:	68ba      	ldr	r2, [r7, #8]
 8008ea2:	8b52      	ldrh	r2, [r2, #26]
 8008ea4:	9202      	str	r2, [sp, #8]
 8008ea6:	2202      	movs	r2, #2
 8008ea8:	9201      	str	r2, [sp, #4]
 8008eaa:	9300      	str	r3, [sp, #0]
 8008eac:	4623      	mov	r3, r4
 8008eae:	4602      	mov	r2, r0
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f001 fe1f 	bl	800aaf4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	7b5b      	ldrb	r3, [r3, #13]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f002 f92a 	bl	800b120 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	7b1b      	ldrb	r3, [r3, #12]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f002 f923 	bl	800b120 <USBH_LL_SetToggle>

  return USBH_OK;
 8008eda:	2300      	movs	r3, #0
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3714      	adds	r7, #20
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd90      	pop	{r4, r7, pc}

08008ee4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ef2:	69db      	ldr	r3, [r3, #28]
 8008ef4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d00e      	beq.n	8008f1c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	4619      	mov	r1, r3
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f001 fe14 	bl	800ab32 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	4619      	mov	r1, r3
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f001 fe3f 	bl	800ab94 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	7b1b      	ldrb	r3, [r3, #12]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d00e      	beq.n	8008f42 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	7b1b      	ldrb	r3, [r3, #12]
 8008f28:	4619      	mov	r1, r3
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f001 fe01 	bl	800ab32 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	7b1b      	ldrb	r3, [r3, #12]
 8008f34:	4619      	mov	r1, r3
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f001 fe2c 	bl	800ab94 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	7b5b      	ldrb	r3, [r3, #13]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00e      	beq.n	8008f68 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	7b5b      	ldrb	r3, [r3, #13]
 8008f4e:	4619      	mov	r1, r3
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f001 fdee 	bl	800ab32 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	7b5b      	ldrb	r3, [r3, #13]
 8008f5a:	4619      	mov	r1, r3
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f001 fe19 	bl	800ab94 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2200      	movs	r2, #0
 8008f66:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f6e:	69db      	ldr	r3, [r3, #28]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d00b      	beq.n	8008f8c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f7a:	69db      	ldr	r3, [r3, #28]
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f002 f95b 	bl	800b238 <free>
    phost->pActiveClass->pData = 0U;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f88:	2200      	movs	r2, #0
 8008f8a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008f8c:	2300      	movs	r3, #0
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3710      	adds	r7, #16
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}

08008f96 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008f96:	b580      	push	{r7, lr}
 8008f98:	b084      	sub	sp, #16
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fa4:	69db      	ldr	r3, [r3, #28]
 8008fa6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	3340      	adds	r3, #64	; 0x40
 8008fac:	4619      	mov	r1, r3
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 f8b1 	bl	8009116 <GetLineCoding>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008fb8:	7afb      	ldrb	r3, [r7, #11]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d105      	bne.n	8008fca <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008fc4:	2102      	movs	r1, #2
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008fca:	7afb      	ldrb	r3, [r7, #11]
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3710      	adds	r7, #16
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b084      	sub	sp, #16
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fea:	69db      	ldr	r3, [r3, #28]
 8008fec:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008ff4:	2b04      	cmp	r3, #4
 8008ff6:	d877      	bhi.n	80090e8 <USBH_CDC_Process+0x114>
 8008ff8:	a201      	add	r2, pc, #4	; (adr r2, 8009000 <USBH_CDC_Process+0x2c>)
 8008ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ffe:	bf00      	nop
 8009000:	08009015 	.word	0x08009015
 8009004:	0800901b 	.word	0x0800901b
 8009008:	0800904b 	.word	0x0800904b
 800900c:	080090bf 	.word	0x080090bf
 8009010:	080090cd 	.word	0x080090cd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009014:	2300      	movs	r3, #0
 8009016:	73fb      	strb	r3, [r7, #15]
      break;
 8009018:	e06d      	b.n	80090f6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800901e:	4619      	mov	r1, r3
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f000 f897 	bl	8009154 <SetLineCoding>
 8009026:	4603      	mov	r3, r0
 8009028:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800902a:	7bbb      	ldrb	r3, [r7, #14]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d104      	bne.n	800903a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	2202      	movs	r2, #2
 8009034:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009038:	e058      	b.n	80090ec <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800903a:	7bbb      	ldrb	r3, [r7, #14]
 800903c:	2b01      	cmp	r3, #1
 800903e:	d055      	beq.n	80090ec <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	2204      	movs	r2, #4
 8009044:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009048:	e050      	b.n	80090ec <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	3340      	adds	r3, #64	; 0x40
 800904e:	4619      	mov	r1, r3
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f000 f860 	bl	8009116 <GetLineCoding>
 8009056:	4603      	mov	r3, r0
 8009058:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800905a:	7bbb      	ldrb	r3, [r7, #14]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d126      	bne.n	80090ae <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	2200      	movs	r2, #0
 8009064:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009072:	791b      	ldrb	r3, [r3, #4]
 8009074:	429a      	cmp	r2, r3
 8009076:	d13b      	bne.n	80090f0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009082:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009084:	429a      	cmp	r2, r3
 8009086:	d133      	bne.n	80090f0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009092:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009094:	429a      	cmp	r2, r3
 8009096:	d12b      	bne.n	80090f0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090a0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d124      	bne.n	80090f0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 f958 	bl	800935c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80090ac:	e020      	b.n	80090f0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80090ae:	7bbb      	ldrb	r3, [r7, #14]
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d01d      	beq.n	80090f0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	2204      	movs	r2, #4
 80090b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80090bc:	e018      	b.n	80090f0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 f867 	bl	8009192 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f000 f8da 	bl	800927e <CDC_ProcessReception>
      break;
 80090ca:	e014      	b.n	80090f6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80090cc:	2100      	movs	r1, #0
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 ffef 	bl	800a0b2 <USBH_ClrFeature>
 80090d4:	4603      	mov	r3, r0
 80090d6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80090d8:	7bbb      	ldrb	r3, [r7, #14]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d10a      	bne.n	80090f4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	2200      	movs	r2, #0
 80090e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80090e6:	e005      	b.n	80090f4 <USBH_CDC_Process+0x120>

    default:
      break;
 80090e8:	bf00      	nop
 80090ea:	e004      	b.n	80090f6 <USBH_CDC_Process+0x122>
      break;
 80090ec:	bf00      	nop
 80090ee:	e002      	b.n	80090f6 <USBH_CDC_Process+0x122>
      break;
 80090f0:	bf00      	nop
 80090f2:	e000      	b.n	80090f6 <USBH_CDC_Process+0x122>
      break;
 80090f4:	bf00      	nop

  }

  return status;
 80090f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3710      	adds	r7, #16
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009100:	b480      	push	{r7}
 8009102:	b083      	sub	sp, #12
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009108:	2300      	movs	r3, #0
}
 800910a:	4618      	mov	r0, r3
 800910c:	370c      	adds	r7, #12
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr

08009116 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009116:	b580      	push	{r7, lr}
 8009118:	b082      	sub	sp, #8
 800911a:	af00      	add	r7, sp, #0
 800911c:	6078      	str	r0, [r7, #4]
 800911e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	22a1      	movs	r2, #161	; 0xa1
 8009124:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2221      	movs	r2, #33	; 0x21
 800912a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2200      	movs	r2, #0
 8009136:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2207      	movs	r2, #7
 800913c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	2207      	movs	r2, #7
 8009142:	4619      	mov	r1, r3
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f001 fa83 	bl	800a650 <USBH_CtlReq>
 800914a:	4603      	mov	r3, r0
}
 800914c:	4618      	mov	r0, r3
 800914e:	3708      	adds	r7, #8
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b082      	sub	sp, #8
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2221      	movs	r2, #33	; 0x21
 8009162:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2220      	movs	r2, #32
 8009168:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2200      	movs	r2, #0
 800916e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2200      	movs	r2, #0
 8009174:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2207      	movs	r2, #7
 800917a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	2207      	movs	r2, #7
 8009180:	4619      	mov	r1, r3
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f001 fa64 	bl	800a650 <USBH_CtlReq>
 8009188:	4603      	mov	r3, r0
}
 800918a:	4618      	mov	r0, r3
 800918c:	3708      	adds	r7, #8
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}

08009192 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009192:	b580      	push	{r7, lr}
 8009194:	b086      	sub	sp, #24
 8009196:	af02      	add	r7, sp, #8
 8009198:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80091a0:	69db      	ldr	r3, [r3, #28]
 80091a2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80091a4:	2300      	movs	r3, #0
 80091a6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d002      	beq.n	80091b8 <CDC_ProcessTransmission+0x26>
 80091b2:	2b02      	cmp	r3, #2
 80091b4:	d023      	beq.n	80091fe <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80091b6:	e05e      	b.n	8009276 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091bc:	68fa      	ldr	r2, [r7, #12]
 80091be:	8b12      	ldrh	r2, [r2, #24]
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d90b      	bls.n	80091dc <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	69d9      	ldr	r1, [r3, #28]
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	8b1a      	ldrh	r2, [r3, #24]
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	7b5b      	ldrb	r3, [r3, #13]
 80091d0:	2001      	movs	r0, #1
 80091d2:	9000      	str	r0, [sp, #0]
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f001 fc4a 	bl	800aa6e <USBH_BulkSendData>
 80091da:	e00b      	b.n	80091f4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80091e4:	b29a      	uxth	r2, r3
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	7b5b      	ldrb	r3, [r3, #13]
 80091ea:	2001      	movs	r0, #1
 80091ec:	9000      	str	r0, [sp, #0]
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f001 fc3d 	bl	800aa6e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2202      	movs	r2, #2
 80091f8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80091fc:	e03b      	b.n	8009276 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	7b5b      	ldrb	r3, [r3, #13]
 8009202:	4619      	mov	r1, r3
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f001 ff61 	bl	800b0cc <USBH_LL_GetURBState>
 800920a:	4603      	mov	r3, r0
 800920c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800920e:	7afb      	ldrb	r3, [r7, #11]
 8009210:	2b01      	cmp	r3, #1
 8009212:	d128      	bne.n	8009266 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009218:	68fa      	ldr	r2, [r7, #12]
 800921a:	8b12      	ldrh	r2, [r2, #24]
 800921c:	4293      	cmp	r3, r2
 800921e:	d90e      	bls.n	800923e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009224:	68fa      	ldr	r2, [r7, #12]
 8009226:	8b12      	ldrh	r2, [r2, #24]
 8009228:	1a9a      	subs	r2, r3, r2
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	69db      	ldr	r3, [r3, #28]
 8009232:	68fa      	ldr	r2, [r7, #12]
 8009234:	8b12      	ldrh	r2, [r2, #24]
 8009236:	441a      	add	r2, r3
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	61da      	str	r2, [r3, #28]
 800923c:	e002      	b.n	8009244 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2200      	movs	r2, #0
 8009242:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009248:	2b00      	cmp	r3, #0
 800924a:	d004      	beq.n	8009256 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2201      	movs	r2, #1
 8009250:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009254:	e00e      	b.n	8009274 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2200      	movs	r2, #0
 800925a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f000 f868 	bl	8009334 <USBH_CDC_TransmitCallback>
      break;
 8009264:	e006      	b.n	8009274 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8009266:	7afb      	ldrb	r3, [r7, #11]
 8009268:	2b02      	cmp	r3, #2
 800926a:	d103      	bne.n	8009274 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2201      	movs	r2, #1
 8009270:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009274:	bf00      	nop
  }
}
 8009276:	bf00      	nop
 8009278:	3710      	adds	r7, #16
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}

0800927e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b086      	sub	sp, #24
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800928c:	69db      	ldr	r3, [r3, #28]
 800928e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009290:	2300      	movs	r3, #0
 8009292:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800929a:	2b03      	cmp	r3, #3
 800929c:	d002      	beq.n	80092a4 <CDC_ProcessReception+0x26>
 800929e:	2b04      	cmp	r3, #4
 80092a0:	d00e      	beq.n	80092c0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80092a2:	e043      	b.n	800932c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	6a19      	ldr	r1, [r3, #32]
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	8b5a      	ldrh	r2, [r3, #26]
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	7b1b      	ldrb	r3, [r3, #12]
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f001 fc01 	bl	800aab8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	2204      	movs	r2, #4
 80092ba:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80092be:	e035      	b.n	800932c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	7b1b      	ldrb	r3, [r3, #12]
 80092c4:	4619      	mov	r1, r3
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f001 ff00 	bl	800b0cc <USBH_LL_GetURBState>
 80092cc:	4603      	mov	r3, r0
 80092ce:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80092d0:	7cfb      	ldrb	r3, [r7, #19]
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d129      	bne.n	800932a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	7b1b      	ldrb	r3, [r3, #12]
 80092da:	4619      	mov	r1, r3
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f001 fe63 	bl	800afa8 <USBH_LL_GetLastXferSize>
 80092e2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092e8:	68fa      	ldr	r2, [r7, #12]
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d016      	beq.n	800931c <CDC_ProcessReception+0x9e>
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	8b5b      	ldrh	r3, [r3, #26]
 80092f2:	461a      	mov	r2, r3
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d910      	bls.n	800931c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	1ad2      	subs	r2, r2, r3
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	6a1a      	ldr	r2, [r3, #32]
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	441a      	add	r2, r3
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	2203      	movs	r2, #3
 8009316:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800931a:	e006      	b.n	800932a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	2200      	movs	r2, #0
 8009320:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 f80f 	bl	8009348 <USBH_CDC_ReceiveCallback>
      break;
 800932a:	bf00      	nop
  }
}
 800932c:	bf00      	nop
 800932e:	3718      	adds	r7, #24
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009334:	b480      	push	{r7}
 8009336:	b083      	sub	sp, #12
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800933c:	bf00      	nop
 800933e:	370c      	adds	r7, #12
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr

08009348 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009348:	b480      	push	{r7}
 800934a:	b083      	sub	sp, #12
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009350:	bf00      	nop
 8009352:	370c      	adds	r7, #12
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr

0800935c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800935c:	b480      	push	{r7}
 800935e:	b083      	sub	sp, #12
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009364:	bf00      	nop
 8009366:	370c      	adds	r7, #12
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr

08009370 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b084      	sub	sp, #16
 8009374:	af00      	add	r7, sp, #0
 8009376:	60f8      	str	r0, [r7, #12]
 8009378:	60b9      	str	r1, [r7, #8]
 800937a:	4613      	mov	r3, r2
 800937c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d101      	bne.n	8009388 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009384:	2302      	movs	r3, #2
 8009386:	e029      	b.n	80093dc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	79fa      	ldrb	r2, [r7, #7]
 800938c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2200      	movs	r2, #0
 8009394:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2200      	movs	r2, #0
 800939c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80093a0:	68f8      	ldr	r0, [r7, #12]
 80093a2:	f000 f81f 	bl	80093e4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2200      	movs	r2, #0
 80093aa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2200      	movs	r2, #0
 80093b2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2200      	movs	r2, #0
 80093ba:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2200      	movs	r2, #0
 80093c2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d003      	beq.n	80093d4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	68ba      	ldr	r2, [r7, #8]
 80093d0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80093d4:	68f8      	ldr	r0, [r7, #12]
 80093d6:	f001 fd33 	bl	800ae40 <USBH_LL_Init>

  return USBH_OK;
 80093da:	2300      	movs	r3, #0
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3710      	adds	r7, #16
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}

080093e4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b085      	sub	sp, #20
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80093ec:	2300      	movs	r3, #0
 80093ee:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80093f0:	2300      	movs	r3, #0
 80093f2:	60fb      	str	r3, [r7, #12]
 80093f4:	e009      	b.n	800940a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80093f6:	687a      	ldr	r2, [r7, #4]
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	33e0      	adds	r3, #224	; 0xe0
 80093fc:	009b      	lsls	r3, r3, #2
 80093fe:	4413      	add	r3, r2
 8009400:	2200      	movs	r2, #0
 8009402:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	3301      	adds	r3, #1
 8009408:	60fb      	str	r3, [r7, #12]
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2b0f      	cmp	r3, #15
 800940e:	d9f2      	bls.n	80093f6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009410:	2300      	movs	r3, #0
 8009412:	60fb      	str	r3, [r7, #12]
 8009414:	e009      	b.n	800942a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	4413      	add	r3, r2
 800941c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009420:	2200      	movs	r2, #0
 8009422:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	3301      	adds	r3, #1
 8009428:	60fb      	str	r3, [r7, #12]
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009430:	d3f1      	bcc.n	8009416 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2200      	movs	r2, #0
 8009436:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2200      	movs	r2, #0
 800943c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2201      	movs	r2, #1
 8009442:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2200      	movs	r2, #0
 8009448:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2201      	movs	r2, #1
 8009450:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2240      	movs	r2, #64	; 0x40
 8009456:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2200      	movs	r2, #0
 800945c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2200      	movs	r2, #0
 8009462:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2201      	movs	r2, #1
 800946a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2200      	movs	r2, #0
 8009472:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2200      	movs	r2, #0
 800947a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800947e:	2300      	movs	r3, #0
}
 8009480:	4618      	mov	r0, r3
 8009482:	3714      	adds	r7, #20
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr

0800948c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800948c:	b480      	push	{r7}
 800948e:	b085      	sub	sp, #20
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009496:	2300      	movs	r3, #0
 8009498:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d016      	beq.n	80094ce <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d10e      	bne.n	80094c8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80094b0:	1c59      	adds	r1, r3, #1
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80094b8:	687a      	ldr	r2, [r7, #4]
 80094ba:	33de      	adds	r3, #222	; 0xde
 80094bc:	6839      	ldr	r1, [r7, #0]
 80094be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80094c2:	2300      	movs	r3, #0
 80094c4:	73fb      	strb	r3, [r7, #15]
 80094c6:	e004      	b.n	80094d2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80094c8:	2302      	movs	r3, #2
 80094ca:	73fb      	strb	r3, [r7, #15]
 80094cc:	e001      	b.n	80094d2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80094ce:	2302      	movs	r3, #2
 80094d0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80094d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3714      	adds	r7, #20
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b085      	sub	sp, #20
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	460b      	mov	r3, r1
 80094ea:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80094ec:	2300      	movs	r3, #0
 80094ee:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80094f6:	78fa      	ldrb	r2, [r7, #3]
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d204      	bcs.n	8009506 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	78fa      	ldrb	r2, [r7, #3]
 8009500:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009504:	e001      	b.n	800950a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009506:	2302      	movs	r3, #2
 8009508:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800950a:	7bfb      	ldrb	r3, [r7, #15]
}
 800950c:	4618      	mov	r0, r3
 800950e:	3714      	adds	r7, #20
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr

08009518 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009518:	b480      	push	{r7}
 800951a:	b087      	sub	sp, #28
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	4608      	mov	r0, r1
 8009522:	4611      	mov	r1, r2
 8009524:	461a      	mov	r2, r3
 8009526:	4603      	mov	r3, r0
 8009528:	70fb      	strb	r3, [r7, #3]
 800952a:	460b      	mov	r3, r1
 800952c:	70bb      	strb	r3, [r7, #2]
 800952e:	4613      	mov	r3, r2
 8009530:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009532:	2300      	movs	r3, #0
 8009534:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009536:	2300      	movs	r3, #0
 8009538:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009540:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009542:	e025      	b.n	8009590 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009544:	7dfb      	ldrb	r3, [r7, #23]
 8009546:	221a      	movs	r2, #26
 8009548:	fb02 f303 	mul.w	r3, r2, r3
 800954c:	3308      	adds	r3, #8
 800954e:	68fa      	ldr	r2, [r7, #12]
 8009550:	4413      	add	r3, r2
 8009552:	3302      	adds	r3, #2
 8009554:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	795b      	ldrb	r3, [r3, #5]
 800955a:	78fa      	ldrb	r2, [r7, #3]
 800955c:	429a      	cmp	r2, r3
 800955e:	d002      	beq.n	8009566 <USBH_FindInterface+0x4e>
 8009560:	78fb      	ldrb	r3, [r7, #3]
 8009562:	2bff      	cmp	r3, #255	; 0xff
 8009564:	d111      	bne.n	800958a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800956a:	78ba      	ldrb	r2, [r7, #2]
 800956c:	429a      	cmp	r2, r3
 800956e:	d002      	beq.n	8009576 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009570:	78bb      	ldrb	r3, [r7, #2]
 8009572:	2bff      	cmp	r3, #255	; 0xff
 8009574:	d109      	bne.n	800958a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800957a:	787a      	ldrb	r2, [r7, #1]
 800957c:	429a      	cmp	r2, r3
 800957e:	d002      	beq.n	8009586 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009580:	787b      	ldrb	r3, [r7, #1]
 8009582:	2bff      	cmp	r3, #255	; 0xff
 8009584:	d101      	bne.n	800958a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009586:	7dfb      	ldrb	r3, [r7, #23]
 8009588:	e006      	b.n	8009598 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800958a:	7dfb      	ldrb	r3, [r7, #23]
 800958c:	3301      	adds	r3, #1
 800958e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009590:	7dfb      	ldrb	r3, [r7, #23]
 8009592:	2b01      	cmp	r3, #1
 8009594:	d9d6      	bls.n	8009544 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009596:	23ff      	movs	r3, #255	; 0xff
}
 8009598:	4618      	mov	r0, r3
 800959a:	371c      	adds	r7, #28
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr

080095a4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b082      	sub	sp, #8
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f001 fc83 	bl	800aeb8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80095b2:	2101      	movs	r1, #1
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f001 fd9c 	bl	800b0f2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80095ba:	2300      	movs	r3, #0
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3708      	adds	r7, #8
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b088      	sub	sp, #32
 80095c8:	af04      	add	r7, sp, #16
 80095ca:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80095cc:	2302      	movs	r3, #2
 80095ce:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80095d0:	2300      	movs	r3, #0
 80095d2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d102      	bne.n	80095e6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2203      	movs	r2, #3
 80095e4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	781b      	ldrb	r3, [r3, #0]
 80095ea:	b2db      	uxtb	r3, r3
 80095ec:	2b0b      	cmp	r3, #11
 80095ee:	f200 81be 	bhi.w	800996e <USBH_Process+0x3aa>
 80095f2:	a201      	add	r2, pc, #4	; (adr r2, 80095f8 <USBH_Process+0x34>)
 80095f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095f8:	08009629 	.word	0x08009629
 80095fc:	0800965b 	.word	0x0800965b
 8009600:	080096c3 	.word	0x080096c3
 8009604:	08009909 	.word	0x08009909
 8009608:	0800996f 	.word	0x0800996f
 800960c:	08009767 	.word	0x08009767
 8009610:	080098af 	.word	0x080098af
 8009614:	0800979d 	.word	0x0800979d
 8009618:	080097bd 	.word	0x080097bd
 800961c:	080097dd 	.word	0x080097dd
 8009620:	08009821 	.word	0x08009821
 8009624:	080098f1 	.word	0x080098f1
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800962e:	b2db      	uxtb	r3, r3
 8009630:	2b00      	cmp	r3, #0
 8009632:	f000 819e 	beq.w	8009972 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2201      	movs	r2, #1
 800963a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800963c:	20c8      	movs	r0, #200	; 0xc8
 800963e:	f001 fd9f 	bl	800b180 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f001 fc95 	bl	800af72 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2200      	movs	r2, #0
 800964c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009658:	e18b      	b.n	8009972 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009660:	2b01      	cmp	r3, #1
 8009662:	d107      	bne.n	8009674 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2200      	movs	r2, #0
 8009668:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2202      	movs	r2, #2
 8009670:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009672:	e18d      	b.n	8009990 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800967a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800967e:	d914      	bls.n	80096aa <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009686:	3301      	adds	r3, #1
 8009688:	b2da      	uxtb	r2, r3
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009696:	2b03      	cmp	r3, #3
 8009698:	d903      	bls.n	80096a2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	220d      	movs	r2, #13
 800969e:	701a      	strb	r2, [r3, #0]
      break;
 80096a0:	e176      	b.n	8009990 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2200      	movs	r2, #0
 80096a6:	701a      	strb	r2, [r3, #0]
      break;
 80096a8:	e172      	b.n	8009990 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80096b0:	f103 020a 	add.w	r2, r3, #10
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80096ba:	200a      	movs	r0, #10
 80096bc:	f001 fd60 	bl	800b180 <USBH_Delay>
      break;
 80096c0:	e166      	b.n	8009990 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d005      	beq.n	80096d8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80096d2:	2104      	movs	r1, #4
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80096d8:	2064      	movs	r0, #100	; 0x64
 80096da:	f001 fd51 	bl	800b180 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f001 fc20 	bl	800af24 <USBH_LL_GetSpeed>
 80096e4:	4603      	mov	r3, r0
 80096e6:	461a      	mov	r2, r3
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2205      	movs	r2, #5
 80096f2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80096f4:	2100      	movs	r1, #0
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f001 fa2b 	bl	800ab52 <USBH_AllocPipe>
 80096fc:	4603      	mov	r3, r0
 80096fe:	461a      	mov	r2, r3
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009704:	2180      	movs	r1, #128	; 0x80
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f001 fa23 	bl	800ab52 <USBH_AllocPipe>
 800970c:	4603      	mov	r3, r0
 800970e:	461a      	mov	r2, r3
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	7919      	ldrb	r1, [r3, #4]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009724:	687a      	ldr	r2, [r7, #4]
 8009726:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009728:	b292      	uxth	r2, r2
 800972a:	9202      	str	r2, [sp, #8]
 800972c:	2200      	movs	r2, #0
 800972e:	9201      	str	r2, [sp, #4]
 8009730:	9300      	str	r3, [sp, #0]
 8009732:	4603      	mov	r3, r0
 8009734:	2280      	movs	r2, #128	; 0x80
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f001 f9dc 	bl	800aaf4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	7959      	ldrb	r1, [r3, #5]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800974c:	687a      	ldr	r2, [r7, #4]
 800974e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009750:	b292      	uxth	r2, r2
 8009752:	9202      	str	r2, [sp, #8]
 8009754:	2200      	movs	r2, #0
 8009756:	9201      	str	r2, [sp, #4]
 8009758:	9300      	str	r3, [sp, #0]
 800975a:	4603      	mov	r3, r0
 800975c:	2200      	movs	r2, #0
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f001 f9c8 	bl	800aaf4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009764:	e114      	b.n	8009990 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 f918 	bl	800999c <USBH_HandleEnum>
 800976c:	4603      	mov	r3, r0
 800976e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009770:	7bbb      	ldrb	r3, [r7, #14]
 8009772:	b2db      	uxtb	r3, r3
 8009774:	2b00      	cmp	r3, #0
 8009776:	f040 80fe 	bne.w	8009976 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2200      	movs	r2, #0
 800977e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009788:	2b01      	cmp	r3, #1
 800978a:	d103      	bne.n	8009794 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2208      	movs	r2, #8
 8009790:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009792:	e0f0      	b.n	8009976 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2207      	movs	r2, #7
 8009798:	701a      	strb	r2, [r3, #0]
      break;
 800979a:	e0ec      	b.n	8009976 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	f000 80e9 	beq.w	800997a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80097ae:	2101      	movs	r1, #1
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2208      	movs	r2, #8
 80097b8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80097ba:	e0de      	b.n	800997a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80097c2:	b29b      	uxth	r3, r3
 80097c4:	4619      	mov	r1, r3
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f000 fc2c 	bl	800a024 <USBH_SetCfg>
 80097cc:	4603      	mov	r3, r0
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	f040 80d5 	bne.w	800997e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2209      	movs	r2, #9
 80097d8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80097da:	e0d0      	b.n	800997e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80097e2:	f003 0320 	and.w	r3, r3, #32
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d016      	beq.n	8009818 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80097ea:	2101      	movs	r1, #1
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f000 fc3c 	bl	800a06a <USBH_SetFeature>
 80097f2:	4603      	mov	r3, r0
 80097f4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80097f6:	7bbb      	ldrb	r3, [r7, #14]
 80097f8:	b2db      	uxtb	r3, r3
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d103      	bne.n	8009806 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	220a      	movs	r2, #10
 8009802:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009804:	e0bd      	b.n	8009982 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8009806:	7bbb      	ldrb	r3, [r7, #14]
 8009808:	b2db      	uxtb	r3, r3
 800980a:	2b03      	cmp	r3, #3
 800980c:	f040 80b9 	bne.w	8009982 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	220a      	movs	r2, #10
 8009814:	701a      	strb	r2, [r3, #0]
      break;
 8009816:	e0b4      	b.n	8009982 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	220a      	movs	r2, #10
 800981c:	701a      	strb	r2, [r3, #0]
      break;
 800981e:	e0b0      	b.n	8009982 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009826:	2b00      	cmp	r3, #0
 8009828:	f000 80ad 	beq.w	8009986 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2200      	movs	r2, #0
 8009830:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009834:	2300      	movs	r3, #0
 8009836:	73fb      	strb	r3, [r7, #15]
 8009838:	e016      	b.n	8009868 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800983a:	7bfa      	ldrb	r2, [r7, #15]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	32de      	adds	r2, #222	; 0xde
 8009840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009844:	791a      	ldrb	r2, [r3, #4]
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800984c:	429a      	cmp	r2, r3
 800984e:	d108      	bne.n	8009862 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009850:	7bfa      	ldrb	r2, [r7, #15]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	32de      	adds	r2, #222	; 0xde
 8009856:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009860:	e005      	b.n	800986e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009862:	7bfb      	ldrb	r3, [r7, #15]
 8009864:	3301      	adds	r3, #1
 8009866:	73fb      	strb	r3, [r7, #15]
 8009868:	7bfb      	ldrb	r3, [r7, #15]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d0e5      	beq.n	800983a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009874:	2b00      	cmp	r3, #0
 8009876:	d016      	beq.n	80098a6 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800987e:	689b      	ldr	r3, [r3, #8]
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	4798      	blx	r3
 8009884:	4603      	mov	r3, r0
 8009886:	2b00      	cmp	r3, #0
 8009888:	d109      	bne.n	800989e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2206      	movs	r2, #6
 800988e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009896:	2103      	movs	r1, #3
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800989c:	e073      	b.n	8009986 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	220d      	movs	r2, #13
 80098a2:	701a      	strb	r2, [r3, #0]
      break;
 80098a4:	e06f      	b.n	8009986 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	220d      	movs	r2, #13
 80098aa:	701a      	strb	r2, [r3, #0]
      break;
 80098ac:	e06b      	b.n	8009986 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d017      	beq.n	80098e8 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098be:	691b      	ldr	r3, [r3, #16]
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	4798      	blx	r3
 80098c4:	4603      	mov	r3, r0
 80098c6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80098c8:	7bbb      	ldrb	r3, [r7, #14]
 80098ca:	b2db      	uxtb	r3, r3
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d103      	bne.n	80098d8 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	220b      	movs	r2, #11
 80098d4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80098d6:	e058      	b.n	800998a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80098d8:	7bbb      	ldrb	r3, [r7, #14]
 80098da:	b2db      	uxtb	r3, r3
 80098dc:	2b02      	cmp	r3, #2
 80098de:	d154      	bne.n	800998a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	220d      	movs	r2, #13
 80098e4:	701a      	strb	r2, [r3, #0]
      break;
 80098e6:	e050      	b.n	800998a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	220d      	movs	r2, #13
 80098ec:	701a      	strb	r2, [r3, #0]
      break;
 80098ee:	e04c      	b.n	800998a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d049      	beq.n	800998e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009900:	695b      	ldr	r3, [r3, #20]
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	4798      	blx	r3
      }
      break;
 8009906:	e042      	b.n	800998e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2200      	movs	r2, #0
 800990c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f7ff fd67 	bl	80093e4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800991c:	2b00      	cmp	r3, #0
 800991e:	d009      	beq.n	8009934 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009926:	68db      	ldr	r3, [r3, #12]
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2200      	movs	r2, #0
 8009930:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800993a:	2b00      	cmp	r3, #0
 800993c:	d005      	beq.n	800994a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009944:	2105      	movs	r1, #5
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009950:	b2db      	uxtb	r3, r3
 8009952:	2b01      	cmp	r3, #1
 8009954:	d107      	bne.n	8009966 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2200      	movs	r2, #0
 800995a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f7ff fe20 	bl	80095a4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009964:	e014      	b.n	8009990 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f001 faa6 	bl	800aeb8 <USBH_LL_Start>
      break;
 800996c:	e010      	b.n	8009990 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800996e:	bf00      	nop
 8009970:	e00e      	b.n	8009990 <USBH_Process+0x3cc>
      break;
 8009972:	bf00      	nop
 8009974:	e00c      	b.n	8009990 <USBH_Process+0x3cc>
      break;
 8009976:	bf00      	nop
 8009978:	e00a      	b.n	8009990 <USBH_Process+0x3cc>
    break;
 800997a:	bf00      	nop
 800997c:	e008      	b.n	8009990 <USBH_Process+0x3cc>
      break;
 800997e:	bf00      	nop
 8009980:	e006      	b.n	8009990 <USBH_Process+0x3cc>
      break;
 8009982:	bf00      	nop
 8009984:	e004      	b.n	8009990 <USBH_Process+0x3cc>
      break;
 8009986:	bf00      	nop
 8009988:	e002      	b.n	8009990 <USBH_Process+0x3cc>
      break;
 800998a:	bf00      	nop
 800998c:	e000      	b.n	8009990 <USBH_Process+0x3cc>
      break;
 800998e:	bf00      	nop
  }
  return USBH_OK;
 8009990:	2300      	movs	r3, #0
}
 8009992:	4618      	mov	r0, r3
 8009994:	3710      	adds	r7, #16
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop

0800999c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b088      	sub	sp, #32
 80099a0:	af04      	add	r7, sp, #16
 80099a2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80099a4:	2301      	movs	r3, #1
 80099a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80099a8:	2301      	movs	r3, #1
 80099aa:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	785b      	ldrb	r3, [r3, #1]
 80099b0:	2b07      	cmp	r3, #7
 80099b2:	f200 81c1 	bhi.w	8009d38 <USBH_HandleEnum+0x39c>
 80099b6:	a201      	add	r2, pc, #4	; (adr r2, 80099bc <USBH_HandleEnum+0x20>)
 80099b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099bc:	080099dd 	.word	0x080099dd
 80099c0:	08009a9b 	.word	0x08009a9b
 80099c4:	08009b05 	.word	0x08009b05
 80099c8:	08009b93 	.word	0x08009b93
 80099cc:	08009bfd 	.word	0x08009bfd
 80099d0:	08009c6d 	.word	0x08009c6d
 80099d4:	08009cb3 	.word	0x08009cb3
 80099d8:	08009cf9 	.word	0x08009cf9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80099dc:	2108      	movs	r1, #8
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 fa50 	bl	8009e84 <USBH_Get_DevDesc>
 80099e4:	4603      	mov	r3, r0
 80099e6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80099e8:	7bbb      	ldrb	r3, [r7, #14]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d130      	bne.n	8009a50 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2201      	movs	r2, #1
 80099fc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	7919      	ldrb	r1, [r3, #4]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009a12:	b292      	uxth	r2, r2
 8009a14:	9202      	str	r2, [sp, #8]
 8009a16:	2200      	movs	r2, #0
 8009a18:	9201      	str	r2, [sp, #4]
 8009a1a:	9300      	str	r3, [sp, #0]
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	2280      	movs	r2, #128	; 0x80
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f001 f867 	bl	800aaf4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	7959      	ldrb	r1, [r3, #5]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009a3a:	b292      	uxth	r2, r2
 8009a3c:	9202      	str	r2, [sp, #8]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	9201      	str	r2, [sp, #4]
 8009a42:	9300      	str	r3, [sp, #0]
 8009a44:	4603      	mov	r3, r0
 8009a46:	2200      	movs	r2, #0
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f001 f853 	bl	800aaf4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009a4e:	e175      	b.n	8009d3c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a50:	7bbb      	ldrb	r3, [r7, #14]
 8009a52:	2b03      	cmp	r3, #3
 8009a54:	f040 8172 	bne.w	8009d3c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009a5e:	3301      	adds	r3, #1
 8009a60:	b2da      	uxtb	r2, r3
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009a6e:	2b03      	cmp	r3, #3
 8009a70:	d903      	bls.n	8009a7a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	220d      	movs	r2, #13
 8009a76:	701a      	strb	r2, [r3, #0]
      break;
 8009a78:	e160      	b.n	8009d3c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	795b      	ldrb	r3, [r3, #5]
 8009a7e:	4619      	mov	r1, r3
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f001 f887 	bl	800ab94 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	791b      	ldrb	r3, [r3, #4]
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f001 f881 	bl	800ab94 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2200      	movs	r2, #0
 8009a96:	701a      	strb	r2, [r3, #0]
      break;
 8009a98:	e150      	b.n	8009d3c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009a9a:	2112      	movs	r1, #18
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f000 f9f1 	bl	8009e84 <USBH_Get_DevDesc>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009aa6:	7bbb      	ldrb	r3, [r7, #14]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d103      	bne.n	8009ab4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2202      	movs	r2, #2
 8009ab0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009ab2:	e145      	b.n	8009d40 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009ab4:	7bbb      	ldrb	r3, [r7, #14]
 8009ab6:	2b03      	cmp	r3, #3
 8009ab8:	f040 8142 	bne.w	8009d40 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009ac2:	3301      	adds	r3, #1
 8009ac4:	b2da      	uxtb	r2, r3
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009ad2:	2b03      	cmp	r3, #3
 8009ad4:	d903      	bls.n	8009ade <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	220d      	movs	r2, #13
 8009ada:	701a      	strb	r2, [r3, #0]
      break;
 8009adc:	e130      	b.n	8009d40 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	795b      	ldrb	r3, [r3, #5]
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f001 f855 	bl	800ab94 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	791b      	ldrb	r3, [r3, #4]
 8009aee:	4619      	mov	r1, r3
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f001 f84f 	bl	800ab94 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2200      	movs	r2, #0
 8009afa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2200      	movs	r2, #0
 8009b00:	701a      	strb	r2, [r3, #0]
      break;
 8009b02:	e11d      	b.n	8009d40 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009b04:	2101      	movs	r1, #1
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f000 fa68 	bl	8009fdc <USBH_SetAddress>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009b10:	7bbb      	ldrb	r3, [r7, #14]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d132      	bne.n	8009b7c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009b16:	2002      	movs	r0, #2
 8009b18:	f001 fb32 	bl	800b180 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2203      	movs	r2, #3
 8009b28:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	7919      	ldrb	r1, [r3, #4]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009b3a:	687a      	ldr	r2, [r7, #4]
 8009b3c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009b3e:	b292      	uxth	r2, r2
 8009b40:	9202      	str	r2, [sp, #8]
 8009b42:	2200      	movs	r2, #0
 8009b44:	9201      	str	r2, [sp, #4]
 8009b46:	9300      	str	r3, [sp, #0]
 8009b48:	4603      	mov	r3, r0
 8009b4a:	2280      	movs	r2, #128	; 0x80
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f000 ffd1 	bl	800aaf4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	7959      	ldrb	r1, [r3, #5]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009b62:	687a      	ldr	r2, [r7, #4]
 8009b64:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009b66:	b292      	uxth	r2, r2
 8009b68:	9202      	str	r2, [sp, #8]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	9201      	str	r2, [sp, #4]
 8009b6e:	9300      	str	r3, [sp, #0]
 8009b70:	4603      	mov	r3, r0
 8009b72:	2200      	movs	r2, #0
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f000 ffbd 	bl	800aaf4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009b7a:	e0e3      	b.n	8009d44 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b7c:	7bbb      	ldrb	r3, [r7, #14]
 8009b7e:	2b03      	cmp	r3, #3
 8009b80:	f040 80e0 	bne.w	8009d44 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	220d      	movs	r2, #13
 8009b88:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	705a      	strb	r2, [r3, #1]
      break;
 8009b90:	e0d8      	b.n	8009d44 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009b92:	2109      	movs	r1, #9
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f000 f99d 	bl	8009ed4 <USBH_Get_CfgDesc>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009b9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d103      	bne.n	8009bac <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2204      	movs	r2, #4
 8009ba8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009baa:	e0cd      	b.n	8009d48 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009bac:	7bbb      	ldrb	r3, [r7, #14]
 8009bae:	2b03      	cmp	r3, #3
 8009bb0:	f040 80ca 	bne.w	8009d48 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009bba:	3301      	adds	r3, #1
 8009bbc:	b2da      	uxtb	r2, r3
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009bca:	2b03      	cmp	r3, #3
 8009bcc:	d903      	bls.n	8009bd6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	220d      	movs	r2, #13
 8009bd2:	701a      	strb	r2, [r3, #0]
      break;
 8009bd4:	e0b8      	b.n	8009d48 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	795b      	ldrb	r3, [r3, #5]
 8009bda:	4619      	mov	r1, r3
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 ffd9 	bl	800ab94 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	791b      	ldrb	r3, [r3, #4]
 8009be6:	4619      	mov	r1, r3
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f000 ffd3 	bl	800ab94 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	701a      	strb	r2, [r3, #0]
      break;
 8009bfa:	e0a5      	b.n	8009d48 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009c02:	4619      	mov	r1, r3
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f000 f965 	bl	8009ed4 <USBH_Get_CfgDesc>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009c0e:	7bbb      	ldrb	r3, [r7, #14]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d103      	bne.n	8009c1c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2205      	movs	r2, #5
 8009c18:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009c1a:	e097      	b.n	8009d4c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009c1c:	7bbb      	ldrb	r3, [r7, #14]
 8009c1e:	2b03      	cmp	r3, #3
 8009c20:	f040 8094 	bne.w	8009d4c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009c2a:	3301      	adds	r3, #1
 8009c2c:	b2da      	uxtb	r2, r3
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009c3a:	2b03      	cmp	r3, #3
 8009c3c:	d903      	bls.n	8009c46 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	220d      	movs	r2, #13
 8009c42:	701a      	strb	r2, [r3, #0]
      break;
 8009c44:	e082      	b.n	8009d4c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	795b      	ldrb	r3, [r3, #5]
 8009c4a:	4619      	mov	r1, r3
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f000 ffa1 	bl	800ab94 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	791b      	ldrb	r3, [r3, #4]
 8009c56:	4619      	mov	r1, r3
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f000 ff9b 	bl	800ab94 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2200      	movs	r2, #0
 8009c62:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2200      	movs	r2, #0
 8009c68:	701a      	strb	r2, [r3, #0]
      break;
 8009c6a:	e06f      	b.n	8009d4c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d019      	beq.n	8009caa <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009c82:	23ff      	movs	r3, #255	; 0xff
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 f949 	bl	8009f1c <USBH_Get_StringDesc>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009c8e:	7bbb      	ldrb	r3, [r7, #14]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d103      	bne.n	8009c9c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2206      	movs	r2, #6
 8009c98:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009c9a:	e059      	b.n	8009d50 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009c9c:	7bbb      	ldrb	r3, [r7, #14]
 8009c9e:	2b03      	cmp	r3, #3
 8009ca0:	d156      	bne.n	8009d50 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2206      	movs	r2, #6
 8009ca6:	705a      	strb	r2, [r3, #1]
      break;
 8009ca8:	e052      	b.n	8009d50 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2206      	movs	r2, #6
 8009cae:	705a      	strb	r2, [r3, #1]
      break;
 8009cb0:	e04e      	b.n	8009d50 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d019      	beq.n	8009cf0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009cc8:	23ff      	movs	r3, #255	; 0xff
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 f926 	bl	8009f1c <USBH_Get_StringDesc>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009cd4:	7bbb      	ldrb	r3, [r7, #14]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d103      	bne.n	8009ce2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2207      	movs	r2, #7
 8009cde:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009ce0:	e038      	b.n	8009d54 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009ce2:	7bbb      	ldrb	r3, [r7, #14]
 8009ce4:	2b03      	cmp	r3, #3
 8009ce6:	d135      	bne.n	8009d54 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2207      	movs	r2, #7
 8009cec:	705a      	strb	r2, [r3, #1]
      break;
 8009cee:	e031      	b.n	8009d54 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2207      	movs	r2, #7
 8009cf4:	705a      	strb	r2, [r3, #1]
      break;
 8009cf6:	e02d      	b.n	8009d54 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d017      	beq.n	8009d32 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009d0e:	23ff      	movs	r3, #255	; 0xff
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 f903 	bl	8009f1c <USBH_Get_StringDesc>
 8009d16:	4603      	mov	r3, r0
 8009d18:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009d1a:	7bbb      	ldrb	r3, [r7, #14]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d102      	bne.n	8009d26 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009d20:	2300      	movs	r3, #0
 8009d22:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009d24:	e018      	b.n	8009d58 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009d26:	7bbb      	ldrb	r3, [r7, #14]
 8009d28:	2b03      	cmp	r3, #3
 8009d2a:	d115      	bne.n	8009d58 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8009d30:	e012      	b.n	8009d58 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8009d32:	2300      	movs	r3, #0
 8009d34:	73fb      	strb	r3, [r7, #15]
      break;
 8009d36:	e00f      	b.n	8009d58 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009d38:	bf00      	nop
 8009d3a:	e00e      	b.n	8009d5a <USBH_HandleEnum+0x3be>
      break;
 8009d3c:	bf00      	nop
 8009d3e:	e00c      	b.n	8009d5a <USBH_HandleEnum+0x3be>
      break;
 8009d40:	bf00      	nop
 8009d42:	e00a      	b.n	8009d5a <USBH_HandleEnum+0x3be>
      break;
 8009d44:	bf00      	nop
 8009d46:	e008      	b.n	8009d5a <USBH_HandleEnum+0x3be>
      break;
 8009d48:	bf00      	nop
 8009d4a:	e006      	b.n	8009d5a <USBH_HandleEnum+0x3be>
      break;
 8009d4c:	bf00      	nop
 8009d4e:	e004      	b.n	8009d5a <USBH_HandleEnum+0x3be>
      break;
 8009d50:	bf00      	nop
 8009d52:	e002      	b.n	8009d5a <USBH_HandleEnum+0x3be>
      break;
 8009d54:	bf00      	nop
 8009d56:	e000      	b.n	8009d5a <USBH_HandleEnum+0x3be>
      break;
 8009d58:	bf00      	nop
  }
  return Status;
 8009d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3710      	adds	r7, #16
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b083      	sub	sp, #12
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	683a      	ldr	r2, [r7, #0]
 8009d72:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009d76:	bf00      	nop
 8009d78:	370c      	adds	r7, #12
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr

08009d82 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009d82:	b580      	push	{r7, lr}
 8009d84:	b082      	sub	sp, #8
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009d90:	1c5a      	adds	r2, r3, #1
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 f804 	bl	8009da6 <USBH_HandleSof>
}
 8009d9e:	bf00      	nop
 8009da0:	3708      	adds	r7, #8
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}

08009da6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009da6:	b580      	push	{r7, lr}
 8009da8:	b082      	sub	sp, #8
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	b2db      	uxtb	r3, r3
 8009db4:	2b0b      	cmp	r3, #11
 8009db6:	d10a      	bne.n	8009dce <USBH_HandleSof+0x28>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d005      	beq.n	8009dce <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009dc8:	699b      	ldr	r3, [r3, #24]
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	4798      	blx	r3
  }
}
 8009dce:	bf00      	nop
 8009dd0:	3708      	adds	r7, #8
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}

08009dd6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009dd6:	b480      	push	{r7}
 8009dd8:	b083      	sub	sp, #12
 8009dda:	af00      	add	r7, sp, #0
 8009ddc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2201      	movs	r2, #1
 8009de2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009de6:	bf00      	nop
}
 8009de8:	370c      	adds	r7, #12
 8009dea:	46bd      	mov	sp, r7
 8009dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df0:	4770      	bx	lr

08009df2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009df2:	b480      	push	{r7}
 8009df4:	b083      	sub	sp, #12
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009e02:	bf00      	nop
}
 8009e04:	370c      	adds	r7, #12
 8009e06:	46bd      	mov	sp, r7
 8009e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0c:	4770      	bx	lr

08009e0e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009e0e:	b480      	push	{r7}
 8009e10:	b083      	sub	sp, #12
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2201      	movs	r2, #1
 8009e1a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2200      	movs	r2, #0
 8009e22:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009e2e:	2300      	movs	r3, #0
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	370c      	adds	r7, #12
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr

08009e3c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b082      	sub	sp, #8
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2201      	movs	r2, #1
 8009e48:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2200      	movs	r2, #0
 8009e58:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f001 f846 	bl	800aeee <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	791b      	ldrb	r3, [r3, #4]
 8009e66:	4619      	mov	r1, r3
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f000 fe93 	bl	800ab94 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	795b      	ldrb	r3, [r3, #5]
 8009e72:	4619      	mov	r1, r3
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f000 fe8d 	bl	800ab94 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009e7a:	2300      	movs	r3, #0
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3708      	adds	r7, #8
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}

08009e84 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b086      	sub	sp, #24
 8009e88:	af02      	add	r7, sp, #8
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	460b      	mov	r3, r1
 8009e8e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009e96:	78fb      	ldrb	r3, [r7, #3]
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	9300      	str	r3, [sp, #0]
 8009e9c:	4613      	mov	r3, r2
 8009e9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009ea2:	2100      	movs	r1, #0
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 f864 	bl	8009f72 <USBH_GetDescriptor>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8009eae:	7bfb      	ldrb	r3, [r7, #15]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d10a      	bne.n	8009eca <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009ec0:	78fa      	ldrb	r2, [r7, #3]
 8009ec2:	b292      	uxth	r2, r2
 8009ec4:	4619      	mov	r1, r3
 8009ec6:	f000 f919 	bl	800a0fc <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3710      	adds	r7, #16
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b086      	sub	sp, #24
 8009ed8:	af02      	add	r7, sp, #8
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	460b      	mov	r3, r1
 8009ede:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	331c      	adds	r3, #28
 8009ee4:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009ee6:	887b      	ldrh	r3, [r7, #2]
 8009ee8:	9300      	str	r3, [sp, #0]
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ef0:	2100      	movs	r1, #0
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 f83d 	bl	8009f72 <USBH_GetDescriptor>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009efc:	7bfb      	ldrb	r3, [r7, #15]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d107      	bne.n	8009f12 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009f02:	887b      	ldrh	r3, [r7, #2]
 8009f04:	461a      	mov	r2, r3
 8009f06:	68b9      	ldr	r1, [r7, #8]
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f000 f989 	bl	800a220 <USBH_ParseCfgDesc>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	3710      	adds	r7, #16
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}

08009f1c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b088      	sub	sp, #32
 8009f20:	af02      	add	r7, sp, #8
 8009f22:	60f8      	str	r0, [r7, #12]
 8009f24:	607a      	str	r2, [r7, #4]
 8009f26:	461a      	mov	r2, r3
 8009f28:	460b      	mov	r3, r1
 8009f2a:	72fb      	strb	r3, [r7, #11]
 8009f2c:	4613      	mov	r3, r2
 8009f2e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8009f30:	7afb      	ldrb	r3, [r7, #11]
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009f38:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009f40:	893b      	ldrh	r3, [r7, #8]
 8009f42:	9300      	str	r3, [sp, #0]
 8009f44:	460b      	mov	r3, r1
 8009f46:	2100      	movs	r1, #0
 8009f48:	68f8      	ldr	r0, [r7, #12]
 8009f4a:	f000 f812 	bl	8009f72 <USBH_GetDescriptor>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009f52:	7dfb      	ldrb	r3, [r7, #23]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d107      	bne.n	8009f68 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009f5e:	893a      	ldrh	r2, [r7, #8]
 8009f60:	6879      	ldr	r1, [r7, #4]
 8009f62:	4618      	mov	r0, r3
 8009f64:	f000 fb26 	bl	800a5b4 <USBH_ParseStringDesc>
  }

  return status;
 8009f68:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3718      	adds	r7, #24
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}

08009f72 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009f72:	b580      	push	{r7, lr}
 8009f74:	b084      	sub	sp, #16
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	60f8      	str	r0, [r7, #12]
 8009f7a:	607b      	str	r3, [r7, #4]
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	72fb      	strb	r3, [r7, #11]
 8009f80:	4613      	mov	r3, r2
 8009f82:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	789b      	ldrb	r3, [r3, #2]
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d11c      	bne.n	8009fc6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009f8c:	7afb      	ldrb	r3, [r7, #11]
 8009f8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009f92:	b2da      	uxtb	r2, r3
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2206      	movs	r2, #6
 8009f9c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	893a      	ldrh	r2, [r7, #8]
 8009fa2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009fa4:	893b      	ldrh	r3, [r7, #8]
 8009fa6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009faa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009fae:	d104      	bne.n	8009fba <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f240 4209 	movw	r2, #1033	; 0x409
 8009fb6:	829a      	strh	r2, [r3, #20]
 8009fb8:	e002      	b.n	8009fc0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	8b3a      	ldrh	r2, [r7, #24]
 8009fc4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009fc6:	8b3b      	ldrh	r3, [r7, #24]
 8009fc8:	461a      	mov	r2, r3
 8009fca:	6879      	ldr	r1, [r7, #4]
 8009fcc:	68f8      	ldr	r0, [r7, #12]
 8009fce:	f000 fb3f 	bl	800a650 <USBH_CtlReq>
 8009fd2:	4603      	mov	r3, r0
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3710      	adds	r7, #16
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}

08009fdc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b082      	sub	sp, #8
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	460b      	mov	r3, r1
 8009fe6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	789b      	ldrb	r3, [r3, #2]
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	d10f      	bne.n	800a010 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2205      	movs	r2, #5
 8009ffa:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009ffc:	78fb      	ldrb	r3, [r7, #3]
 8009ffe:	b29a      	uxth	r2, r3
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2200      	movs	r2, #0
 800a008:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2200      	movs	r2, #0
 800a00e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a010:	2200      	movs	r2, #0
 800a012:	2100      	movs	r1, #0
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f000 fb1b 	bl	800a650 <USBH_CtlReq>
 800a01a:	4603      	mov	r3, r0
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3708      	adds	r7, #8
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}

0800a024 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b082      	sub	sp, #8
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	460b      	mov	r3, r1
 800a02e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	789b      	ldrb	r3, [r3, #2]
 800a034:	2b01      	cmp	r3, #1
 800a036:	d10e      	bne.n	800a056 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2200      	movs	r2, #0
 800a03c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2209      	movs	r2, #9
 800a042:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	887a      	ldrh	r2, [r7, #2]
 800a048:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2200      	movs	r2, #0
 800a04e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2200      	movs	r2, #0
 800a054:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a056:	2200      	movs	r2, #0
 800a058:	2100      	movs	r1, #0
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f000 faf8 	bl	800a650 <USBH_CtlReq>
 800a060:	4603      	mov	r3, r0
}
 800a062:	4618      	mov	r0, r3
 800a064:	3708      	adds	r7, #8
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}

0800a06a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a06a:	b580      	push	{r7, lr}
 800a06c:	b082      	sub	sp, #8
 800a06e:	af00      	add	r7, sp, #0
 800a070:	6078      	str	r0, [r7, #4]
 800a072:	460b      	mov	r3, r1
 800a074:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	789b      	ldrb	r3, [r3, #2]
 800a07a:	2b01      	cmp	r3, #1
 800a07c:	d10f      	bne.n	800a09e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2200      	movs	r2, #0
 800a082:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2203      	movs	r2, #3
 800a088:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a08a:	78fb      	ldrb	r3, [r7, #3]
 800a08c:	b29a      	uxth	r2, r3
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2200      	movs	r2, #0
 800a096:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2200      	movs	r2, #0
 800a09c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a09e:	2200      	movs	r2, #0
 800a0a0:	2100      	movs	r1, #0
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 fad4 	bl	800a650 <USBH_CtlReq>
 800a0a8:	4603      	mov	r3, r0
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3708      	adds	r7, #8
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}

0800a0b2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a0b2:	b580      	push	{r7, lr}
 800a0b4:	b082      	sub	sp, #8
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	6078      	str	r0, [r7, #4]
 800a0ba:	460b      	mov	r3, r1
 800a0bc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	789b      	ldrb	r3, [r3, #2]
 800a0c2:	2b01      	cmp	r3, #1
 800a0c4:	d10f      	bne.n	800a0e6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2202      	movs	r2, #2
 800a0ca:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a0d8:	78fb      	ldrb	r3, [r7, #3]
 800a0da:	b29a      	uxth	r2, r3
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	2100      	movs	r1, #0
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f000 fab0 	bl	800a650 <USBH_CtlReq>
 800a0f0:	4603      	mov	r3, r0
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3708      	adds	r7, #8
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}
	...

0800a0fc <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b085      	sub	sp, #20
 800a100:	af00      	add	r7, sp, #0
 800a102:	60f8      	str	r0, [r7, #12]
 800a104:	60b9      	str	r1, [r7, #8]
 800a106:	4613      	mov	r3, r2
 800a108:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	781a      	ldrb	r2, [r3, #0]
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	785a      	ldrb	r2, [r3, #1]
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	3302      	adds	r3, #2
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	b29a      	uxth	r2, r3
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	3303      	adds	r3, #3
 800a126:	781b      	ldrb	r3, [r3, #0]
 800a128:	b29b      	uxth	r3, r3
 800a12a:	021b      	lsls	r3, r3, #8
 800a12c:	b29b      	uxth	r3, r3
 800a12e:	4313      	orrs	r3, r2
 800a130:	b29a      	uxth	r2, r3
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	791a      	ldrb	r2, [r3, #4]
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	795a      	ldrb	r2, [r3, #5]
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	799a      	ldrb	r2, [r3, #6]
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	79da      	ldrb	r2, [r3, #7]
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	79db      	ldrb	r3, [r3, #7]
 800a15a:	2b20      	cmp	r3, #32
 800a15c:	dc0f      	bgt.n	800a17e <USBH_ParseDevDesc+0x82>
 800a15e:	2b08      	cmp	r3, #8
 800a160:	db14      	blt.n	800a18c <USBH_ParseDevDesc+0x90>
 800a162:	3b08      	subs	r3, #8
 800a164:	4a2d      	ldr	r2, [pc, #180]	; (800a21c <USBH_ParseDevDesc+0x120>)
 800a166:	fa22 f303 	lsr.w	r3, r2, r3
 800a16a:	f003 0301 	and.w	r3, r3, #1
 800a16e:	2b00      	cmp	r3, #0
 800a170:	bf14      	ite	ne
 800a172:	2301      	movne	r3, #1
 800a174:	2300      	moveq	r3, #0
 800a176:	b2db      	uxtb	r3, r3
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d102      	bne.n	800a182 <USBH_ParseDevDesc+0x86>
 800a17c:	e006      	b.n	800a18c <USBH_ParseDevDesc+0x90>
 800a17e:	2b40      	cmp	r3, #64	; 0x40
 800a180:	d104      	bne.n	800a18c <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	79da      	ldrb	r2, [r3, #7]
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	71da      	strb	r2, [r3, #7]
      break;
 800a18a:	e003      	b.n	800a194 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2240      	movs	r2, #64	; 0x40
 800a190:	71da      	strb	r2, [r3, #7]
      break;
 800a192:	bf00      	nop
  }

  if (length > 8U)
 800a194:	88fb      	ldrh	r3, [r7, #6]
 800a196:	2b08      	cmp	r3, #8
 800a198:	d939      	bls.n	800a20e <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	3308      	adds	r3, #8
 800a19e:	781b      	ldrb	r3, [r3, #0]
 800a1a0:	b29a      	uxth	r2, r3
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	3309      	adds	r3, #9
 800a1a6:	781b      	ldrb	r3, [r3, #0]
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	021b      	lsls	r3, r3, #8
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	b29a      	uxth	r2, r3
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	330a      	adds	r3, #10
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	b29a      	uxth	r2, r3
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	330b      	adds	r3, #11
 800a1c2:	781b      	ldrb	r3, [r3, #0]
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	021b      	lsls	r3, r3, #8
 800a1c8:	b29b      	uxth	r3, r3
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	b29a      	uxth	r2, r3
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	330c      	adds	r3, #12
 800a1d6:	781b      	ldrb	r3, [r3, #0]
 800a1d8:	b29a      	uxth	r2, r3
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	330d      	adds	r3, #13
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	b29b      	uxth	r3, r3
 800a1e2:	021b      	lsls	r3, r3, #8
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	b29a      	uxth	r2, r3
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	7b9a      	ldrb	r2, [r3, #14]
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	7bda      	ldrb	r2, [r3, #15]
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	7c1a      	ldrb	r2, [r3, #16]
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	7c5a      	ldrb	r2, [r3, #17]
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	745a      	strb	r2, [r3, #17]
  }
}
 800a20e:	bf00      	nop
 800a210:	3714      	adds	r7, #20
 800a212:	46bd      	mov	sp, r7
 800a214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a218:	4770      	bx	lr
 800a21a:	bf00      	nop
 800a21c:	01000101 	.word	0x01000101

0800a220 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b08c      	sub	sp, #48	; 0x30
 800a224:	af00      	add	r7, sp, #0
 800a226:	60f8      	str	r0, [r7, #12]
 800a228:	60b9      	str	r1, [r7, #8]
 800a22a:	4613      	mov	r3, r2
 800a22c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a234:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a236:	2300      	movs	r3, #0
 800a238:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a240:	2300      	movs	r3, #0
 800a242:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800a246:	2300      	movs	r3, #0
 800a248:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	781a      	ldrb	r2, [r3, #0]
 800a254:	6a3b      	ldr	r3, [r7, #32]
 800a256:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	785a      	ldrb	r2, [r3, #1]
 800a25c:	6a3b      	ldr	r3, [r7, #32]
 800a25e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	3302      	adds	r3, #2
 800a264:	781b      	ldrb	r3, [r3, #0]
 800a266:	b29a      	uxth	r2, r3
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	3303      	adds	r3, #3
 800a26c:	781b      	ldrb	r3, [r3, #0]
 800a26e:	b29b      	uxth	r3, r3
 800a270:	021b      	lsls	r3, r3, #8
 800a272:	b29b      	uxth	r3, r3
 800a274:	4313      	orrs	r3, r2
 800a276:	b29b      	uxth	r3, r3
 800a278:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a27c:	bf28      	it	cs
 800a27e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800a282:	b29a      	uxth	r2, r3
 800a284:	6a3b      	ldr	r3, [r7, #32]
 800a286:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	791a      	ldrb	r2, [r3, #4]
 800a28c:	6a3b      	ldr	r3, [r7, #32]
 800a28e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	795a      	ldrb	r2, [r3, #5]
 800a294:	6a3b      	ldr	r3, [r7, #32]
 800a296:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	799a      	ldrb	r2, [r3, #6]
 800a29c:	6a3b      	ldr	r3, [r7, #32]
 800a29e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	79da      	ldrb	r2, [r3, #7]
 800a2a4:	6a3b      	ldr	r3, [r7, #32]
 800a2a6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	7a1a      	ldrb	r2, [r3, #8]
 800a2ac:	6a3b      	ldr	r3, [r7, #32]
 800a2ae:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800a2b0:	6a3b      	ldr	r3, [r7, #32]
 800a2b2:	781b      	ldrb	r3, [r3, #0]
 800a2b4:	2b09      	cmp	r3, #9
 800a2b6:	d002      	beq.n	800a2be <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a2b8:	6a3b      	ldr	r3, [r7, #32]
 800a2ba:	2209      	movs	r2, #9
 800a2bc:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a2be:	88fb      	ldrh	r3, [r7, #6]
 800a2c0:	2b09      	cmp	r3, #9
 800a2c2:	f240 809d 	bls.w	800a400 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800a2c6:	2309      	movs	r3, #9
 800a2c8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a2ce:	e081      	b.n	800a3d4 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a2d0:	f107 0316 	add.w	r3, r7, #22
 800a2d4:	4619      	mov	r1, r3
 800a2d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2d8:	f000 f99f 	bl	800a61a <USBH_GetNextDesc>
 800a2dc:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e0:	785b      	ldrb	r3, [r3, #1]
 800a2e2:	2b04      	cmp	r3, #4
 800a2e4:	d176      	bne.n	800a3d4 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a2e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e8:	781b      	ldrb	r3, [r3, #0]
 800a2ea:	2b09      	cmp	r3, #9
 800a2ec:	d002      	beq.n	800a2f4 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a2ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f0:	2209      	movs	r2, #9
 800a2f2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a2f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2f8:	221a      	movs	r2, #26
 800a2fa:	fb02 f303 	mul.w	r3, r2, r3
 800a2fe:	3308      	adds	r3, #8
 800a300:	6a3a      	ldr	r2, [r7, #32]
 800a302:	4413      	add	r3, r2
 800a304:	3302      	adds	r3, #2
 800a306:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a308:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a30a:	69f8      	ldr	r0, [r7, #28]
 800a30c:	f000 f87e 	bl	800a40c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a310:	2300      	movs	r3, #0
 800a312:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a316:	2300      	movs	r3, #0
 800a318:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a31a:	e043      	b.n	800a3a4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a31c:	f107 0316 	add.w	r3, r7, #22
 800a320:	4619      	mov	r1, r3
 800a322:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a324:	f000 f979 	bl	800a61a <USBH_GetNextDesc>
 800a328:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a32c:	785b      	ldrb	r3, [r3, #1]
 800a32e:	2b05      	cmp	r3, #5
 800a330:	d138      	bne.n	800a3a4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800a332:	69fb      	ldr	r3, [r7, #28]
 800a334:	795b      	ldrb	r3, [r3, #5]
 800a336:	2b01      	cmp	r3, #1
 800a338:	d10f      	bne.n	800a35a <USBH_ParseCfgDesc+0x13a>
 800a33a:	69fb      	ldr	r3, [r7, #28]
 800a33c:	799b      	ldrb	r3, [r3, #6]
 800a33e:	2b02      	cmp	r3, #2
 800a340:	d10b      	bne.n	800a35a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a342:	69fb      	ldr	r3, [r7, #28]
 800a344:	79db      	ldrb	r3, [r3, #7]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d10f      	bne.n	800a36a <USBH_ParseCfgDesc+0x14a>
 800a34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a34c:	781b      	ldrb	r3, [r3, #0]
 800a34e:	2b09      	cmp	r3, #9
 800a350:	d00b      	beq.n	800a36a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800a352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a354:	2209      	movs	r2, #9
 800a356:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a358:	e007      	b.n	800a36a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800a35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a35c:	781b      	ldrb	r3, [r3, #0]
 800a35e:	2b07      	cmp	r3, #7
 800a360:	d004      	beq.n	800a36c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a364:	2207      	movs	r2, #7
 800a366:	701a      	strb	r2, [r3, #0]
 800a368:	e000      	b.n	800a36c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a36a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a36c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a370:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a374:	3201      	adds	r2, #1
 800a376:	00d2      	lsls	r2, r2, #3
 800a378:	211a      	movs	r1, #26
 800a37a:	fb01 f303 	mul.w	r3, r1, r3
 800a37e:	4413      	add	r3, r2
 800a380:	3308      	adds	r3, #8
 800a382:	6a3a      	ldr	r2, [r7, #32]
 800a384:	4413      	add	r3, r2
 800a386:	3304      	adds	r3, #4
 800a388:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a38a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a38c:	69b9      	ldr	r1, [r7, #24]
 800a38e:	68f8      	ldr	r0, [r7, #12]
 800a390:	f000 f86b 	bl	800a46a <USBH_ParseEPDesc>
 800a394:	4603      	mov	r3, r0
 800a396:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800a39a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a39e:	3301      	adds	r3, #1
 800a3a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a3a4:	69fb      	ldr	r3, [r7, #28]
 800a3a6:	791b      	ldrb	r3, [r3, #4]
 800a3a8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	d204      	bcs.n	800a3ba <USBH_ParseCfgDesc+0x19a>
 800a3b0:	6a3b      	ldr	r3, [r7, #32]
 800a3b2:	885a      	ldrh	r2, [r3, #2]
 800a3b4:	8afb      	ldrh	r3, [r7, #22]
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d8b0      	bhi.n	800a31c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a3ba:	69fb      	ldr	r3, [r7, #28]
 800a3bc:	791b      	ldrb	r3, [r3, #4]
 800a3be:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d201      	bcs.n	800a3ca <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800a3c6:	2303      	movs	r3, #3
 800a3c8:	e01c      	b.n	800a404 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800a3ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a3d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3d8:	2b01      	cmp	r3, #1
 800a3da:	d805      	bhi.n	800a3e8 <USBH_ParseCfgDesc+0x1c8>
 800a3dc:	6a3b      	ldr	r3, [r7, #32]
 800a3de:	885a      	ldrh	r2, [r3, #2]
 800a3e0:	8afb      	ldrh	r3, [r7, #22]
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	f63f af74 	bhi.w	800a2d0 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a3e8:	6a3b      	ldr	r3, [r7, #32]
 800a3ea:	791b      	ldrb	r3, [r3, #4]
 800a3ec:	2b02      	cmp	r3, #2
 800a3ee:	bf28      	it	cs
 800a3f0:	2302      	movcs	r3, #2
 800a3f2:	b2db      	uxtb	r3, r3
 800a3f4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d201      	bcs.n	800a400 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800a3fc:	2303      	movs	r3, #3
 800a3fe:	e001      	b.n	800a404 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800a400:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a404:	4618      	mov	r0, r3
 800a406:	3730      	adds	r7, #48	; 0x30
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}

0800a40c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b083      	sub	sp, #12
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	781a      	ldrb	r2, [r3, #0]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	785a      	ldrb	r2, [r3, #1]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	789a      	ldrb	r2, [r3, #2]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	78da      	ldrb	r2, [r3, #3]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	791a      	ldrb	r2, [r3, #4]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	795a      	ldrb	r2, [r3, #5]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	799a      	ldrb	r2, [r3, #6]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	79da      	ldrb	r2, [r3, #7]
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	7a1a      	ldrb	r2, [r3, #8]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	721a      	strb	r2, [r3, #8]
}
 800a45e:	bf00      	nop
 800a460:	370c      	adds	r7, #12
 800a462:	46bd      	mov	sp, r7
 800a464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a468:	4770      	bx	lr

0800a46a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800a46a:	b480      	push	{r7}
 800a46c:	b087      	sub	sp, #28
 800a46e:	af00      	add	r7, sp, #0
 800a470:	60f8      	str	r0, [r7, #12]
 800a472:	60b9      	str	r1, [r7, #8]
 800a474:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a476:	2300      	movs	r3, #0
 800a478:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	781a      	ldrb	r2, [r3, #0]
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	785a      	ldrb	r2, [r3, #1]
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	789a      	ldrb	r2, [r3, #2]
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	78da      	ldrb	r2, [r3, #3]
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	3304      	adds	r3, #4
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	b29a      	uxth	r2, r3
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	3305      	adds	r3, #5
 800a4a6:	781b      	ldrb	r3, [r3, #0]
 800a4a8:	b29b      	uxth	r3, r3
 800a4aa:	021b      	lsls	r3, r3, #8
 800a4ac:	b29b      	uxth	r3, r3
 800a4ae:	4313      	orrs	r3, r2
 800a4b0:	b29a      	uxth	r2, r3
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	799a      	ldrb	r2, [r3, #6]
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	889b      	ldrh	r3, [r3, #4]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d102      	bne.n	800a4cc <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800a4c6:	2303      	movs	r3, #3
 800a4c8:	75fb      	strb	r3, [r7, #23]
 800a4ca:	e033      	b.n	800a534 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	889b      	ldrh	r3, [r3, #4]
 800a4d0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a4d4:	f023 0307 	bic.w	r3, r3, #7
 800a4d8:	b29a      	uxth	r2, r3
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	889b      	ldrh	r3, [r3, #4]
 800a4e2:	b21a      	sxth	r2, r3
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	3304      	adds	r3, #4
 800a4e8:	781b      	ldrb	r3, [r3, #0]
 800a4ea:	b299      	uxth	r1, r3
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	3305      	adds	r3, #5
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	b29b      	uxth	r3, r3
 800a4f4:	021b      	lsls	r3, r3, #8
 800a4f6:	b29b      	uxth	r3, r3
 800a4f8:	430b      	orrs	r3, r1
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a500:	2b00      	cmp	r3, #0
 800a502:	d110      	bne.n	800a526 <USBH_ParseEPDesc+0xbc>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	3304      	adds	r3, #4
 800a508:	781b      	ldrb	r3, [r3, #0]
 800a50a:	b299      	uxth	r1, r3
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	3305      	adds	r3, #5
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	b29b      	uxth	r3, r3
 800a514:	021b      	lsls	r3, r3, #8
 800a516:	b29b      	uxth	r3, r3
 800a518:	430b      	orrs	r3, r1
 800a51a:	b29b      	uxth	r3, r3
 800a51c:	b21b      	sxth	r3, r3
 800a51e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a522:	b21b      	sxth	r3, r3
 800a524:	e001      	b.n	800a52a <USBH_ParseEPDesc+0xc0>
 800a526:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a52a:	4313      	orrs	r3, r2
 800a52c:	b21b      	sxth	r3, r3
 800a52e:	b29a      	uxth	r2, r3
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d116      	bne.n	800a56c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	78db      	ldrb	r3, [r3, #3]
 800a542:	f003 0303 	and.w	r3, r3, #3
 800a546:	2b01      	cmp	r3, #1
 800a548:	d005      	beq.n	800a556 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	78db      	ldrb	r3, [r3, #3]
 800a54e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a552:	2b03      	cmp	r3, #3
 800a554:	d127      	bne.n	800a5a6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	799b      	ldrb	r3, [r3, #6]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d003      	beq.n	800a566 <USBH_ParseEPDesc+0xfc>
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	799b      	ldrb	r3, [r3, #6]
 800a562:	2b10      	cmp	r3, #16
 800a564:	d91f      	bls.n	800a5a6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a566:	2303      	movs	r3, #3
 800a568:	75fb      	strb	r3, [r7, #23]
 800a56a:	e01c      	b.n	800a5a6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	78db      	ldrb	r3, [r3, #3]
 800a570:	f003 0303 	and.w	r3, r3, #3
 800a574:	2b01      	cmp	r3, #1
 800a576:	d10a      	bne.n	800a58e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	799b      	ldrb	r3, [r3, #6]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d003      	beq.n	800a588 <USBH_ParseEPDesc+0x11e>
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	799b      	ldrb	r3, [r3, #6]
 800a584:	2b10      	cmp	r3, #16
 800a586:	d90e      	bls.n	800a5a6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a588:	2303      	movs	r3, #3
 800a58a:	75fb      	strb	r3, [r7, #23]
 800a58c:	e00b      	b.n	800a5a6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	78db      	ldrb	r3, [r3, #3]
 800a592:	f003 0303 	and.w	r3, r3, #3
 800a596:	2b03      	cmp	r3, #3
 800a598:	d105      	bne.n	800a5a6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	799b      	ldrb	r3, [r3, #6]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d101      	bne.n	800a5a6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a5a2:	2303      	movs	r3, #3
 800a5a4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800a5a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	371c      	adds	r7, #28
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b2:	4770      	bx	lr

0800a5b4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b087      	sub	sp, #28
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	60f8      	str	r0, [r7, #12]
 800a5bc:	60b9      	str	r1, [r7, #8]
 800a5be:	4613      	mov	r3, r2
 800a5c0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	3301      	adds	r3, #1
 800a5c6:	781b      	ldrb	r3, [r3, #0]
 800a5c8:	2b03      	cmp	r3, #3
 800a5ca:	d120      	bne.n	800a60e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	781b      	ldrb	r3, [r3, #0]
 800a5d0:	1e9a      	subs	r2, r3, #2
 800a5d2:	88fb      	ldrh	r3, [r7, #6]
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	bf28      	it	cs
 800a5d8:	4613      	movcs	r3, r2
 800a5da:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	3302      	adds	r3, #2
 800a5e0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	82fb      	strh	r3, [r7, #22]
 800a5e6:	e00b      	b.n	800a600 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a5e8:	8afb      	ldrh	r3, [r7, #22]
 800a5ea:	68fa      	ldr	r2, [r7, #12]
 800a5ec:	4413      	add	r3, r2
 800a5ee:	781a      	ldrb	r2, [r3, #0]
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a5fa:	8afb      	ldrh	r3, [r7, #22]
 800a5fc:	3302      	adds	r3, #2
 800a5fe:	82fb      	strh	r3, [r7, #22]
 800a600:	8afa      	ldrh	r2, [r7, #22]
 800a602:	8abb      	ldrh	r3, [r7, #20]
 800a604:	429a      	cmp	r2, r3
 800a606:	d3ef      	bcc.n	800a5e8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	2200      	movs	r2, #0
 800a60c:	701a      	strb	r2, [r3, #0]
  }
}
 800a60e:	bf00      	nop
 800a610:	371c      	adds	r7, #28
 800a612:	46bd      	mov	sp, r7
 800a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a618:	4770      	bx	lr

0800a61a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a61a:	b480      	push	{r7}
 800a61c:	b085      	sub	sp, #20
 800a61e:	af00      	add	r7, sp, #0
 800a620:	6078      	str	r0, [r7, #4]
 800a622:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	881a      	ldrh	r2, [r3, #0]
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	781b      	ldrb	r3, [r3, #0]
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	4413      	add	r3, r2
 800a630:	b29a      	uxth	r2, r3
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	4413      	add	r3, r2
 800a640:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a642:	68fb      	ldr	r3, [r7, #12]
}
 800a644:	4618      	mov	r0, r3
 800a646:	3714      	adds	r7, #20
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr

0800a650 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b086      	sub	sp, #24
 800a654:	af00      	add	r7, sp, #0
 800a656:	60f8      	str	r0, [r7, #12]
 800a658:	60b9      	str	r1, [r7, #8]
 800a65a:	4613      	mov	r3, r2
 800a65c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a65e:	2301      	movs	r3, #1
 800a660:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	789b      	ldrb	r3, [r3, #2]
 800a666:	2b01      	cmp	r3, #1
 800a668:	d002      	beq.n	800a670 <USBH_CtlReq+0x20>
 800a66a:	2b02      	cmp	r3, #2
 800a66c:	d00f      	beq.n	800a68e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a66e:	e027      	b.n	800a6c0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	68ba      	ldr	r2, [r7, #8]
 800a674:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	88fa      	ldrh	r2, [r7, #6]
 800a67a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	2201      	movs	r2, #1
 800a680:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2202      	movs	r2, #2
 800a686:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a688:	2301      	movs	r3, #1
 800a68a:	75fb      	strb	r3, [r7, #23]
      break;
 800a68c:	e018      	b.n	800a6c0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a68e:	68f8      	ldr	r0, [r7, #12]
 800a690:	f000 f81c 	bl	800a6cc <USBH_HandleControl>
 800a694:	4603      	mov	r3, r0
 800a696:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a698:	7dfb      	ldrb	r3, [r7, #23]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d002      	beq.n	800a6a4 <USBH_CtlReq+0x54>
 800a69e:	7dfb      	ldrb	r3, [r7, #23]
 800a6a0:	2b03      	cmp	r3, #3
 800a6a2:	d106      	bne.n	800a6b2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	761a      	strb	r2, [r3, #24]
      break;
 800a6b0:	e005      	b.n	800a6be <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a6b2:	7dfb      	ldrb	r3, [r7, #23]
 800a6b4:	2b02      	cmp	r3, #2
 800a6b6:	d102      	bne.n	800a6be <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	709a      	strb	r2, [r3, #2]
      break;
 800a6be:	bf00      	nop
  }
  return status;
 800a6c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3718      	adds	r7, #24
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}
	...

0800a6cc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b086      	sub	sp, #24
 800a6d0:	af02      	add	r7, sp, #8
 800a6d2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	7e1b      	ldrb	r3, [r3, #24]
 800a6e0:	3b01      	subs	r3, #1
 800a6e2:	2b0a      	cmp	r3, #10
 800a6e4:	f200 8156 	bhi.w	800a994 <USBH_HandleControl+0x2c8>
 800a6e8:	a201      	add	r2, pc, #4	; (adr r2, 800a6f0 <USBH_HandleControl+0x24>)
 800a6ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ee:	bf00      	nop
 800a6f0:	0800a71d 	.word	0x0800a71d
 800a6f4:	0800a737 	.word	0x0800a737
 800a6f8:	0800a7a1 	.word	0x0800a7a1
 800a6fc:	0800a7c7 	.word	0x0800a7c7
 800a700:	0800a7ff 	.word	0x0800a7ff
 800a704:	0800a829 	.word	0x0800a829
 800a708:	0800a87b 	.word	0x0800a87b
 800a70c:	0800a89d 	.word	0x0800a89d
 800a710:	0800a8d9 	.word	0x0800a8d9
 800a714:	0800a8ff 	.word	0x0800a8ff
 800a718:	0800a93d 	.word	0x0800a93d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f103 0110 	add.w	r1, r3, #16
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	795b      	ldrb	r3, [r3, #5]
 800a726:	461a      	mov	r2, r3
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f000 f943 	bl	800a9b4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2202      	movs	r2, #2
 800a732:	761a      	strb	r2, [r3, #24]
      break;
 800a734:	e139      	b.n	800a9aa <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	795b      	ldrb	r3, [r3, #5]
 800a73a:	4619      	mov	r1, r3
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f000 fcc5 	bl	800b0cc <USBH_LL_GetURBState>
 800a742:	4603      	mov	r3, r0
 800a744:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a746:	7bbb      	ldrb	r3, [r7, #14]
 800a748:	2b01      	cmp	r3, #1
 800a74a:	d11e      	bne.n	800a78a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	7c1b      	ldrb	r3, [r3, #16]
 800a750:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a754:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	8adb      	ldrh	r3, [r3, #22]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d00a      	beq.n	800a774 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a75e:	7b7b      	ldrb	r3, [r7, #13]
 800a760:	2b80      	cmp	r3, #128	; 0x80
 800a762:	d103      	bne.n	800a76c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2203      	movs	r2, #3
 800a768:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a76a:	e115      	b.n	800a998 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2205      	movs	r2, #5
 800a770:	761a      	strb	r2, [r3, #24]
      break;
 800a772:	e111      	b.n	800a998 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a774:	7b7b      	ldrb	r3, [r7, #13]
 800a776:	2b80      	cmp	r3, #128	; 0x80
 800a778:	d103      	bne.n	800a782 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2209      	movs	r2, #9
 800a77e:	761a      	strb	r2, [r3, #24]
      break;
 800a780:	e10a      	b.n	800a998 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2207      	movs	r2, #7
 800a786:	761a      	strb	r2, [r3, #24]
      break;
 800a788:	e106      	b.n	800a998 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a78a:	7bbb      	ldrb	r3, [r7, #14]
 800a78c:	2b04      	cmp	r3, #4
 800a78e:	d003      	beq.n	800a798 <USBH_HandleControl+0xcc>
 800a790:	7bbb      	ldrb	r3, [r7, #14]
 800a792:	2b02      	cmp	r3, #2
 800a794:	f040 8100 	bne.w	800a998 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	220b      	movs	r2, #11
 800a79c:	761a      	strb	r2, [r3, #24]
      break;
 800a79e:	e0fb      	b.n	800a998 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a7a6:	b29a      	uxth	r2, r3
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6899      	ldr	r1, [r3, #8]
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	899a      	ldrh	r2, [r3, #12]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	791b      	ldrb	r3, [r3, #4]
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f000 f93a 	bl	800aa32 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2204      	movs	r2, #4
 800a7c2:	761a      	strb	r2, [r3, #24]
      break;
 800a7c4:	e0f1      	b.n	800a9aa <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	791b      	ldrb	r3, [r3, #4]
 800a7ca:	4619      	mov	r1, r3
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f000 fc7d 	bl	800b0cc <USBH_LL_GetURBState>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a7d6:	7bbb      	ldrb	r3, [r7, #14]
 800a7d8:	2b01      	cmp	r3, #1
 800a7da:	d102      	bne.n	800a7e2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2209      	movs	r2, #9
 800a7e0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a7e2:	7bbb      	ldrb	r3, [r7, #14]
 800a7e4:	2b05      	cmp	r3, #5
 800a7e6:	d102      	bne.n	800a7ee <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a7e8:	2303      	movs	r3, #3
 800a7ea:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a7ec:	e0d6      	b.n	800a99c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a7ee:	7bbb      	ldrb	r3, [r7, #14]
 800a7f0:	2b04      	cmp	r3, #4
 800a7f2:	f040 80d3 	bne.w	800a99c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	220b      	movs	r2, #11
 800a7fa:	761a      	strb	r2, [r3, #24]
      break;
 800a7fc:	e0ce      	b.n	800a99c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6899      	ldr	r1, [r3, #8]
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	899a      	ldrh	r2, [r3, #12]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	795b      	ldrb	r3, [r3, #5]
 800a80a:	2001      	movs	r0, #1
 800a80c:	9000      	str	r0, [sp, #0]
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f000 f8ea 	bl	800a9e8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a81a:	b29a      	uxth	r2, r3
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2206      	movs	r2, #6
 800a824:	761a      	strb	r2, [r3, #24]
      break;
 800a826:	e0c0      	b.n	800a9aa <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	795b      	ldrb	r3, [r3, #5]
 800a82c:	4619      	mov	r1, r3
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 fc4c 	bl	800b0cc <USBH_LL_GetURBState>
 800a834:	4603      	mov	r3, r0
 800a836:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a838:	7bbb      	ldrb	r3, [r7, #14]
 800a83a:	2b01      	cmp	r3, #1
 800a83c:	d103      	bne.n	800a846 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2207      	movs	r2, #7
 800a842:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a844:	e0ac      	b.n	800a9a0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a846:	7bbb      	ldrb	r3, [r7, #14]
 800a848:	2b05      	cmp	r3, #5
 800a84a:	d105      	bne.n	800a858 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	220c      	movs	r2, #12
 800a850:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a852:	2303      	movs	r3, #3
 800a854:	73fb      	strb	r3, [r7, #15]
      break;
 800a856:	e0a3      	b.n	800a9a0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a858:	7bbb      	ldrb	r3, [r7, #14]
 800a85a:	2b02      	cmp	r3, #2
 800a85c:	d103      	bne.n	800a866 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2205      	movs	r2, #5
 800a862:	761a      	strb	r2, [r3, #24]
      break;
 800a864:	e09c      	b.n	800a9a0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a866:	7bbb      	ldrb	r3, [r7, #14]
 800a868:	2b04      	cmp	r3, #4
 800a86a:	f040 8099 	bne.w	800a9a0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	220b      	movs	r2, #11
 800a872:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a874:	2302      	movs	r3, #2
 800a876:	73fb      	strb	r3, [r7, #15]
      break;
 800a878:	e092      	b.n	800a9a0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	791b      	ldrb	r3, [r3, #4]
 800a87e:	2200      	movs	r2, #0
 800a880:	2100      	movs	r1, #0
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f000 f8d5 	bl	800aa32 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a88e:	b29a      	uxth	r2, r3
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2208      	movs	r2, #8
 800a898:	761a      	strb	r2, [r3, #24]

      break;
 800a89a:	e086      	b.n	800a9aa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	791b      	ldrb	r3, [r3, #4]
 800a8a0:	4619      	mov	r1, r3
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f000 fc12 	bl	800b0cc <USBH_LL_GetURBState>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a8ac:	7bbb      	ldrb	r3, [r7, #14]
 800a8ae:	2b01      	cmp	r3, #1
 800a8b0:	d105      	bne.n	800a8be <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	220d      	movs	r2, #13
 800a8b6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a8bc:	e072      	b.n	800a9a4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a8be:	7bbb      	ldrb	r3, [r7, #14]
 800a8c0:	2b04      	cmp	r3, #4
 800a8c2:	d103      	bne.n	800a8cc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	220b      	movs	r2, #11
 800a8c8:	761a      	strb	r2, [r3, #24]
      break;
 800a8ca:	e06b      	b.n	800a9a4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a8cc:	7bbb      	ldrb	r3, [r7, #14]
 800a8ce:	2b05      	cmp	r3, #5
 800a8d0:	d168      	bne.n	800a9a4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a8d2:	2303      	movs	r3, #3
 800a8d4:	73fb      	strb	r3, [r7, #15]
      break;
 800a8d6:	e065      	b.n	800a9a4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	795b      	ldrb	r3, [r3, #5]
 800a8dc:	2201      	movs	r2, #1
 800a8de:	9200      	str	r2, [sp, #0]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	2100      	movs	r1, #0
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f000 f87f 	bl	800a9e8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a8f0:	b29a      	uxth	r2, r3
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	220a      	movs	r2, #10
 800a8fa:	761a      	strb	r2, [r3, #24]
      break;
 800a8fc:	e055      	b.n	800a9aa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	795b      	ldrb	r3, [r3, #5]
 800a902:	4619      	mov	r1, r3
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f000 fbe1 	bl	800b0cc <USBH_LL_GetURBState>
 800a90a:	4603      	mov	r3, r0
 800a90c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a90e:	7bbb      	ldrb	r3, [r7, #14]
 800a910:	2b01      	cmp	r3, #1
 800a912:	d105      	bne.n	800a920 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a914:	2300      	movs	r3, #0
 800a916:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	220d      	movs	r2, #13
 800a91c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a91e:	e043      	b.n	800a9a8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a920:	7bbb      	ldrb	r3, [r7, #14]
 800a922:	2b02      	cmp	r3, #2
 800a924:	d103      	bne.n	800a92e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2209      	movs	r2, #9
 800a92a:	761a      	strb	r2, [r3, #24]
      break;
 800a92c:	e03c      	b.n	800a9a8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a92e:	7bbb      	ldrb	r3, [r7, #14]
 800a930:	2b04      	cmp	r3, #4
 800a932:	d139      	bne.n	800a9a8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	220b      	movs	r2, #11
 800a938:	761a      	strb	r2, [r3, #24]
      break;
 800a93a:	e035      	b.n	800a9a8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	7e5b      	ldrb	r3, [r3, #25]
 800a940:	3301      	adds	r3, #1
 800a942:	b2da      	uxtb	r2, r3
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	765a      	strb	r2, [r3, #25]
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	7e5b      	ldrb	r3, [r3, #25]
 800a94c:	2b02      	cmp	r3, #2
 800a94e:	d806      	bhi.n	800a95e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2201      	movs	r2, #1
 800a954:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2201      	movs	r2, #1
 800a95a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a95c:	e025      	b.n	800a9aa <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a964:	2106      	movs	r1, #6
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2200      	movs	r2, #0
 800a96e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	795b      	ldrb	r3, [r3, #5]
 800a974:	4619      	mov	r1, r3
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 f90c 	bl	800ab94 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	791b      	ldrb	r3, [r3, #4]
 800a980:	4619      	mov	r1, r3
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 f906 	bl	800ab94 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2200      	movs	r2, #0
 800a98c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a98e:	2302      	movs	r3, #2
 800a990:	73fb      	strb	r3, [r7, #15]
      break;
 800a992:	e00a      	b.n	800a9aa <USBH_HandleControl+0x2de>

    default:
      break;
 800a994:	bf00      	nop
 800a996:	e008      	b.n	800a9aa <USBH_HandleControl+0x2de>
      break;
 800a998:	bf00      	nop
 800a99a:	e006      	b.n	800a9aa <USBH_HandleControl+0x2de>
      break;
 800a99c:	bf00      	nop
 800a99e:	e004      	b.n	800a9aa <USBH_HandleControl+0x2de>
      break;
 800a9a0:	bf00      	nop
 800a9a2:	e002      	b.n	800a9aa <USBH_HandleControl+0x2de>
      break;
 800a9a4:	bf00      	nop
 800a9a6:	e000      	b.n	800a9aa <USBH_HandleControl+0x2de>
      break;
 800a9a8:	bf00      	nop
  }

  return status;
 800a9aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3710      	adds	r7, #16
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}

0800a9b4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b088      	sub	sp, #32
 800a9b8:	af04      	add	r7, sp, #16
 800a9ba:	60f8      	str	r0, [r7, #12]
 800a9bc:	60b9      	str	r1, [r7, #8]
 800a9be:	4613      	mov	r3, r2
 800a9c0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a9c2:	79f9      	ldrb	r1, [r7, #7]
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	9303      	str	r3, [sp, #12]
 800a9c8:	2308      	movs	r3, #8
 800a9ca:	9302      	str	r3, [sp, #8]
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	9301      	str	r3, [sp, #4]
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	9300      	str	r3, [sp, #0]
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	68f8      	ldr	r0, [r7, #12]
 800a9da:	f000 fb46 	bl	800b06a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a9de:	2300      	movs	r3, #0
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3710      	adds	r7, #16
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}

0800a9e8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b088      	sub	sp, #32
 800a9ec:	af04      	add	r7, sp, #16
 800a9ee:	60f8      	str	r0, [r7, #12]
 800a9f0:	60b9      	str	r1, [r7, #8]
 800a9f2:	4611      	mov	r1, r2
 800a9f4:	461a      	mov	r2, r3
 800a9f6:	460b      	mov	r3, r1
 800a9f8:	80fb      	strh	r3, [r7, #6]
 800a9fa:	4613      	mov	r3, r2
 800a9fc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d001      	beq.n	800aa0c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aa0c:	7979      	ldrb	r1, [r7, #5]
 800aa0e:	7e3b      	ldrb	r3, [r7, #24]
 800aa10:	9303      	str	r3, [sp, #12]
 800aa12:	88fb      	ldrh	r3, [r7, #6]
 800aa14:	9302      	str	r3, [sp, #8]
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	9301      	str	r3, [sp, #4]
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	9300      	str	r3, [sp, #0]
 800aa1e:	2300      	movs	r3, #0
 800aa20:	2200      	movs	r2, #0
 800aa22:	68f8      	ldr	r0, [r7, #12]
 800aa24:	f000 fb21 	bl	800b06a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800aa28:	2300      	movs	r3, #0
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3710      	adds	r7, #16
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}

0800aa32 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800aa32:	b580      	push	{r7, lr}
 800aa34:	b088      	sub	sp, #32
 800aa36:	af04      	add	r7, sp, #16
 800aa38:	60f8      	str	r0, [r7, #12]
 800aa3a:	60b9      	str	r1, [r7, #8]
 800aa3c:	4611      	mov	r1, r2
 800aa3e:	461a      	mov	r2, r3
 800aa40:	460b      	mov	r3, r1
 800aa42:	80fb      	strh	r3, [r7, #6]
 800aa44:	4613      	mov	r3, r2
 800aa46:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aa48:	7979      	ldrb	r1, [r7, #5]
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	9303      	str	r3, [sp, #12]
 800aa4e:	88fb      	ldrh	r3, [r7, #6]
 800aa50:	9302      	str	r3, [sp, #8]
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	9301      	str	r3, [sp, #4]
 800aa56:	2301      	movs	r3, #1
 800aa58:	9300      	str	r3, [sp, #0]
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	2201      	movs	r2, #1
 800aa5e:	68f8      	ldr	r0, [r7, #12]
 800aa60:	f000 fb03 	bl	800b06a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800aa64:	2300      	movs	r3, #0

}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3710      	adds	r7, #16
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}

0800aa6e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800aa6e:	b580      	push	{r7, lr}
 800aa70:	b088      	sub	sp, #32
 800aa72:	af04      	add	r7, sp, #16
 800aa74:	60f8      	str	r0, [r7, #12]
 800aa76:	60b9      	str	r1, [r7, #8]
 800aa78:	4611      	mov	r1, r2
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	460b      	mov	r3, r1
 800aa7e:	80fb      	strh	r3, [r7, #6]
 800aa80:	4613      	mov	r3, r2
 800aa82:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d001      	beq.n	800aa92 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aa92:	7979      	ldrb	r1, [r7, #5]
 800aa94:	7e3b      	ldrb	r3, [r7, #24]
 800aa96:	9303      	str	r3, [sp, #12]
 800aa98:	88fb      	ldrh	r3, [r7, #6]
 800aa9a:	9302      	str	r3, [sp, #8]
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	9301      	str	r3, [sp, #4]
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	9300      	str	r3, [sp, #0]
 800aaa4:	2302      	movs	r3, #2
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	68f8      	ldr	r0, [r7, #12]
 800aaaa:	f000 fade 	bl	800b06a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800aaae:	2300      	movs	r3, #0
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3710      	adds	r7, #16
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b088      	sub	sp, #32
 800aabc:	af04      	add	r7, sp, #16
 800aabe:	60f8      	str	r0, [r7, #12]
 800aac0:	60b9      	str	r1, [r7, #8]
 800aac2:	4611      	mov	r1, r2
 800aac4:	461a      	mov	r2, r3
 800aac6:	460b      	mov	r3, r1
 800aac8:	80fb      	strh	r3, [r7, #6]
 800aaca:	4613      	mov	r3, r2
 800aacc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aace:	7979      	ldrb	r1, [r7, #5]
 800aad0:	2300      	movs	r3, #0
 800aad2:	9303      	str	r3, [sp, #12]
 800aad4:	88fb      	ldrh	r3, [r7, #6]
 800aad6:	9302      	str	r3, [sp, #8]
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	9301      	str	r3, [sp, #4]
 800aadc:	2301      	movs	r3, #1
 800aade:	9300      	str	r3, [sp, #0]
 800aae0:	2302      	movs	r3, #2
 800aae2:	2201      	movs	r2, #1
 800aae4:	68f8      	ldr	r0, [r7, #12]
 800aae6:	f000 fac0 	bl	800b06a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800aaea:	2300      	movs	r3, #0
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3710      	adds	r7, #16
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}

0800aaf4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b086      	sub	sp, #24
 800aaf8:	af04      	add	r7, sp, #16
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	4608      	mov	r0, r1
 800aafe:	4611      	mov	r1, r2
 800ab00:	461a      	mov	r2, r3
 800ab02:	4603      	mov	r3, r0
 800ab04:	70fb      	strb	r3, [r7, #3]
 800ab06:	460b      	mov	r3, r1
 800ab08:	70bb      	strb	r3, [r7, #2]
 800ab0a:	4613      	mov	r3, r2
 800ab0c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ab0e:	7878      	ldrb	r0, [r7, #1]
 800ab10:	78ba      	ldrb	r2, [r7, #2]
 800ab12:	78f9      	ldrb	r1, [r7, #3]
 800ab14:	8b3b      	ldrh	r3, [r7, #24]
 800ab16:	9302      	str	r3, [sp, #8]
 800ab18:	7d3b      	ldrb	r3, [r7, #20]
 800ab1a:	9301      	str	r3, [sp, #4]
 800ab1c:	7c3b      	ldrb	r3, [r7, #16]
 800ab1e:	9300      	str	r3, [sp, #0]
 800ab20:	4603      	mov	r3, r0
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f000 fa53 	bl	800afce <USBH_LL_OpenPipe>

  return USBH_OK;
 800ab28:	2300      	movs	r3, #0
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3708      	adds	r7, #8
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}

0800ab32 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ab32:	b580      	push	{r7, lr}
 800ab34:	b082      	sub	sp, #8
 800ab36:	af00      	add	r7, sp, #0
 800ab38:	6078      	str	r0, [r7, #4]
 800ab3a:	460b      	mov	r3, r1
 800ab3c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800ab3e:	78fb      	ldrb	r3, [r7, #3]
 800ab40:	4619      	mov	r1, r3
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f000 fa72 	bl	800b02c <USBH_LL_ClosePipe>

  return USBH_OK;
 800ab48:	2300      	movs	r3, #0
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3708      	adds	r7, #8
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}

0800ab52 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ab52:	b580      	push	{r7, lr}
 800ab54:	b084      	sub	sp, #16
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	6078      	str	r0, [r7, #4]
 800ab5a:	460b      	mov	r3, r1
 800ab5c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f000 f836 	bl	800abd0 <USBH_GetFreePipe>
 800ab64:	4603      	mov	r3, r0
 800ab66:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ab68:	89fb      	ldrh	r3, [r7, #14]
 800ab6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d00a      	beq.n	800ab88 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800ab72:	78fa      	ldrb	r2, [r7, #3]
 800ab74:	89fb      	ldrh	r3, [r7, #14]
 800ab76:	f003 030f 	and.w	r3, r3, #15
 800ab7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ab7e:	6879      	ldr	r1, [r7, #4]
 800ab80:	33e0      	adds	r3, #224	; 0xe0
 800ab82:	009b      	lsls	r3, r3, #2
 800ab84:	440b      	add	r3, r1
 800ab86:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ab88:	89fb      	ldrh	r3, [r7, #14]
 800ab8a:	b2db      	uxtb	r3, r3
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3710      	adds	r7, #16
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}

0800ab94 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b083      	sub	sp, #12
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	460b      	mov	r3, r1
 800ab9e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800aba0:	78fb      	ldrb	r3, [r7, #3]
 800aba2:	2b0f      	cmp	r3, #15
 800aba4:	d80d      	bhi.n	800abc2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800aba6:	78fb      	ldrb	r3, [r7, #3]
 800aba8:	687a      	ldr	r2, [r7, #4]
 800abaa:	33e0      	adds	r3, #224	; 0xe0
 800abac:	009b      	lsls	r3, r3, #2
 800abae:	4413      	add	r3, r2
 800abb0:	685a      	ldr	r2, [r3, #4]
 800abb2:	78fb      	ldrb	r3, [r7, #3]
 800abb4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800abb8:	6879      	ldr	r1, [r7, #4]
 800abba:	33e0      	adds	r3, #224	; 0xe0
 800abbc:	009b      	lsls	r3, r3, #2
 800abbe:	440b      	add	r3, r1
 800abc0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800abc2:	2300      	movs	r3, #0
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	370c      	adds	r7, #12
 800abc8:	46bd      	mov	sp, r7
 800abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abce:	4770      	bx	lr

0800abd0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800abd0:	b480      	push	{r7}
 800abd2:	b085      	sub	sp, #20
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800abd8:	2300      	movs	r3, #0
 800abda:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800abdc:	2300      	movs	r3, #0
 800abde:	73fb      	strb	r3, [r7, #15]
 800abe0:	e00f      	b.n	800ac02 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800abe2:	7bfb      	ldrb	r3, [r7, #15]
 800abe4:	687a      	ldr	r2, [r7, #4]
 800abe6:	33e0      	adds	r3, #224	; 0xe0
 800abe8:	009b      	lsls	r3, r3, #2
 800abea:	4413      	add	r3, r2
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d102      	bne.n	800abfc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800abf6:	7bfb      	ldrb	r3, [r7, #15]
 800abf8:	b29b      	uxth	r3, r3
 800abfa:	e007      	b.n	800ac0c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800abfc:	7bfb      	ldrb	r3, [r7, #15]
 800abfe:	3301      	adds	r3, #1
 800ac00:	73fb      	strb	r3, [r7, #15]
 800ac02:	7bfb      	ldrb	r3, [r7, #15]
 800ac04:	2b0f      	cmp	r3, #15
 800ac06:	d9ec      	bls.n	800abe2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ac08:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3714      	adds	r7, #20
 800ac10:	46bd      	mov	sp, r7
 800ac12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac16:	4770      	bx	lr

0800ac18 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ac1c:	2201      	movs	r2, #1
 800ac1e:	490e      	ldr	r1, [pc, #56]	; (800ac58 <MX_USB_HOST_Init+0x40>)
 800ac20:	480e      	ldr	r0, [pc, #56]	; (800ac5c <MX_USB_HOST_Init+0x44>)
 800ac22:	f7fe fba5 	bl	8009370 <USBH_Init>
 800ac26:	4603      	mov	r3, r0
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d001      	beq.n	800ac30 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ac2c:	f7f6 f8fc 	bl	8000e28 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800ac30:	490b      	ldr	r1, [pc, #44]	; (800ac60 <MX_USB_HOST_Init+0x48>)
 800ac32:	480a      	ldr	r0, [pc, #40]	; (800ac5c <MX_USB_HOST_Init+0x44>)
 800ac34:	f7fe fc2a 	bl	800948c <USBH_RegisterClass>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d001      	beq.n	800ac42 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ac3e:	f7f6 f8f3 	bl	8000e28 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ac42:	4806      	ldr	r0, [pc, #24]	; (800ac5c <MX_USB_HOST_Init+0x44>)
 800ac44:	f7fe fcae 	bl	80095a4 <USBH_Start>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d001      	beq.n	800ac52 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ac4e:	f7f6 f8eb 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ac52:	bf00      	nop
 800ac54:	bd80      	pop	{r7, pc}
 800ac56:	bf00      	nop
 800ac58:	0800ac79 	.word	0x0800ac79
 800ac5c:	20000290 	.word	0x20000290
 800ac60:	2000000c 	.word	0x2000000c

0800ac64 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800ac68:	4802      	ldr	r0, [pc, #8]	; (800ac74 <MX_USB_HOST_Process+0x10>)
 800ac6a:	f7fe fcab 	bl	80095c4 <USBH_Process>
}
 800ac6e:	bf00      	nop
 800ac70:	bd80      	pop	{r7, pc}
 800ac72:	bf00      	nop
 800ac74:	20000290 	.word	0x20000290

0800ac78 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b083      	sub	sp, #12
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
 800ac80:	460b      	mov	r3, r1
 800ac82:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ac84:	78fb      	ldrb	r3, [r7, #3]
 800ac86:	3b01      	subs	r3, #1
 800ac88:	2b04      	cmp	r3, #4
 800ac8a:	d819      	bhi.n	800acc0 <USBH_UserProcess+0x48>
 800ac8c:	a201      	add	r2, pc, #4	; (adr r2, 800ac94 <USBH_UserProcess+0x1c>)
 800ac8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac92:	bf00      	nop
 800ac94:	0800acc1 	.word	0x0800acc1
 800ac98:	0800acb1 	.word	0x0800acb1
 800ac9c:	0800acc1 	.word	0x0800acc1
 800aca0:	0800acb9 	.word	0x0800acb9
 800aca4:	0800aca9 	.word	0x0800aca9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800aca8:	4b09      	ldr	r3, [pc, #36]	; (800acd0 <USBH_UserProcess+0x58>)
 800acaa:	2203      	movs	r2, #3
 800acac:	701a      	strb	r2, [r3, #0]
  break;
 800acae:	e008      	b.n	800acc2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800acb0:	4b07      	ldr	r3, [pc, #28]	; (800acd0 <USBH_UserProcess+0x58>)
 800acb2:	2202      	movs	r2, #2
 800acb4:	701a      	strb	r2, [r3, #0]
  break;
 800acb6:	e004      	b.n	800acc2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800acb8:	4b05      	ldr	r3, [pc, #20]	; (800acd0 <USBH_UserProcess+0x58>)
 800acba:	2201      	movs	r2, #1
 800acbc:	701a      	strb	r2, [r3, #0]
  break;
 800acbe:	e000      	b.n	800acc2 <USBH_UserProcess+0x4a>

  default:
  break;
 800acc0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800acc2:	bf00      	nop
 800acc4:	370c      	adds	r7, #12
 800acc6:	46bd      	mov	sp, r7
 800acc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800accc:	4770      	bx	lr
 800acce:	bf00      	nop
 800acd0:	20000668 	.word	0x20000668

0800acd4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b08a      	sub	sp, #40	; 0x28
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800acdc:	f107 0314 	add.w	r3, r7, #20
 800ace0:	2200      	movs	r2, #0
 800ace2:	601a      	str	r2, [r3, #0]
 800ace4:	605a      	str	r2, [r3, #4]
 800ace6:	609a      	str	r2, [r3, #8]
 800ace8:	60da      	str	r2, [r3, #12]
 800acea:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800acf4:	d147      	bne.n	800ad86 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800acf6:	2300      	movs	r3, #0
 800acf8:	613b      	str	r3, [r7, #16]
 800acfa:	4b25      	ldr	r3, [pc, #148]	; (800ad90 <HAL_HCD_MspInit+0xbc>)
 800acfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acfe:	4a24      	ldr	r2, [pc, #144]	; (800ad90 <HAL_HCD_MspInit+0xbc>)
 800ad00:	f043 0301 	orr.w	r3, r3, #1
 800ad04:	6313      	str	r3, [r2, #48]	; 0x30
 800ad06:	4b22      	ldr	r3, [pc, #136]	; (800ad90 <HAL_HCD_MspInit+0xbc>)
 800ad08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad0a:	f003 0301 	and.w	r3, r3, #1
 800ad0e:	613b      	str	r3, [r7, #16]
 800ad10:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800ad12:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ad18:	2300      	movs	r3, #0
 800ad1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ad20:	f107 0314 	add.w	r3, r7, #20
 800ad24:	4619      	mov	r1, r3
 800ad26:	481b      	ldr	r0, [pc, #108]	; (800ad94 <HAL_HCD_MspInit+0xc0>)
 800ad28:	f7f7 fc4e 	bl	80025c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800ad2c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800ad30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad32:	2302      	movs	r3, #2
 800ad34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad36:	2300      	movs	r3, #0
 800ad38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ad3e:	230a      	movs	r3, #10
 800ad40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad42:	f107 0314 	add.w	r3, r7, #20
 800ad46:	4619      	mov	r1, r3
 800ad48:	4812      	ldr	r0, [pc, #72]	; (800ad94 <HAL_HCD_MspInit+0xc0>)
 800ad4a:	f7f7 fc3d 	bl	80025c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ad4e:	4b10      	ldr	r3, [pc, #64]	; (800ad90 <HAL_HCD_MspInit+0xbc>)
 800ad50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad52:	4a0f      	ldr	r2, [pc, #60]	; (800ad90 <HAL_HCD_MspInit+0xbc>)
 800ad54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad58:	6353      	str	r3, [r2, #52]	; 0x34
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	60fb      	str	r3, [r7, #12]
 800ad5e:	4b0c      	ldr	r3, [pc, #48]	; (800ad90 <HAL_HCD_MspInit+0xbc>)
 800ad60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad62:	4a0b      	ldr	r2, [pc, #44]	; (800ad90 <HAL_HCD_MspInit+0xbc>)
 800ad64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ad68:	6453      	str	r3, [r2, #68]	; 0x44
 800ad6a:	4b09      	ldr	r3, [pc, #36]	; (800ad90 <HAL_HCD_MspInit+0xbc>)
 800ad6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad72:	60fb      	str	r3, [r7, #12]
 800ad74:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ad76:	2200      	movs	r2, #0
 800ad78:	2100      	movs	r1, #0
 800ad7a:	2043      	movs	r0, #67	; 0x43
 800ad7c:	f7f7 fb5b 	bl	8002436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ad80:	2043      	movs	r0, #67	; 0x43
 800ad82:	f7f7 fb74 	bl	800246e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ad86:	bf00      	nop
 800ad88:	3728      	adds	r7, #40	; 0x28
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}
 800ad8e:	bf00      	nop
 800ad90:	40023800 	.word	0x40023800
 800ad94:	40020000 	.word	0x40020000

0800ad98 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b082      	sub	sp, #8
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ada6:	4618      	mov	r0, r3
 800ada8:	f7fe ffeb 	bl	8009d82 <USBH_LL_IncTimer>
}
 800adac:	bf00      	nop
 800adae:	3708      	adds	r7, #8
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}

0800adb4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b082      	sub	sp, #8
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800adc2:	4618      	mov	r0, r3
 800adc4:	f7ff f823 	bl	8009e0e <USBH_LL_Connect>
}
 800adc8:	bf00      	nop
 800adca:	3708      	adds	r7, #8
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b082      	sub	sp, #8
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800adde:	4618      	mov	r0, r3
 800ade0:	f7ff f82c 	bl	8009e3c <USBH_LL_Disconnect>
}
 800ade4:	bf00      	nop
 800ade6:	3708      	adds	r7, #8
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800adec:	b480      	push	{r7}
 800adee:	b083      	sub	sp, #12
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
 800adf4:	460b      	mov	r3, r1
 800adf6:	70fb      	strb	r3, [r7, #3]
 800adf8:	4613      	mov	r3, r2
 800adfa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800adfc:	bf00      	nop
 800adfe:	370c      	adds	r7, #12
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr

0800ae08 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b082      	sub	sp, #8
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ae16:	4618      	mov	r0, r3
 800ae18:	f7fe ffdd 	bl	8009dd6 <USBH_LL_PortEnabled>
}
 800ae1c:	bf00      	nop
 800ae1e:	3708      	adds	r7, #8
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}

0800ae24 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b082      	sub	sp, #8
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ae32:	4618      	mov	r0, r3
 800ae34:	f7fe ffdd 	bl	8009df2 <USBH_LL_PortDisabled>
}
 800ae38:	bf00      	nop
 800ae3a:	3708      	adds	r7, #8
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b082      	sub	sp, #8
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ae4e:	2b01      	cmp	r3, #1
 800ae50:	d12a      	bne.n	800aea8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800ae52:	4a18      	ldr	r2, [pc, #96]	; (800aeb4 <USBH_LL_Init+0x74>)
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	4a15      	ldr	r2, [pc, #84]	; (800aeb4 <USBH_LL_Init+0x74>)
 800ae5e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ae62:	4b14      	ldr	r3, [pc, #80]	; (800aeb4 <USBH_LL_Init+0x74>)
 800ae64:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ae68:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800ae6a:	4b12      	ldr	r3, [pc, #72]	; (800aeb4 <USBH_LL_Init+0x74>)
 800ae6c:	2208      	movs	r2, #8
 800ae6e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ae70:	4b10      	ldr	r3, [pc, #64]	; (800aeb4 <USBH_LL_Init+0x74>)
 800ae72:	2201      	movs	r2, #1
 800ae74:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ae76:	4b0f      	ldr	r3, [pc, #60]	; (800aeb4 <USBH_LL_Init+0x74>)
 800ae78:	2200      	movs	r2, #0
 800ae7a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ae7c:	4b0d      	ldr	r3, [pc, #52]	; (800aeb4 <USBH_LL_Init+0x74>)
 800ae7e:	2202      	movs	r2, #2
 800ae80:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ae82:	4b0c      	ldr	r3, [pc, #48]	; (800aeb4 <USBH_LL_Init+0x74>)
 800ae84:	2200      	movs	r2, #0
 800ae86:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ae88:	480a      	ldr	r0, [pc, #40]	; (800aeb4 <USBH_LL_Init+0x74>)
 800ae8a:	f7f7 fd52 	bl	8002932 <HAL_HCD_Init>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d001      	beq.n	800ae98 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ae94:	f7f5 ffc8 	bl	8000e28 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ae98:	4806      	ldr	r0, [pc, #24]	; (800aeb4 <USBH_LL_Init+0x74>)
 800ae9a:	f7f8 f936 	bl	800310a <HAL_HCD_GetCurrentFrame>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	4619      	mov	r1, r3
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f7fe ff5e 	bl	8009d64 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800aea8:	2300      	movs	r3, #0
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	3708      	adds	r7, #8
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}
 800aeb2:	bf00      	nop
 800aeb4:	2000066c 	.word	0x2000066c

0800aeb8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b084      	sub	sp, #16
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aec0:	2300      	movs	r3, #0
 800aec2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aec4:	2300      	movs	r3, #0
 800aec6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aece:	4618      	mov	r0, r3
 800aed0:	f7f8 f8a5 	bl	800301e <HAL_HCD_Start>
 800aed4:	4603      	mov	r3, r0
 800aed6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aed8:	7bfb      	ldrb	r3, [r7, #15]
 800aeda:	4618      	mov	r0, r3
 800aedc:	f000 f95c 	bl	800b198 <USBH_Get_USB_Status>
 800aee0:	4603      	mov	r3, r0
 800aee2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aee4:	7bbb      	ldrb	r3, [r7, #14]
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	3710      	adds	r7, #16
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}

0800aeee <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800aeee:	b580      	push	{r7, lr}
 800aef0:	b084      	sub	sp, #16
 800aef2:	af00      	add	r7, sp, #0
 800aef4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aef6:	2300      	movs	r3, #0
 800aef8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aefa:	2300      	movs	r3, #0
 800aefc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800af04:	4618      	mov	r0, r3
 800af06:	f7f8 f8ad 	bl	8003064 <HAL_HCD_Stop>
 800af0a:	4603      	mov	r3, r0
 800af0c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800af0e:	7bfb      	ldrb	r3, [r7, #15]
 800af10:	4618      	mov	r0, r3
 800af12:	f000 f941 	bl	800b198 <USBH_Get_USB_Status>
 800af16:	4603      	mov	r3, r0
 800af18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af1a:	7bbb      	ldrb	r3, [r7, #14]
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3710      	adds	r7, #16
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}

0800af24 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b084      	sub	sp, #16
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800af2c:	2301      	movs	r3, #1
 800af2e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800af36:	4618      	mov	r0, r3
 800af38:	f7f8 f8f5 	bl	8003126 <HAL_HCD_GetCurrentSpeed>
 800af3c:	4603      	mov	r3, r0
 800af3e:	2b02      	cmp	r3, #2
 800af40:	d00c      	beq.n	800af5c <USBH_LL_GetSpeed+0x38>
 800af42:	2b02      	cmp	r3, #2
 800af44:	d80d      	bhi.n	800af62 <USBH_LL_GetSpeed+0x3e>
 800af46:	2b00      	cmp	r3, #0
 800af48:	d002      	beq.n	800af50 <USBH_LL_GetSpeed+0x2c>
 800af4a:	2b01      	cmp	r3, #1
 800af4c:	d003      	beq.n	800af56 <USBH_LL_GetSpeed+0x32>
 800af4e:	e008      	b.n	800af62 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800af50:	2300      	movs	r3, #0
 800af52:	73fb      	strb	r3, [r7, #15]
    break;
 800af54:	e008      	b.n	800af68 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800af56:	2301      	movs	r3, #1
 800af58:	73fb      	strb	r3, [r7, #15]
    break;
 800af5a:	e005      	b.n	800af68 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800af5c:	2302      	movs	r3, #2
 800af5e:	73fb      	strb	r3, [r7, #15]
    break;
 800af60:	e002      	b.n	800af68 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800af62:	2301      	movs	r3, #1
 800af64:	73fb      	strb	r3, [r7, #15]
    break;
 800af66:	bf00      	nop
  }
  return  speed;
 800af68:	7bfb      	ldrb	r3, [r7, #15]
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	3710      	adds	r7, #16
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}

0800af72 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800af72:	b580      	push	{r7, lr}
 800af74:	b084      	sub	sp, #16
 800af76:	af00      	add	r7, sp, #0
 800af78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af7a:	2300      	movs	r3, #0
 800af7c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800af7e:	2300      	movs	r3, #0
 800af80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800af88:	4618      	mov	r0, r3
 800af8a:	f7f8 f888 	bl	800309e <HAL_HCD_ResetPort>
 800af8e:	4603      	mov	r3, r0
 800af90:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800af92:	7bfb      	ldrb	r3, [r7, #15]
 800af94:	4618      	mov	r0, r3
 800af96:	f000 f8ff 	bl	800b198 <USBH_Get_USB_Status>
 800af9a:	4603      	mov	r3, r0
 800af9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af9e:	7bbb      	ldrb	r3, [r7, #14]
}
 800afa0:	4618      	mov	r0, r3
 800afa2:	3710      	adds	r7, #16
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}

0800afa8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b082      	sub	sp, #8
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	460b      	mov	r3, r1
 800afb2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800afba:	78fa      	ldrb	r2, [r7, #3]
 800afbc:	4611      	mov	r1, r2
 800afbe:	4618      	mov	r0, r3
 800afc0:	f7f8 f88f 	bl	80030e2 <HAL_HCD_HC_GetXferCount>
 800afc4:	4603      	mov	r3, r0
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3708      	adds	r7, #8
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}

0800afce <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800afce:	b590      	push	{r4, r7, lr}
 800afd0:	b089      	sub	sp, #36	; 0x24
 800afd2:	af04      	add	r7, sp, #16
 800afd4:	6078      	str	r0, [r7, #4]
 800afd6:	4608      	mov	r0, r1
 800afd8:	4611      	mov	r1, r2
 800afda:	461a      	mov	r2, r3
 800afdc:	4603      	mov	r3, r0
 800afde:	70fb      	strb	r3, [r7, #3]
 800afe0:	460b      	mov	r3, r1
 800afe2:	70bb      	strb	r3, [r7, #2]
 800afe4:	4613      	mov	r3, r2
 800afe6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afe8:	2300      	movs	r3, #0
 800afea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800afec:	2300      	movs	r3, #0
 800afee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800aff6:	787c      	ldrb	r4, [r7, #1]
 800aff8:	78ba      	ldrb	r2, [r7, #2]
 800affa:	78f9      	ldrb	r1, [r7, #3]
 800affc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800affe:	9302      	str	r3, [sp, #8]
 800b000:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b004:	9301      	str	r3, [sp, #4]
 800b006:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b00a:	9300      	str	r3, [sp, #0]
 800b00c:	4623      	mov	r3, r4
 800b00e:	f7f7 fcf2 	bl	80029f6 <HAL_HCD_HC_Init>
 800b012:	4603      	mov	r3, r0
 800b014:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b016:	7bfb      	ldrb	r3, [r7, #15]
 800b018:	4618      	mov	r0, r3
 800b01a:	f000 f8bd 	bl	800b198 <USBH_Get_USB_Status>
 800b01e:	4603      	mov	r3, r0
 800b020:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b022:	7bbb      	ldrb	r3, [r7, #14]
}
 800b024:	4618      	mov	r0, r3
 800b026:	3714      	adds	r7, #20
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd90      	pop	{r4, r7, pc}

0800b02c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b084      	sub	sp, #16
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	460b      	mov	r3, r1
 800b036:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b038:	2300      	movs	r3, #0
 800b03a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b03c:	2300      	movs	r3, #0
 800b03e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b046:	78fa      	ldrb	r2, [r7, #3]
 800b048:	4611      	mov	r1, r2
 800b04a:	4618      	mov	r0, r3
 800b04c:	f7f7 fd62 	bl	8002b14 <HAL_HCD_HC_Halt>
 800b050:	4603      	mov	r3, r0
 800b052:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b054:	7bfb      	ldrb	r3, [r7, #15]
 800b056:	4618      	mov	r0, r3
 800b058:	f000 f89e 	bl	800b198 <USBH_Get_USB_Status>
 800b05c:	4603      	mov	r3, r0
 800b05e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b060:	7bbb      	ldrb	r3, [r7, #14]
}
 800b062:	4618      	mov	r0, r3
 800b064:	3710      	adds	r7, #16
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}

0800b06a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b06a:	b590      	push	{r4, r7, lr}
 800b06c:	b089      	sub	sp, #36	; 0x24
 800b06e:	af04      	add	r7, sp, #16
 800b070:	6078      	str	r0, [r7, #4]
 800b072:	4608      	mov	r0, r1
 800b074:	4611      	mov	r1, r2
 800b076:	461a      	mov	r2, r3
 800b078:	4603      	mov	r3, r0
 800b07a:	70fb      	strb	r3, [r7, #3]
 800b07c:	460b      	mov	r3, r1
 800b07e:	70bb      	strb	r3, [r7, #2]
 800b080:	4613      	mov	r3, r2
 800b082:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b084:	2300      	movs	r3, #0
 800b086:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b088:	2300      	movs	r3, #0
 800b08a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b092:	787c      	ldrb	r4, [r7, #1]
 800b094:	78ba      	ldrb	r2, [r7, #2]
 800b096:	78f9      	ldrb	r1, [r7, #3]
 800b098:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b09c:	9303      	str	r3, [sp, #12]
 800b09e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b0a0:	9302      	str	r3, [sp, #8]
 800b0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a4:	9301      	str	r3, [sp, #4]
 800b0a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b0aa:	9300      	str	r3, [sp, #0]
 800b0ac:	4623      	mov	r3, r4
 800b0ae:	f7f7 fd55 	bl	8002b5c <HAL_HCD_HC_SubmitRequest>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b0b6:	7bfb      	ldrb	r3, [r7, #15]
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f000 f86d 	bl	800b198 <USBH_Get_USB_Status>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	3714      	adds	r7, #20
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd90      	pop	{r4, r7, pc}

0800b0cc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b082      	sub	sp, #8
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
 800b0d4:	460b      	mov	r3, r1
 800b0d6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b0de:	78fa      	ldrb	r2, [r7, #3]
 800b0e0:	4611      	mov	r1, r2
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f7f7 ffe9 	bl	80030ba <HAL_HCD_HC_GetURBState>
 800b0e8:	4603      	mov	r3, r0
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3708      	adds	r7, #8
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}

0800b0f2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b0f2:	b580      	push	{r7, lr}
 800b0f4:	b082      	sub	sp, #8
 800b0f6:	af00      	add	r7, sp, #0
 800b0f8:	6078      	str	r0, [r7, #4]
 800b0fa:	460b      	mov	r3, r1
 800b0fc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b104:	2b01      	cmp	r3, #1
 800b106:	d103      	bne.n	800b110 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b108:	78fb      	ldrb	r3, [r7, #3]
 800b10a:	4618      	mov	r0, r3
 800b10c:	f000 f870 	bl	800b1f0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b110:	20c8      	movs	r0, #200	; 0xc8
 800b112:	f7f6 fa77 	bl	8001604 <HAL_Delay>
  return USBH_OK;
 800b116:	2300      	movs	r3, #0
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3708      	adds	r7, #8
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}

0800b120 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b120:	b480      	push	{r7}
 800b122:	b085      	sub	sp, #20
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
 800b128:	460b      	mov	r3, r1
 800b12a:	70fb      	strb	r3, [r7, #3]
 800b12c:	4613      	mov	r3, r2
 800b12e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b136:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b138:	78fb      	ldrb	r3, [r7, #3]
 800b13a:	68fa      	ldr	r2, [r7, #12]
 800b13c:	212c      	movs	r1, #44	; 0x2c
 800b13e:	fb01 f303 	mul.w	r3, r1, r3
 800b142:	4413      	add	r3, r2
 800b144:	333b      	adds	r3, #59	; 0x3b
 800b146:	781b      	ldrb	r3, [r3, #0]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d009      	beq.n	800b160 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b14c:	78fb      	ldrb	r3, [r7, #3]
 800b14e:	68fa      	ldr	r2, [r7, #12]
 800b150:	212c      	movs	r1, #44	; 0x2c
 800b152:	fb01 f303 	mul.w	r3, r1, r3
 800b156:	4413      	add	r3, r2
 800b158:	3354      	adds	r3, #84	; 0x54
 800b15a:	78ba      	ldrb	r2, [r7, #2]
 800b15c:	701a      	strb	r2, [r3, #0]
 800b15e:	e008      	b.n	800b172 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b160:	78fb      	ldrb	r3, [r7, #3]
 800b162:	68fa      	ldr	r2, [r7, #12]
 800b164:	212c      	movs	r1, #44	; 0x2c
 800b166:	fb01 f303 	mul.w	r3, r1, r3
 800b16a:	4413      	add	r3, r2
 800b16c:	3355      	adds	r3, #85	; 0x55
 800b16e:	78ba      	ldrb	r2, [r7, #2]
 800b170:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b172:	2300      	movs	r3, #0
}
 800b174:	4618      	mov	r0, r3
 800b176:	3714      	adds	r7, #20
 800b178:	46bd      	mov	sp, r7
 800b17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17e:	4770      	bx	lr

0800b180 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b082      	sub	sp, #8
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f7f6 fa3b 	bl	8001604 <HAL_Delay>
}
 800b18e:	bf00      	nop
 800b190:	3708      	adds	r7, #8
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
	...

0800b198 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b198:	b480      	push	{r7}
 800b19a:	b085      	sub	sp, #20
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	4603      	mov	r3, r0
 800b1a0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b1a6:	79fb      	ldrb	r3, [r7, #7]
 800b1a8:	2b03      	cmp	r3, #3
 800b1aa:	d817      	bhi.n	800b1dc <USBH_Get_USB_Status+0x44>
 800b1ac:	a201      	add	r2, pc, #4	; (adr r2, 800b1b4 <USBH_Get_USB_Status+0x1c>)
 800b1ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1b2:	bf00      	nop
 800b1b4:	0800b1c5 	.word	0x0800b1c5
 800b1b8:	0800b1cb 	.word	0x0800b1cb
 800b1bc:	0800b1d1 	.word	0x0800b1d1
 800b1c0:	0800b1d7 	.word	0x0800b1d7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	73fb      	strb	r3, [r7, #15]
    break;
 800b1c8:	e00b      	b.n	800b1e2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b1ca:	2302      	movs	r3, #2
 800b1cc:	73fb      	strb	r3, [r7, #15]
    break;
 800b1ce:	e008      	b.n	800b1e2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	73fb      	strb	r3, [r7, #15]
    break;
 800b1d4:	e005      	b.n	800b1e2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b1d6:	2302      	movs	r3, #2
 800b1d8:	73fb      	strb	r3, [r7, #15]
    break;
 800b1da:	e002      	b.n	800b1e2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b1dc:	2302      	movs	r3, #2
 800b1de:	73fb      	strb	r3, [r7, #15]
    break;
 800b1e0:	bf00      	nop
  }
  return usb_status;
 800b1e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3714      	adds	r7, #20
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ee:	4770      	bx	lr

0800b1f0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b084      	sub	sp, #16
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b1fa:	79fb      	ldrb	r3, [r7, #7]
 800b1fc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b1fe:	79fb      	ldrb	r3, [r7, #7]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d102      	bne.n	800b20a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b204:	2300      	movs	r3, #0
 800b206:	73fb      	strb	r3, [r7, #15]
 800b208:	e001      	b.n	800b20e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b20a:	2301      	movs	r3, #1
 800b20c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b20e:	7bfb      	ldrb	r3, [r7, #15]
 800b210:	461a      	mov	r2, r3
 800b212:	2101      	movs	r1, #1
 800b214:	4803      	ldr	r0, [pc, #12]	; (800b224 <MX_DriverVbusFS+0x34>)
 800b216:	f7f7 fb73 	bl	8002900 <HAL_GPIO_WritePin>
}
 800b21a:	bf00      	nop
 800b21c:	3710      	adds	r7, #16
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
 800b222:	bf00      	nop
 800b224:	40020800 	.word	0x40020800

0800b228 <malloc>:
 800b228:	4b02      	ldr	r3, [pc, #8]	; (800b234 <malloc+0xc>)
 800b22a:	4601      	mov	r1, r0
 800b22c:	6818      	ldr	r0, [r3, #0]
 800b22e:	f000 b82b 	b.w	800b288 <_malloc_r>
 800b232:	bf00      	nop
 800b234:	20000078 	.word	0x20000078

0800b238 <free>:
 800b238:	4b02      	ldr	r3, [pc, #8]	; (800b244 <free+0xc>)
 800b23a:	4601      	mov	r1, r0
 800b23c:	6818      	ldr	r0, [r3, #0]
 800b23e:	f000 b8f3 	b.w	800b428 <_free_r>
 800b242:	bf00      	nop
 800b244:	20000078 	.word	0x20000078

0800b248 <sbrk_aligned>:
 800b248:	b570      	push	{r4, r5, r6, lr}
 800b24a:	4e0e      	ldr	r6, [pc, #56]	; (800b284 <sbrk_aligned+0x3c>)
 800b24c:	460c      	mov	r4, r1
 800b24e:	6831      	ldr	r1, [r6, #0]
 800b250:	4605      	mov	r5, r0
 800b252:	b911      	cbnz	r1, 800b25a <sbrk_aligned+0x12>
 800b254:	f000 f8ac 	bl	800b3b0 <_sbrk_r>
 800b258:	6030      	str	r0, [r6, #0]
 800b25a:	4621      	mov	r1, r4
 800b25c:	4628      	mov	r0, r5
 800b25e:	f000 f8a7 	bl	800b3b0 <_sbrk_r>
 800b262:	1c43      	adds	r3, r0, #1
 800b264:	d00a      	beq.n	800b27c <sbrk_aligned+0x34>
 800b266:	1cc4      	adds	r4, r0, #3
 800b268:	f024 0403 	bic.w	r4, r4, #3
 800b26c:	42a0      	cmp	r0, r4
 800b26e:	d007      	beq.n	800b280 <sbrk_aligned+0x38>
 800b270:	1a21      	subs	r1, r4, r0
 800b272:	4628      	mov	r0, r5
 800b274:	f000 f89c 	bl	800b3b0 <_sbrk_r>
 800b278:	3001      	adds	r0, #1
 800b27a:	d101      	bne.n	800b280 <sbrk_aligned+0x38>
 800b27c:	f04f 34ff 	mov.w	r4, #4294967295
 800b280:	4620      	mov	r0, r4
 800b282:	bd70      	pop	{r4, r5, r6, pc}
 800b284:	20000974 	.word	0x20000974

0800b288 <_malloc_r>:
 800b288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b28c:	1ccd      	adds	r5, r1, #3
 800b28e:	f025 0503 	bic.w	r5, r5, #3
 800b292:	3508      	adds	r5, #8
 800b294:	2d0c      	cmp	r5, #12
 800b296:	bf38      	it	cc
 800b298:	250c      	movcc	r5, #12
 800b29a:	2d00      	cmp	r5, #0
 800b29c:	4607      	mov	r7, r0
 800b29e:	db01      	blt.n	800b2a4 <_malloc_r+0x1c>
 800b2a0:	42a9      	cmp	r1, r5
 800b2a2:	d905      	bls.n	800b2b0 <_malloc_r+0x28>
 800b2a4:	230c      	movs	r3, #12
 800b2a6:	603b      	str	r3, [r7, #0]
 800b2a8:	2600      	movs	r6, #0
 800b2aa:	4630      	mov	r0, r6
 800b2ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b384 <_malloc_r+0xfc>
 800b2b4:	f000 f868 	bl	800b388 <__malloc_lock>
 800b2b8:	f8d8 3000 	ldr.w	r3, [r8]
 800b2bc:	461c      	mov	r4, r3
 800b2be:	bb5c      	cbnz	r4, 800b318 <_malloc_r+0x90>
 800b2c0:	4629      	mov	r1, r5
 800b2c2:	4638      	mov	r0, r7
 800b2c4:	f7ff ffc0 	bl	800b248 <sbrk_aligned>
 800b2c8:	1c43      	adds	r3, r0, #1
 800b2ca:	4604      	mov	r4, r0
 800b2cc:	d155      	bne.n	800b37a <_malloc_r+0xf2>
 800b2ce:	f8d8 4000 	ldr.w	r4, [r8]
 800b2d2:	4626      	mov	r6, r4
 800b2d4:	2e00      	cmp	r6, #0
 800b2d6:	d145      	bne.n	800b364 <_malloc_r+0xdc>
 800b2d8:	2c00      	cmp	r4, #0
 800b2da:	d048      	beq.n	800b36e <_malloc_r+0xe6>
 800b2dc:	6823      	ldr	r3, [r4, #0]
 800b2de:	4631      	mov	r1, r6
 800b2e0:	4638      	mov	r0, r7
 800b2e2:	eb04 0903 	add.w	r9, r4, r3
 800b2e6:	f000 f863 	bl	800b3b0 <_sbrk_r>
 800b2ea:	4581      	cmp	r9, r0
 800b2ec:	d13f      	bne.n	800b36e <_malloc_r+0xe6>
 800b2ee:	6821      	ldr	r1, [r4, #0]
 800b2f0:	1a6d      	subs	r5, r5, r1
 800b2f2:	4629      	mov	r1, r5
 800b2f4:	4638      	mov	r0, r7
 800b2f6:	f7ff ffa7 	bl	800b248 <sbrk_aligned>
 800b2fa:	3001      	adds	r0, #1
 800b2fc:	d037      	beq.n	800b36e <_malloc_r+0xe6>
 800b2fe:	6823      	ldr	r3, [r4, #0]
 800b300:	442b      	add	r3, r5
 800b302:	6023      	str	r3, [r4, #0]
 800b304:	f8d8 3000 	ldr.w	r3, [r8]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d038      	beq.n	800b37e <_malloc_r+0xf6>
 800b30c:	685a      	ldr	r2, [r3, #4]
 800b30e:	42a2      	cmp	r2, r4
 800b310:	d12b      	bne.n	800b36a <_malloc_r+0xe2>
 800b312:	2200      	movs	r2, #0
 800b314:	605a      	str	r2, [r3, #4]
 800b316:	e00f      	b.n	800b338 <_malloc_r+0xb0>
 800b318:	6822      	ldr	r2, [r4, #0]
 800b31a:	1b52      	subs	r2, r2, r5
 800b31c:	d41f      	bmi.n	800b35e <_malloc_r+0xd6>
 800b31e:	2a0b      	cmp	r2, #11
 800b320:	d917      	bls.n	800b352 <_malloc_r+0xca>
 800b322:	1961      	adds	r1, r4, r5
 800b324:	42a3      	cmp	r3, r4
 800b326:	6025      	str	r5, [r4, #0]
 800b328:	bf18      	it	ne
 800b32a:	6059      	strne	r1, [r3, #4]
 800b32c:	6863      	ldr	r3, [r4, #4]
 800b32e:	bf08      	it	eq
 800b330:	f8c8 1000 	streq.w	r1, [r8]
 800b334:	5162      	str	r2, [r4, r5]
 800b336:	604b      	str	r3, [r1, #4]
 800b338:	4638      	mov	r0, r7
 800b33a:	f104 060b 	add.w	r6, r4, #11
 800b33e:	f000 f829 	bl	800b394 <__malloc_unlock>
 800b342:	f026 0607 	bic.w	r6, r6, #7
 800b346:	1d23      	adds	r3, r4, #4
 800b348:	1af2      	subs	r2, r6, r3
 800b34a:	d0ae      	beq.n	800b2aa <_malloc_r+0x22>
 800b34c:	1b9b      	subs	r3, r3, r6
 800b34e:	50a3      	str	r3, [r4, r2]
 800b350:	e7ab      	b.n	800b2aa <_malloc_r+0x22>
 800b352:	42a3      	cmp	r3, r4
 800b354:	6862      	ldr	r2, [r4, #4]
 800b356:	d1dd      	bne.n	800b314 <_malloc_r+0x8c>
 800b358:	f8c8 2000 	str.w	r2, [r8]
 800b35c:	e7ec      	b.n	800b338 <_malloc_r+0xb0>
 800b35e:	4623      	mov	r3, r4
 800b360:	6864      	ldr	r4, [r4, #4]
 800b362:	e7ac      	b.n	800b2be <_malloc_r+0x36>
 800b364:	4634      	mov	r4, r6
 800b366:	6876      	ldr	r6, [r6, #4]
 800b368:	e7b4      	b.n	800b2d4 <_malloc_r+0x4c>
 800b36a:	4613      	mov	r3, r2
 800b36c:	e7cc      	b.n	800b308 <_malloc_r+0x80>
 800b36e:	230c      	movs	r3, #12
 800b370:	603b      	str	r3, [r7, #0]
 800b372:	4638      	mov	r0, r7
 800b374:	f000 f80e 	bl	800b394 <__malloc_unlock>
 800b378:	e797      	b.n	800b2aa <_malloc_r+0x22>
 800b37a:	6025      	str	r5, [r4, #0]
 800b37c:	e7dc      	b.n	800b338 <_malloc_r+0xb0>
 800b37e:	605b      	str	r3, [r3, #4]
 800b380:	deff      	udf	#255	; 0xff
 800b382:	bf00      	nop
 800b384:	20000970 	.word	0x20000970

0800b388 <__malloc_lock>:
 800b388:	4801      	ldr	r0, [pc, #4]	; (800b390 <__malloc_lock+0x8>)
 800b38a:	f000 b84b 	b.w	800b424 <__retarget_lock_acquire_recursive>
 800b38e:	bf00      	nop
 800b390:	20000ab4 	.word	0x20000ab4

0800b394 <__malloc_unlock>:
 800b394:	4801      	ldr	r0, [pc, #4]	; (800b39c <__malloc_unlock+0x8>)
 800b396:	f000 b846 	b.w	800b426 <__retarget_lock_release_recursive>
 800b39a:	bf00      	nop
 800b39c:	20000ab4 	.word	0x20000ab4

0800b3a0 <memset>:
 800b3a0:	4402      	add	r2, r0
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d100      	bne.n	800b3aa <memset+0xa>
 800b3a8:	4770      	bx	lr
 800b3aa:	f803 1b01 	strb.w	r1, [r3], #1
 800b3ae:	e7f9      	b.n	800b3a4 <memset+0x4>

0800b3b0 <_sbrk_r>:
 800b3b0:	b538      	push	{r3, r4, r5, lr}
 800b3b2:	4d06      	ldr	r5, [pc, #24]	; (800b3cc <_sbrk_r+0x1c>)
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	4604      	mov	r4, r0
 800b3b8:	4608      	mov	r0, r1
 800b3ba:	602b      	str	r3, [r5, #0]
 800b3bc:	f7f5 ff9c 	bl	80012f8 <_sbrk>
 800b3c0:	1c43      	adds	r3, r0, #1
 800b3c2:	d102      	bne.n	800b3ca <_sbrk_r+0x1a>
 800b3c4:	682b      	ldr	r3, [r5, #0]
 800b3c6:	b103      	cbz	r3, 800b3ca <_sbrk_r+0x1a>
 800b3c8:	6023      	str	r3, [r4, #0]
 800b3ca:	bd38      	pop	{r3, r4, r5, pc}
 800b3cc:	20000ab0 	.word	0x20000ab0

0800b3d0 <__errno>:
 800b3d0:	4b01      	ldr	r3, [pc, #4]	; (800b3d8 <__errno+0x8>)
 800b3d2:	6818      	ldr	r0, [r3, #0]
 800b3d4:	4770      	bx	lr
 800b3d6:	bf00      	nop
 800b3d8:	20000078 	.word	0x20000078

0800b3dc <__libc_init_array>:
 800b3dc:	b570      	push	{r4, r5, r6, lr}
 800b3de:	4d0d      	ldr	r5, [pc, #52]	; (800b414 <__libc_init_array+0x38>)
 800b3e0:	4c0d      	ldr	r4, [pc, #52]	; (800b418 <__libc_init_array+0x3c>)
 800b3e2:	1b64      	subs	r4, r4, r5
 800b3e4:	10a4      	asrs	r4, r4, #2
 800b3e6:	2600      	movs	r6, #0
 800b3e8:	42a6      	cmp	r6, r4
 800b3ea:	d109      	bne.n	800b400 <__libc_init_array+0x24>
 800b3ec:	4d0b      	ldr	r5, [pc, #44]	; (800b41c <__libc_init_array+0x40>)
 800b3ee:	4c0c      	ldr	r4, [pc, #48]	; (800b420 <__libc_init_array+0x44>)
 800b3f0:	f000 f866 	bl	800b4c0 <_init>
 800b3f4:	1b64      	subs	r4, r4, r5
 800b3f6:	10a4      	asrs	r4, r4, #2
 800b3f8:	2600      	movs	r6, #0
 800b3fa:	42a6      	cmp	r6, r4
 800b3fc:	d105      	bne.n	800b40a <__libc_init_array+0x2e>
 800b3fe:	bd70      	pop	{r4, r5, r6, pc}
 800b400:	f855 3b04 	ldr.w	r3, [r5], #4
 800b404:	4798      	blx	r3
 800b406:	3601      	adds	r6, #1
 800b408:	e7ee      	b.n	800b3e8 <__libc_init_array+0xc>
 800b40a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b40e:	4798      	blx	r3
 800b410:	3601      	adds	r6, #1
 800b412:	e7f2      	b.n	800b3fa <__libc_init_array+0x1e>
 800b414:	0800b4fc 	.word	0x0800b4fc
 800b418:	0800b4fc 	.word	0x0800b4fc
 800b41c:	0800b4fc 	.word	0x0800b4fc
 800b420:	0800b500 	.word	0x0800b500

0800b424 <__retarget_lock_acquire_recursive>:
 800b424:	4770      	bx	lr

0800b426 <__retarget_lock_release_recursive>:
 800b426:	4770      	bx	lr

0800b428 <_free_r>:
 800b428:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b42a:	2900      	cmp	r1, #0
 800b42c:	d044      	beq.n	800b4b8 <_free_r+0x90>
 800b42e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b432:	9001      	str	r0, [sp, #4]
 800b434:	2b00      	cmp	r3, #0
 800b436:	f1a1 0404 	sub.w	r4, r1, #4
 800b43a:	bfb8      	it	lt
 800b43c:	18e4      	addlt	r4, r4, r3
 800b43e:	f7ff ffa3 	bl	800b388 <__malloc_lock>
 800b442:	4a1e      	ldr	r2, [pc, #120]	; (800b4bc <_free_r+0x94>)
 800b444:	9801      	ldr	r0, [sp, #4]
 800b446:	6813      	ldr	r3, [r2, #0]
 800b448:	b933      	cbnz	r3, 800b458 <_free_r+0x30>
 800b44a:	6063      	str	r3, [r4, #4]
 800b44c:	6014      	str	r4, [r2, #0]
 800b44e:	b003      	add	sp, #12
 800b450:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b454:	f7ff bf9e 	b.w	800b394 <__malloc_unlock>
 800b458:	42a3      	cmp	r3, r4
 800b45a:	d908      	bls.n	800b46e <_free_r+0x46>
 800b45c:	6825      	ldr	r5, [r4, #0]
 800b45e:	1961      	adds	r1, r4, r5
 800b460:	428b      	cmp	r3, r1
 800b462:	bf01      	itttt	eq
 800b464:	6819      	ldreq	r1, [r3, #0]
 800b466:	685b      	ldreq	r3, [r3, #4]
 800b468:	1949      	addeq	r1, r1, r5
 800b46a:	6021      	streq	r1, [r4, #0]
 800b46c:	e7ed      	b.n	800b44a <_free_r+0x22>
 800b46e:	461a      	mov	r2, r3
 800b470:	685b      	ldr	r3, [r3, #4]
 800b472:	b10b      	cbz	r3, 800b478 <_free_r+0x50>
 800b474:	42a3      	cmp	r3, r4
 800b476:	d9fa      	bls.n	800b46e <_free_r+0x46>
 800b478:	6811      	ldr	r1, [r2, #0]
 800b47a:	1855      	adds	r5, r2, r1
 800b47c:	42a5      	cmp	r5, r4
 800b47e:	d10b      	bne.n	800b498 <_free_r+0x70>
 800b480:	6824      	ldr	r4, [r4, #0]
 800b482:	4421      	add	r1, r4
 800b484:	1854      	adds	r4, r2, r1
 800b486:	42a3      	cmp	r3, r4
 800b488:	6011      	str	r1, [r2, #0]
 800b48a:	d1e0      	bne.n	800b44e <_free_r+0x26>
 800b48c:	681c      	ldr	r4, [r3, #0]
 800b48e:	685b      	ldr	r3, [r3, #4]
 800b490:	6053      	str	r3, [r2, #4]
 800b492:	440c      	add	r4, r1
 800b494:	6014      	str	r4, [r2, #0]
 800b496:	e7da      	b.n	800b44e <_free_r+0x26>
 800b498:	d902      	bls.n	800b4a0 <_free_r+0x78>
 800b49a:	230c      	movs	r3, #12
 800b49c:	6003      	str	r3, [r0, #0]
 800b49e:	e7d6      	b.n	800b44e <_free_r+0x26>
 800b4a0:	6825      	ldr	r5, [r4, #0]
 800b4a2:	1961      	adds	r1, r4, r5
 800b4a4:	428b      	cmp	r3, r1
 800b4a6:	bf04      	itt	eq
 800b4a8:	6819      	ldreq	r1, [r3, #0]
 800b4aa:	685b      	ldreq	r3, [r3, #4]
 800b4ac:	6063      	str	r3, [r4, #4]
 800b4ae:	bf04      	itt	eq
 800b4b0:	1949      	addeq	r1, r1, r5
 800b4b2:	6021      	streq	r1, [r4, #0]
 800b4b4:	6054      	str	r4, [r2, #4]
 800b4b6:	e7ca      	b.n	800b44e <_free_r+0x26>
 800b4b8:	b003      	add	sp, #12
 800b4ba:	bd30      	pop	{r4, r5, pc}
 800b4bc:	20000970 	.word	0x20000970

0800b4c0 <_init>:
 800b4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4c2:	bf00      	nop
 800b4c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4c6:	bc08      	pop	{r3}
 800b4c8:	469e      	mov	lr, r3
 800b4ca:	4770      	bx	lr

0800b4cc <_fini>:
 800b4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ce:	bf00      	nop
 800b4d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4d2:	bc08      	pop	{r3}
 800b4d4:	469e      	mov	lr, r3
 800b4d6:	4770      	bx	lr
